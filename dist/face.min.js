import e from"crypto";function t(e,t){return t.forEach((function(t){t&&"string"!=typeof t&&!Array.isArray(t)&&Object.keys(t).forEach((function(n){if("default"!==n&&!(n in e)){var s=Object.getOwnPropertyDescriptor(t,n);Object.defineProperty(e,n,s.get?s:{enumerable:!0,get:function(){return t[n]}})}}))})),Object.freeze(e)}class n{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class s{refCount(e){return a("refCount")}incRef(e){return a("incRef")}timerAvailable(){return!0}time(e){return a("time")}read(e){return a("read")}readSync(e){return a("readSync")}readToGPU(e,t){return a("readToGPU")}numDataIds(){return a("numDataIds")}disposeData(e,t){return a("disposeData")}write(e,t,n){return a("write")}move(e,t,n,s,r){return a("move")}memory(){return a("memory")}floatPrecision(){return a("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return a("dispose")}}function a(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function r(e,t,n){return Math.max(e,Math.min(t,n))}function o(e){return e%2==0?e:e+1}function i(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function l(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function u(e,t,n=""){l(d(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function c(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||I(e)&&!n)for(let s=0;s<e.length;++s)c(e[s],t,n);else t.push(e);return t}function h(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function d(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function p(e){return e%1==0}function f(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function m(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function g(e,t=(e=>0),n,s=setTimeout){return new Promise(((a,r)=>{let o=0;const i=()=>{if(e())return void a();o++;const l=t(o);null!=n&&o>=n?r():s(i,l)};i()}))}function x(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const a=e.slice();return a[s]=t/n,a}function b(e,t){const n=t.length;return l((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),l(e.every((e=>p(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function y(e,t){const n=[],s=[],a=null!=t&&Array.isArray(t)&&0===t.length,r=null==t||a?null:b(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=r){if(r[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==r[o]||r[o]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),r[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function v(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function k(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function w(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function I(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function N(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function S(e){return"string"==typeof e||e instanceof String}function C(e){return Array.isArray(e)?C(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":"number"==typeof e?"float32":S(e)?"string":function(e){return"boolean"==typeof e}(e)?"bool":"float32"}function $(e){return!!(e&&e.constructor&&e.call&&e.apply)}function T(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function E(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function R(e,t,n,s=!1){const a=new Array;if(1===t.length){const r=t[0]*(s?2:1);for(let t=0;t<r;t++)a[t]=n[e+t]}else{const r=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(s?2:1);for(let t=0;t<r;t++)a[t]=R(e+t*i,o,n,s)}return a}function A(e,t,n=!1){if(0===e.length)return t[0];const s=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return R(0,e,t,n)}function _(e,t){const n=F(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function F(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function O(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return A(e,new Float32Array(n));if("int32"===t)return A(e,new Int32Array(n));if("bool"===t)return A(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function D(e){e.forEach((t=>{l(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function M(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function L(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function B(e){return e&&e.then&&"function"==typeof e.then}const P="tfjsflags";class z{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=W,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(V().getBool("IS_TEST")||V().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];V().getBool("IS_TEST")||V().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(B(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(P in e){e[P].split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function W(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function V(){return G}let U,G=null;function H(){if(null==U){let e;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}U=e}return U}function j(e,t){const n=function(){const e=H();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}const X="Acos",K="Acosh",q="Add",Y="AddN",Z="ArgMax",J="ArgMin",Q="Asin",ee="Asinh",te="Atan",ne="Atanh",se="Atan2",ae="AvgPool",re="AvgPoolGrad",oe="AvgPool3D",ie="AvgPool3DGrad",le="BatchMatMul",ue="BatchToSpaceND",ce="Bincount",he="BroadcastArgs",de="Cast",pe="Ceil",fe="ClipByValue",me="Complex",ge="ComplexAbs",xe="Concat",be="Conv2D",ye="Conv2DBackpropFilter",ve="Conv2DBackpropInput",ke="Conv3D",we="Conv3DBackpropFilterV2",Ie="Conv3DBackpropInputV2",Ne="Cos",Se="Cosh",Ce="Cumprod",$e="Cumsum",Te="CropAndResize",Ee="DenseBincount",Re="DepthToSpace",Ae="DepthwiseConv2dNative",_e="DepthwiseConv2dNativeBackpropFilter",Fe="DepthwiseConv2dNativeBackpropInput",Oe="Diag",De="Dilation2D",Me="Dilation2DBackpropInput",Le="Dilation2DBackpropFilter",Be="RealDiv",Pe="Einsum",ze="Elu",We="EluGrad",Ve="Erf",Ue="Equal",Ge="Exp",He="ExpandDims",je="Expm1",Xe="Fill",Ke="FlipLeftRight",qe="Floor",Ye="FloorDiv",Ze="FusedBatchNorm",Je="GatherV2",Qe="GatherNd",et="Greater",tt="GreaterEqual",nt="Identity",st="IFFT",at="Imag",rt="IsFinite",ot="IsInf",it="IsNan",lt="LeakyRelu",ut="Less",ct="LessEqual",ht="LinSpace",dt="Log",pt="Log1p",ft="LogicalAnd",mt="LogicalNot",gt="LogicalOr",xt="LRNGrad",bt="Maximum",yt="MaxPool",vt="MaxPoolGrad",kt="MaxPool3D",wt="MaxPool3DGrad",It="MaxPoolWithArgmax",Nt="Mean",St="Minimum",Ct="MirrorPad",$t="Mod",Tt="Multinomial",Et="Multiply",Rt="NotEqual",At="NonMaxSuppressionV3",_t="NonMaxSuppressionV4",Ft="NonMaxSuppressionV5",Ot="OnesLike",Dt="OneHot",Mt="Pack",Lt="PadV2",Bt="Pow",Pt="Prelu",zt="Prod",Wt="RaggedGather",Vt="RaggedTensorToTensor",Ut="Range",Gt="Real",Ht="Reciprocal",jt="Relu",Xt="Reshape",Kt="ResizeNearestNeighbor",qt="ResizeNearestNeighborGrad",Yt="ResizeBilinear",Zt="ResizeBilinearGrad",Jt="Relu6",Qt="Reverse",en="Round",tn="Rsqrt",nn="ScatterNd",sn="SearchSorted",an="Select",rn="Selu",on="Slice",ln="Sin",un="Sinh",cn="Sign",hn="Sigmoid",dn="Softplus",pn="Sqrt",fn="Sum",mn="SpaceToBatchND",gn="SplitV",xn="Softmax",bn="SparseFillEmptyRows",yn="SparseReshape",vn="SparseSegmentMean",kn="SparseSegmentSum",wn="SparseToDense",In="SquaredDifference",Nn="Square",Sn="StridedSlice",Cn="StringNGrams",$n="StringSplit",Tn="StringToHashBucketFast",En="Sub",Rn="Tan",An="Tanh",_n="Tile",Fn="TopK",On="Transform",Dn="Transpose",Mn="Unique",Ln="Unpack",Bn="UnsortedSegmentSum",Pn="ZerosLike",zn="Step",Wn="RotateWithOffset",Vn="_FusedMatMul",Un="FusedConv2D",Gn="FusedDepthwiseConv2D";function Hn(...e){V().getBool("IS_TEST")||V().getBool("PROD")||console.warn(...e)}const jn=j("kernelRegistry",(()=>new Map)),Xn=j("gradRegistry",(()=>new Map));function Kn(e,t){const n=Jn(e,t);return jn.get(n)}function qn(e){return Xn.get(e)}function Yn(e){const t=jn.entries(),n=[];for(;;){const{done:s,value:a}=t.next();if(s)break;const[r,o]=a,[i]=r.split("_");i===e&&n.push(o)}return n}function Zn(e){const{kernelName:t,backendName:n}=e,s=Jn(t,n);jn.has(s)&&Hn(`The kernel '${t}' for backend '${n}' is already registered`),jn.set(s,e)}function Jn(e,t){return`${t}_${e}`}var Qn=ts,es=null;try{es=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function ts(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function ns(e){return!0===(e&&e.__isLong__)}ts.prototype.__isLong__,Object.defineProperty(ts.prototype,"__isLong__",{value:!0}),ts.isLong=ns;var ss={},as={};function rs(e,t){var n,s,a;return t?(a=0<=(e>>>=0)&&e<256)&&(s=as[e])?s:(n=is(e,(0|e)<0?-1:0,!0),a&&(as[e]=n),n):(a=-128<=(e|=0)&&e<128)&&(s=ss[e])?s:(n=is(e,e<0?-1:0,!1),a&&(ss[e]=n),n)}function os(e,t){if(isNaN(e))return t?gs:ms;if(t){if(e<0)return gs;if(e>=ds)return ks}else{if(e<=-ps)return ws;if(e+1>=ps)return vs}return e<0?os(-e,t).neg():is(e%hs|0,e/hs|0,t)}function is(e,t,n){return new ts(e,t,n)}ts.fromInt=rs,ts.fromNumber=os,ts.fromBits=is;var ls=Math.pow;function us(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return ms;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var s;if((s=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===s)return us(e.substring(1),t,n).neg();for(var a=os(ls(n,8)),r=ms,o=0;o<e.length;o+=8){var i=Math.min(8,e.length-o),l=parseInt(e.substring(o,o+i),n);if(i<8){var u=os(ls(n,i));r=r.mul(u).add(os(l))}else r=(r=r.mul(a)).add(os(l))}return r.unsigned=t,r}function cs(e,t){return"number"==typeof e?os(e,t):"string"==typeof e?us(e,t):is(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}ts.fromString=us,ts.fromValue=cs;var hs=4294967296,ds=hs*hs,ps=ds/2,fs=rs(1<<24),ms=rs(0);ts.ZERO=ms;var gs=rs(0,!0);ts.UZERO=gs;var xs=rs(1);ts.ONE=xs;var bs=rs(1,!0);ts.UONE=bs;var ys=rs(-1);ts.NEG_ONE=ys;var vs=is(-1,2147483647,!1);ts.MAX_VALUE=vs;var ks=is(-1,-1,!0);ts.MAX_UNSIGNED_VALUE=ks;var ws=is(0,-2147483648,!1);ts.MIN_VALUE=ws;var Is=ts.prototype;Is.toInt=function(){return this.unsigned?this.low>>>0:this.low},Is.toNumber=function(){return this.unsigned?(this.high>>>0)*hs+(this.low>>>0):this.high*hs+(this.low>>>0)},Is.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(ws)){var t=os(e),n=this.div(t),s=n.mul(t).sub(this);return n.toString(e)+s.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var a=os(ls(e,6),this.unsigned),r=this,o="";;){var i=r.div(a),l=(r.sub(i.mul(a)).toInt()>>>0).toString(e);if((r=i).isZero())return l+o;for(;l.length<6;)l="0"+l;o=""+l+o}},Is.getHighBits=function(){return this.high},Is.getHighBitsUnsigned=function(){return this.high>>>0},Is.getLowBits=function(){return this.low},Is.getLowBitsUnsigned=function(){return this.low>>>0},Is.getNumBitsAbs=function(){if(this.isNegative())return this.eq(ws)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},Is.isZero=function(){return 0===this.high&&0===this.low},Is.eqz=Is.isZero,Is.isNegative=function(){return!this.unsigned&&this.high<0},Is.isPositive=function(){return this.unsigned||this.high>=0},Is.isOdd=function(){return 1==(1&this.low)},Is.isEven=function(){return 0==(1&this.low)},Is.equals=function(e){return ns(e)||(e=cs(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},Is.eq=Is.equals,Is.notEquals=function(e){return!this.eq(e)},Is.neq=Is.notEquals,Is.ne=Is.notEquals,Is.lessThan=function(e){return this.comp(e)<0},Is.lt=Is.lessThan,Is.lessThanOrEqual=function(e){return this.comp(e)<=0},Is.lte=Is.lessThanOrEqual,Is.le=Is.lessThanOrEqual,Is.greaterThan=function(e){return this.comp(e)>0},Is.gt=Is.greaterThan,Is.greaterThanOrEqual=function(e){return this.comp(e)>=0},Is.gte=Is.greaterThanOrEqual,Is.ge=Is.greaterThanOrEqual,Is.compare=function(e){if(ns(e)||(e=cs(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},Is.comp=Is.compare,Is.negate=function(){return!this.unsigned&&this.eq(ws)?ws:this.not().add(xs)},Is.neg=Is.negate,Is.add=function(e){ns(e)||(e=cs(e));var t=this.high>>>16,n=65535&this.high,s=this.low>>>16,a=65535&this.low,r=e.high>>>16,o=65535&e.high,i=e.low>>>16,l=0,u=0,c=0,h=0;return c+=(h+=a+(65535&e.low))>>>16,u+=(c+=s+i)>>>16,l+=(u+=n+o)>>>16,l+=t+r,is((c&=65535)<<16|(h&=65535),(l&=65535)<<16|(u&=65535),this.unsigned)},Is.subtract=function(e){return ns(e)||(e=cs(e)),this.add(e.neg())},Is.sub=Is.subtract,Is.multiply=function(e){if(this.isZero())return ms;if(ns(e)||(e=cs(e)),es)return is(es.mul(this.low,this.high,e.low,e.high),es.get_high(),this.unsigned);if(e.isZero())return ms;if(this.eq(ws))return e.isOdd()?ws:ms;if(e.eq(ws))return this.isOdd()?ws:ms;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(fs)&&e.lt(fs))return os(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,n=65535&this.high,s=this.low>>>16,a=65535&this.low,r=e.high>>>16,o=65535&e.high,i=e.low>>>16,l=65535&e.low,u=0,c=0,h=0,d=0;return h+=(d+=a*l)>>>16,c+=(h+=s*l)>>>16,h&=65535,c+=(h+=a*i)>>>16,u+=(c+=n*l)>>>16,c&=65535,u+=(c+=s*i)>>>16,c&=65535,u+=(c+=a*o)>>>16,u+=t*l+n*i+s*o+a*r,is((h&=65535)<<16|(d&=65535),(u&=65535)<<16|(c&=65535),this.unsigned)},Is.mul=Is.multiply,Is.divide=function(e){if(ns(e)||(e=cs(e)),e.isZero())throw Error("division by zero");var t,n,s;if(es)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?is((this.unsigned?es.div_u:es.div_s)(this.low,this.high,e.low,e.high),es.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?gs:ms;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return gs;if(e.gt(this.shru(1)))return bs;s=gs}else{if(this.eq(ws))return e.eq(xs)||e.eq(ys)?ws:e.eq(ws)?xs:(t=this.shr(1).div(e).shl(1)).eq(ms)?e.isNegative()?xs:ys:(n=this.sub(e.mul(t)),s=t.add(n.div(e)));if(e.eq(ws))return this.unsigned?gs:ms;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();s=ms}for(n=this;n.gte(e);){t=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var a=Math.ceil(Math.log(t)/Math.LN2),r=a<=48?1:ls(2,a-48),o=os(t),i=o.mul(e);i.isNegative()||i.gt(n);)i=(o=os(t-=r,this.unsigned)).mul(e);o.isZero()&&(o=xs),s=s.add(o),n=n.sub(i)}return s},Is.div=Is.divide,Is.modulo=function(e){return ns(e)||(e=cs(e)),es?is((this.unsigned?es.rem_u:es.rem_s)(this.low,this.high,e.low,e.high),es.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},Is.mod=Is.modulo,Is.rem=Is.modulo,Is.not=function(){return is(~this.low,~this.high,this.unsigned)},Is.and=function(e){return ns(e)||(e=cs(e)),is(this.low&e.low,this.high&e.high,this.unsigned)},Is.or=function(e){return ns(e)||(e=cs(e)),is(this.low|e.low,this.high|e.high,this.unsigned)},Is.xor=function(e){return ns(e)||(e=cs(e)),is(this.low^e.low,this.high^e.high,this.unsigned)},Is.shiftLeft=function(e){return ns(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?is(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):is(0,this.low<<e-32,this.unsigned)},Is.shl=Is.shiftLeft,Is.shiftRight=function(e){return ns(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?is(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):is(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},Is.shr=Is.shiftRight,Is.shiftRightUnsigned=function(e){if(ns(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?is(this.low>>>e|t<<32-e,t>>>e,this.unsigned):is(32===e?t:t>>>e-32,0,this.unsigned)},Is.shru=Is.shiftRightUnsigned,Is.shr_u=Is.shiftRightUnsigned,Is.toSigned=function(){return this.unsigned?is(this.low,this.high,!1):this},Is.toUnsigned=function(){return this.unsigned?this:is(this.low,this.high,!0)},Is.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},Is.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},Is.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},ts.fromBytes=function(e,t,n){return n?ts.fromBytesLE(e,t):ts.fromBytesBE(e,t)},ts.fromBytesLE=function(e,t){return new ts(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},ts.fromBytesBE=function(e,t){return new ts(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};var Ns=t({__proto__:null,default:Qn},[Qn]);const Ss=Qn||Ns;function Cs(e){return Ss.fromString(e,!0,16)}const $s=Cs("c3a5c85c97cb3127"),Ts=Cs("b492b66fbe98f273"),Es=Cs("9ae16a3b2f90404f");function Rs(e){return e.xor(e.shru(47))}function As(e,t,n){const s=e.slice(t,t+n);return Ss.fromBytes(Array.from(s),!0,!0)}function _s(e,t){return As(e,t,8)}function Fs(e,t){return As(e,t,4)}function Os(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function Ds(e,t,n=Cs("9ddfea08eb382d69")){let s=e.xor(t).mul(n);s=s.xor(s.shru(47));let a=t.xor(s).mul(n);return a=a.xor(a.shru(47)),a=a.mul(n),a}function Ms(e,t,n,s){return function(e,t,n,s,a,r){a=a.add(e),r=Os(r.add(a).add(s),21);const o=a;return a=(a=a.add(t)).add(n),r=r.add(Os(a,44)),[a.add(s),r.add(o)]}(_s(e,t),_s(e,t+8),_s(e,t+16),_s(e,t+24),n,s)}function Ls(e,t=e.length){const n=Ss.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=Es.add(2*t),s=_s(e,0).add(Es),a=_s(e,t-8);return Ds(Os(a,37).mul(n).add(s),Os(s,25).add(a).mul(n),n)}if(t>=4){const n=Es.add(2*t);return Ds(Fs(e,0).shl(3).add(t),Fs(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),s=t+(e[t-1]<<2);return Rs(Es.mul(n).xor($s.mul(s))).mul(Es)}return Es}(e,t):function(e,t=e.length){const n=Es.add(2*t),s=_s(e,0).mul(Ts),a=_s(e,8),r=_s(e,t-8).mul(n),o=_s(e,t-16).mul(Es);return Ds(Os(s.add(a),43).add(Os(r,30)).add(o),s.add(Os(a.add(Es),18)).add(r),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=Es.add(2*t),s=_s(e,0).mul(Es),a=_s(e,8),r=_s(e,t-8).mul(n),o=_s(e,t-16).mul(Es),i=Os(s.add(a),43).add(Os(r,30)).add(o),l=Ds(i,s.add(Os(a.add(Es),18)).add(r),n),u=_s(e,16).mul(n),c=_s(e,24),h=i.add(_s(e,t-32)).mul(n),d=l.add(_s(e,t-24)).mul(n);return Ds(Os(u.add(c),43).add(Os(h,30)).add(d),u.add(Os(c.add(s),18)).add(h),n)}(e,t);let s=n,a=n.mul(Ts).add(113),r=Rs(a.mul(Es).add(113)).mul(Es),o=[Ss.UZERO,Ss.UZERO],i=[Ss.UZERO,Ss.UZERO];s=s.mul(Es).add(_s(e,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=Os(s.add(a).add(o[0]).add(_s(e,l+8)),37).mul(Ts),a=Os(a.add(o[1]).add(_s(e,l+48)),42).mul(Ts),s=s.xor(i[1]),a=a.add(o[0]).add(_s(e,l+40)),r=Os(r.add(i[0]),33).mul(Ts),o=Ms(e,l,o[1].mul(Ts),s.add(i[0])),i=Ms(e,l+32,r.add(i[1]),a.add(_s(e,l+16))),[r,s]=[s,r],l+=64}while(l!==u);const h=Ts.add(r.and(255).shl(1));return l=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),s=Os(s.add(a).add(o[0]).add(_s(e,l+8)),37).mul(h),a=Os(a.add(o[1]).add(_s(e,l+48)),42).mul(h),s=s.xor(i[1].mul(9)),a=a.add(o[0].mul(9).add(_s(e,l+40))),r=Os(r.add(i[0]),33).mul(h),o=Ms(e,l,o[1].mul(h),s.add(i[0])),i=Ms(e,l+32,r.add(i[1]),a.add(_s(e,l+16))),[r,s]=[s,r],Ds(Ds(o[0],i[0],h).add(Rs(a).mul($s)).add(r),Ds(o[1],i[1],h).add(s),h)}function Bs(e,t){return"string"===t?Ws(e):Ps([e],t)}function Ps(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=c(e)),V().getBool("DEBUG")&&function(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function zs(){return V().platform.now()}function Ws(e,t="utf-8"){return t=t||"utf-8",V().platform.encode(e,t)}function Vs(e,t="utf-8"){return t=t||"utf-8",V().platform.decode(e,t)}class Us{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Hs)}profileKernel(e,t,n){let s;const a=()=>{s=n()};let r;const o=zs();if(this.backendTimer.timerAvailable())r=this.backendTimer.time(a);else{a();for(const e of s)e.dataSync();r=Promise.resolve({kernelMs:zs()-o})}if(V().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then((t=>{Gs(t,n.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:r.then((e=>e.kernelMs)),extraInfo:r.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:a,extraInfo:r}=e;n.forEach((e=>{Promise.all([e.data(),s,r]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],a,n[2])}))}))}}function Gs(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class Hs{logKernelProfile(e,t,n,s,a,r){const o="number"==typeof s?m(`${s}ms`,9):s.error,i=m(e,25),l=t.rank,u=t.size,c=m(t.shape.toString(),14);let h="";for(const e in a){const n=a[e];if(null!=n){const s=n.shape||t.shape,a=s.length;h+=`${e}: ${a}D ${a>0?s:""} `}}console.log(`%c${i}\t%c${o}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${r}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}const js=20,Xs=3,Ks=7;function qs(e,t,n,s){const a=E(t),r=function(e,t,n,s){const a=h(t),r=s[s.length-1],o=new Array(r).fill(0),i=t.length,l="complex64"===n?Qs(e):e;if(i>1)for(let e=0;e<a/r;e++){const t=e*r;for(let e=0;e<r;e++)o[e]=Math.max(o[e],Ys(l[t+e],0,n).length)}return o}(e,t,n,a),o=t.length,i=Js(e,t,n,a,r),l=["Tensor"];return s&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${o}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(i.map((e=>"    "+e)).join("\n")),l.join("\n")}function Ys(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(Ks))} + ${parseFloat(e[1].toFixed(Ks))}j`:S(e)?`'${e}'`:"bool"===n?Zs(e):parseFloat(e.toFixed(Ks)).toString(),m(s,t)}function Zs(e){return 0===e?"false":"true"}function Js(e,t,n,s,a,r=!0){const o="complex64"===n?2:1,i=t[0],l=t.length;if(0===l){if("complex64"===n){return[Ys(Qs(e)[0],0,n)]}return"bool"===n?[Zs(e[0])]:[e[0].toString()]}if(1===l){if(i>js){const t=Xs*o;let s=Array.from(e.slice(0,t)),r=Array.from(e.slice((i-Xs)*o,i*o));return"complex64"===n&&(s=Qs(s),r=Qs(r)),["["+s.map(((e,t)=>Ys(e,a[t],n))).join(", ")+", ..., "+r.map(((e,t)=>Ys(e,a[i-Xs+t],n))).join(", ")+"]"]}return["["+("complex64"===n?Qs(e):Array.from(e)).map(((e,t)=>Ys(e,a[t],n))).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*o,d=[];if(i>js){for(let t=0;t<Xs;t++){const s=t*h,r=s+h;d.push(...Js(e.slice(s,r),u,n,c,a,!1))}d.push("...");for(let t=i-Xs;t<i;t++){const s=t*h,r=s+h;d.push(...Js(e.slice(s,r),u,n,c,a,t===i-1))}}else for(let t=0;t<i;t++){const s=t*h,r=s+h;d.push(...Js(e.slice(s,r),u,n,c,a,t===i-1))}const p=2===l?",":"";d[0]="["+d[0]+p;for(let e=1;e<d.length-1;e++)d[e]=" "+d[e]+p;let f=",\n";for(let e=2;e<l;e++)f+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(r?"":f),d}function Qs(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class ea{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=h(e),null!=n){const e=n.length;l(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||k(t,this.size),this.strides=E(e)}set(e,...t){0===t.length&&(t=[0]),l(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return ta().makeTensor(this.values,this.shape,this.dtype)}}let ta=null,na=null;class sa{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=h(e),this.strides=E(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return na.buffer(this.shape,this.dtype,e)}bufferSync(){return na.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return A(this.shape,e,"complex64"===this.dtype)}arraySync(){return A(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=ta().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>Vs(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),ta().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=ta().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>Vs(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await ta().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(ta().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return na.print(this,e)}clone(){return this.throwIfDisposed(),na.clone(this)}toString(e=!1){return qs(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),na.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),ta().makeVariable(this,e,t,n)}}Object.defineProperty(sa,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),j("Tensor",(()=>sa));class aa extends sa{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!d(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);ta().disposeTensor(this),this.dataId=e.dataId,ta().incRef(this,null)}dispose(){ta().disposeVariable(this),this.isDisposedInternal=!0}}var ra,oa,ia,la,ua;Object.defineProperty(aa,Symbol.hasInstance,{value:e=>e instanceof sa&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(ra||(ra={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(oa||(oa={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(ia||(ia={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(la||(la={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(ua||(ua={}));const ca={float32:la,int32:oa,bool:ia,complex64:ua};function ha(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return ca[e][t]}function da(e){return ha(e,"int32")}function pa(e){const t=[];return fa(e,t,new Set),t}function fa(e,t,n){if(null==e)return;if(e instanceof sa)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const a=e;for(const e in a){const s=a[e];n.has(s)||(n.add(s),fa(s,t,n))}}function ma(e){return null!=e.kernelName}class ga{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class xa{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new ga}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(Hn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Us(this.backendInstance),!0}setupRegisteredKernels(){Yn(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Yn(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof s||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,Hn(`Initialization of backend ${e} failed`),Hn(n.stack||n.message)),!1)));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(t){return Hn(`Initialization of backend ${e} failed`),Hn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:a}=this.initializeBackend(n);if(a||s)return{name:n,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,a=this.readSync(t),r=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,a,n.shape,n.dtype,r),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return xa.nextTensorId++}nextVariableId(){return xa.nextVariableId++}clone(e){const t=ya.runKernel(nt,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return ya.runKernel(de,t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=Kn(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let a=0;n.forEach((e=>{a+="complex64"===e.dtype?3:1}));const r=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=s-t-a-r;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),a=this.state.numBytes,r=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=ma(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(ma(e)){const{kernelName:t,inputs:a,attrs:r}=e;null==this.backendName&&this.backend;const u=Kn(t,this.backendName);l(null!=u,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();i=u.kernelFunc({inputs:a,attrs:r,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const l=o.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(s){const e=this.getTensorsForGradient(t,a,l);n=this.saveTensorsForBackwardMode(e)}return l}}else{const{forwardFunc:t}=e,a=e=>{s&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy((()=>t(this.backend,a)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:c,attrs:h}=e,d=ma(e)?null:e.backwardsFunc;let p;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(p=this.profiler.profileKernel(u,c,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(p),t=p.outputs):t=o()})),s&&this.addTapeNode(u,c,t,d,n,h),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-r,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(c).map((e=>null!=c[e]?c[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:p.timeMs,extraInfo:p.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){const t=e.map((e=>this.keep(this.clone(e))));return t}getTensorsForGradient(e,t,n){const s=qn(e);if(null!=s){const e=s.inputsToSave||[],a=s.outputsToSave||[];let r;s.saveAllInputs?(l(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),r=Object.keys(t).map((e=>t[e]))):r=e.map((e=>t[e]));const o=n.filter(((e,t)=>a[t]));return r.concat(o)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let a=e;"string"===n&&S(e[0])&&(a=e.map((e=>Ws(e))));const r=s.write(a,t,n),o=new sa(t,n,r,this.nextTensorId());if(this.trackTensor(o,s),"string"===n){const e=this.state.tensorInfo.get(r),t=function(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}(a);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,s){const a={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(a,s)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:s,dtype:a}=e,r=new sa(s,a,n,this.nextTensorId());return this.trackTensor(r,t),r}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const a=new aa(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*N(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof aa||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*N(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,a,r){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:a},i=qn(e);null!=i&&(s=i.gradFunc),null!=s&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=F(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],a,r))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=pa(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n,s=!1){if(l(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const a=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));l(a instanceof sa,(()=>"The result y returned by f() must be a tensor."));const r=function(e,t,n){const s={},a={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const r=e[n],o=r.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(s[n.id]){r.outputs.forEach((e=>s[e.id]=!0)),i=!0,a[r.id]=!0;break}if(i)break}}const r={};r[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(r[n.outputs[e].id]){for(const e in s)r[s[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(a[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const a=n.inputs[t];s[a.id]&&(e[t]=a)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,a);if(!s&&0===r.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[a.id]=null==n?function(e){const t=_(h(e),"float32");return ya.makeTensor(t,e,"float32")}(a.shape):n,function(e,t,n,s){for(let a=t.length-1;a>=0;a--){const r=t[a],o=[];if(r.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==r.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${r.kernelName}.`);const i=r.gradient(o);for(const t in r.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const a=n((()=>i[t]()));if("float32"!==a.dtype)throw new Error(`Error in gradient for op ${r.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${a.dtype}'`);const o=r.inputs[t];if(!d(a.shape,o.shape))throw new Error(`Error in gradient for op ${r.kernelName}. The gradient of input '${t}' has shape '${a.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=a;else{const t=e[o.id];e[o.id]=s(t,a),t.dispose()}}}}(e,r,(e=>this.tidy(e)),va);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:a,grads:s}}))}customGrad(e){return l($(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;l(t.every((e=>e instanceof sa)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};t.forEach(((e,t)=>{s[t]=e}));return this.runKernelFunc({forwardFunc:(s,a)=>(n=e(...t,a),l(n.value instanceof sa,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),l($(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,s)=>{const a=n.gradFunc(e,s),r=Array.isArray(a)?a:[a];l(r.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),l(r.every((e=>e instanceof sa)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return r.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=zs(),n=await this.backend.time(e);return n.wallMs=zs()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new ga;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function ba(){const e=H();if(null==e._tfengine){const t=new z(e);e._tfengine=new xa(t)}var t;return t=e._tfengine.ENV,G=t,ta=()=>e._tfengine,e._tfengine}xa.nextTensorId=0,xa.nextVariableId=0;const ya=ba();function va(e,t){const n={a:e,b:t};return ya.runKernel(q,n)}function ka(e){if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function wa(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const Ia=V();function Na(e,t){let n=e;if(I(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||I(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&V().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Sa(e,s,[]),s}function Sa(e,t,n){if(n=n||[],!Array.isArray(e)&&!I(e))return void l(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));l(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),l(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let t=0;t<e.length;++t)Sa(e[t],s,n.concat(t))}function Ca(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function $a(e,t,n,s="numeric"){if(e instanceof sa)return Ca(s,e.dtype,t,n),e;let a=C(e);if("string"!==a&&["bool","int32","float32"].indexOf(s)>=0&&(a=s),Ca(s,a,t,n),null==e||!I(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const r=Na(e,a);I(e)||Array.isArray(e)||(e=[e]);const o="string"!==a?Ps(e,a):c(e,[],!0);return ya.makeTensor(o,r,a)}Ia.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Ia.registerFlag("IS_BROWSER",(()=>wa())),Ia.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),Ia.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Ia.registerFlag("PROD",(()=>!1)),Ia.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Ia.getBool("DEBUG"))),Ia.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Ia.registerFlag("IS_TEST",(()=>!1)),Ia.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),Ia.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),Ia.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1)),Ia.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),Ia.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));function Ta(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const a=(...e)=>{ya.startScope(n);try{const t=s(...e);return B(t)&&console.error("Cannot return a Promise inside of tidy."),ya.endScope(t),t}catch(e){throw ya.endScope(null),e}};return Object.defineProperty(a,"name",{value:n,configurable:!0}),a}const Ea=Ta({complex_:function(e,t){const n=$a(e,"real","complex"),s=$a(t,"imag","complex");u(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const a={real:n,imag:s};return ya.runKernel(me,a)}});const Ra="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Aa(e){return Ra?Buffer.byteLength(e):new Blob([e]).size}function _a(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Aa(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Aa(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}class Fa{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Fa.instance&&(Fa.instance=new Fa),Fa.instance}static registerSaveRouter(e){Fa.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Fa.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Fa.getHandlers(e,"save")}static getLoadHandlers(e,t){return Fa.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?Fa.getInstance().loadRouters:Fa.getInstance().saveRouters).forEach((t=>{const a=t(e,n);null!==a&&s.push(a)})),s}}const Oa="tensorflowjs",Da="models_store",Ma="model_info_store";function La(){if(!V().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Ba(e){const t=e.result;t.createObjectStore(Da,{keyPath:"modelPath"}),t.createObjectStore(Ma,{keyPath:"modelPath"})}class Pa{constructor(e){if(this.indexedDB=La(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open(Oa,1);s.onupgradeneeded=()=>Ba(s),s.onsuccess=()=>{const a=s.result;if(null==t){const t=a.transaction(Da,"readonly"),s=t.objectStore(Da).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return a.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(a.close(),n(s.error)),t.oncomplete=()=>a.close()}else{const s=_a(t),r=a.transaction(Ma,"readwrite");let o=r.objectStore(Ma);const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:s});let l;i.onsuccess=()=>{l=a.transaction(Da,"readwrite");const i=l.objectStore(Da).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s});i.onsuccess=()=>e({modelArtifactsInfo:s}),i.onerror=e=>{o=r.objectStore(Ma);const t=o.delete(this.modelPath);t.onsuccess=()=>(a.close(),n(i.error)),t.onerror=e=>(a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),r.oncomplete=()=>{null==l?a.close():l.oncomplete=()=>a.close()}}},s.onerror=e=>n(s.error)}))}}Pa.URL_SCHEME="indexeddb://";const za=e=>{return V().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Pa.URL_SCHEME)?(t=e.slice(Pa.URL_SCHEME.length),new Pa(t)):null;var t};Fa.registerSaveRouter(za),Fa.registerLoadRouter(za);class Wa{constructor(){this.indexedDB=La()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(Oa,1);n.onupgradeneeded=()=>Ba(n),n.onsuccess=()=>{const s=n.result,a=s.transaction(Ma,"readonly"),r=a.objectStore(Ma).getAll();r.onsuccess=()=>{const t={};for(const e of r.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},r.onerror=e=>(s.close(),t(r.error)),a.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){return e=function(e){return e.startsWith(Pa.URL_SCHEME)?e.slice(Pa.URL_SCHEME.length):e}(e),new Promise(((t,n)=>{const s=this.indexedDB.open(Oa,1);s.onupgradeneeded=()=>Ba(s),s.onsuccess=()=>{const a=s.result,r=a.transaction(Ma,"readwrite"),o=r.objectStore(Ma),i=o.get(e);let l;i.onsuccess=()=>{if(null==i.result)return a.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=o.delete(e),r=()=>{l=a.transaction(Da,"readwrite");const s=l.objectStore(Da).delete(e);s.onsuccess=()=>t(i.result.modelArtifactsInfo),s.onerror=e=>n(i.error)};s.onsuccess=r,s.onerror=e=>(r(),a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),r.oncomplete=()=>{null==l?a.close():l.oncomplete=()=>a.close()}},s.onerror=e=>n(s.error)}))}}const Va="/",Ua="tensorflowjs_models",Ga="info",Ha="model_topology",ja="weight_specs",Xa="weight_data",Ka="model_metadata";function qa(e){return{info:[Ua,e,Ga].join(Va),topology:[Ua,e,Ha].join(Va),weightSpecs:[Ua,e,ja].join(Va),weightData:[Ua,e,Xa].join(Va),modelMetadata:[Ua,e,Ka].join(Va)}}function Ya(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function Za(e){const t=e.split(Va);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(Va)}class Ja{constructor(e){if(!V().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=qa(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=_a(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(Ra)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:s}}catch(e){throw Ya(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){const e=JSON.parse(a);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const r=this.LS.getItem(this.keys.weightData);if(null==r)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(Ra){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(r),t}}Ja.URL_SCHEME="localstorage://";const Qa=e=>{return V().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ja.URL_SCHEME)?(t=e.slice(Ja.URL_SCHEME.length),new Ja(t)):null;var t};Fa.registerSaveRouter(Qa),Fa.registerLoadRouter(Qa);class er{constructor(){l(V().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),l("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=Ua+Va,n=Va+Ga;for(let s=0;s<this.LS.length;++s){const a=this.LS.key(s);if(a.startsWith(t)&&a.endsWith(n)){e[Za(a)]=JSON.parse(this.LS.getItem(a))}}return e}async removeModel(e){e=function(e){return e.startsWith(Ja.URL_SCHEME)?e.slice(Ja.URL_SCHEME.length):e}(e);const t=qa(e);if(null==this.LS.getItem(t.info))throw new Error(`Cannot find model at path '${e}'`);const n=JSON.parse(this.LS.getItem(t.info));return Ya(t),n}}class tr{constructor(){this.managers={}}static getInstance(){return null==tr.instance&&(tr.instance=new tr),tr.instance}static registerManager(e,t){l(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),l(e.length>0,(()=>"scheme must not be an empty string."));const n=tr.getInstance();l(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=tr.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(tr.getInstance().managers)}}class nr{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){window&&V().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{if(e.source===window&&e.data.name===this.messageName){e.stopPropagation();(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}}),!0))):setTimeout(e,t)}}if(V().get("IS_BROWSER")){V().setPlatform("browser",new nr);try{tr.registerManager(Ja.URL_SCHEME,new er)}catch(e){}try{tr.registerManager(Pa.URL_SCHEME,new Wa)}catch(e){}}const sr=()=>require("node-fetch");let ar;class rr{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=V().global.fetch?V().global.fetch(e,t):(null==ar&&(ar=sr()),ar(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}}function or(e,t="float32",n){return t=t||"float32",D(e),new ea(e,t,n)}V().get("IS_NODE")&&!V().get("IS_BROWSER")&&V().setPlatform("node",new rr);const ir=Ta({cast_:function(e,t){const n=$a(e,"x","cast");if(!function(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},a={dtype:t};return ya.runKernel(de,s,a)}});const lr=Ta({clone_:function(e){const t={x:$a(e,"x","clone","string_or_numeric")};return ya.runKernel(nt,t)}});ba();function ur(){return ya}function cr(e,t){return ya.tidy(e,t)}function hr(e,t,n=1){return ya.registerBackend(e,t,n)}function dr(e,t){const n=e.length,s=[];for(let a=0;a<n;a++){const r=n-1-a,o=e[r]||1;(t[t.length-1-a]||1)>1&&1===o&&s.unshift(r)}return s}function pr(e,t){const n=[];for(let s=0;s<t.length;s++){const a=e[e.length-s-1],r=t.length-s-1,o=t[r];(null==a||1===a&&o>1)&&n.unshift(r)}return n}function fr(e,t){const n=[],s=Math.max(e.length,t.length);for(let a=0;a<s;a++){let s=e[e.length-a-1];null==s&&(s=1);let r=t[t.length-a-1];if(null==r&&(r=1),1===s)n.unshift(r);else if(1===r)n.unshift(s);else{if(s!==r){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(s)}}return n}function mr(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===h(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const a=t.shape,r=a[a.length-1];let o=1;for(let e=0;e<a.length-1;++e)o*=a[e];const i=e.shape,l=a.slice();l.pop();let u=1;for(let e=r;e<n;++e)u*=i[e],l.push(i[e]);const c=[...E(e.shape).map((e=>e/u)),1].slice(0,r);return[l,o,u,c]}function gr(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,a=t.rank>1?t.rank-1:1,r=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${a}.`;if(n.rank<a)throw new Error(r+` update.rank < ${a}. `);if(e.length<s+(n.rank-a))throw new Error(r+` Output shape length < ${s+(n.rank-a)}`);if(n.rank!==a+e.length-s)throw new Error(r+" update.rank != "+(a+e.length-s));for(let e=0;e<a;++e)if(n.shape[e]!==t.shape[e])throw new Error(r+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-a;++t)if(n.shape[t+a]!==e[t+s])throw new Error(r+` updates.shape[${t+a}] (${n.shape[t+a]}) != shape[${t+a}] (${e[t+a]})`)}function xr(e,t,n){const s=t.shape.length,a=s>1?t.shape[s-1]:1,r=n.length;let o=1;for(let e=a;e<r;++e)o*=n[e];const i=a<1?1:a;return{sliceRank:a,numUpdates:h(t.shape)/i,sliceSize:o,strides:[...E(n.slice(0,a)),1],outputSize:h(n)}}na={buffer:or,cast:ir,clone:lr,print:function(e,t=!1){console.log(e.toString(t))}};const br=-2,yr=-1;function vr(e,t,n){const s=e.shape.length;l(s===t.length,(()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`)),l(s===n.length,(()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`));for(let a=0;a<s;++a)l(t[a]+n[a]<=e.shape[a],(()=>`Error in slice${s}D: begin[${a}] + size[${a}] (${t[a]+n[a]}) would overflow input.shape[${a}] (${e.shape[a]})`))}function kr(e,t,n){const s=[];for(let a=0;a<e.length;a++)s[a]=Math.ceil((t[a]-e[a])/n[a]);return s}function wr(e,t,n,s){const a=[...e];for(let e=a.length;e<s.length;e++)a.push(1);for(let e=0;e<n;e++)0===e?a[t]=1:(a.splice(t,0,1),a.pop());return a}function Ir(e,t,n){return n<=e?n:n-(t-1)}function Nr(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function Sr(e,t,n,s,a){const r=[...a],o=Nr(n,t);for(let a=0;a<r.length;a++)if(o.indexOf(a)>-1)r[a]=0;else{const o=Ir(t,n,a);let i=s[o];e&1<<o&&(i=0),r[a]=i}return r}function Cr(e,t,n,s,a){const o=[...a],i=Nr(n,t);for(let a=0;a<o.length;a++)if(i.indexOf(a)>-1)o[a]=Number.MAX_SAFE_INTEGER;else{const r=Ir(t,n,a);let i=s[r];e&1<<r&&(i=Number.MAX_SAFE_INTEGER),o[a]=i}for(let e=0;e<o.length;e++){const t=a[e];o[e]<0&&(o[e]+=t),o[e]=r(0,o[e],a[e])}return o}function $r(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function Tr(e,t,n,s,a,o){let i=t[a];const l=n[a]||1;(e&1<<a||o&1<<a||null==i)&&(i=l>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=s[a];return i<0&&(i+=u),i=r(0,i,u-1),i}function Er(e,t,n,s,a,o){let i=t[a];const l=n[a]||1;(e&1<<a||o&1<<a||null==i)&&(i=l>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=s[a];return i<0&&(i+=u),i=l>0?r(0,i,u):r(-1,i,u-1),i}function Rr(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let a=s+1;a<n.length;a++)if(t[a]>0||n[a]!==e[a])return!1;return!0}function Ar(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function _r(e,t,n){let s;const a=e.shape.length;let r;return s="number"==typeof t?[t,...new Array(a-1).fill(0)]:t.length<a?t.concat(new Array(a-t.length).fill(0)):t.slice(),s.forEach((e=>{l(-1!==e,(()=>"slice() does not support negative begin indexing."))})),r=null==n?new Array(a).fill(-1):"number"==typeof n?[n,...new Array(a-1).fill(-1)]:n.length<a?n.concat(new Array(a-n.length).fill(-1)):n,r=r.map(((t,n)=>t>=0?t:(l(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-s[n]))),[s,r]}function Fr(e,t,n,s,a,r,o,i,l){let u;if(null==s?(u=new Array(t.length),u.fill(1)):u=s,null!=o&&0!=(o&o-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:a,endMask:r,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};for(let e=0;e<h.dims;e++)c&&0!=(1<<e&i)&&h.numAddAxisAfterEllipsis++,1<<e&o&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const d={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<e.dims;s++)if(1<<s&e.ellipsisMask){const a=Math.min(t.dims-(e.dims-s)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<a;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=s}else if(1<<s&e.newAxisMask)t.finalShapeGatherIndices.push(br),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[s]),null!=e.end&&(t.end[n]=e.end[s]),t.strides[n]=e.strides[s],e.beginMask&1<<s&&(t.beginMask|=1<<n),e.endMask&1<<s&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(yr),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[n]=s,n++}}(h,d);let p=!0,f=!0,m=!0;const g=[],x=[];for(let t=0;t<e.length;++t){if(0===d.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(d.shrinkAxisMask&1<<t),s=e[t];if(-1===s){g.push(n?1:-1);continue}const a=[d.beginMask&1<<t,d.endMask&1<<t],r=[d.strides[t]>0?0:-1,d.strides[t]>0?s:s-1];if(n&&d.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===d.strides[t];const o=!!(d.beginMask&1<<t&&d.endMask&1<<t);if(d.beginValid&&d.endValid){if(n){const e=d.begin[t]<0?s+d.begin[t]:d.begin[t];if(d.begin[t]=e,d.end[t]=d.begin[t]+1,e<0||e>=s)throw Error(`slice index ${d.begin[t]} of dimension ${t} out of bounds.`)}else d.begin[t]=Or(d.begin[t],0,d.strides[t],s,a,r),d.end[t]=Or(d.end[t],1,d.strides[t],s,a,r);const e=1===d.strides[t]&&0===d.begin[t]&&d.end[t]===s;p=p&&e,f=f&&(0===t&&1===d.strides[t]||e)}else p=p&&1===d.strides[t]&&o,f=f&&(0===t&&1===d.strides[t]||o);let i,l=!1;if(d.beginValid&&d.endValid?(i=d.end[t]-d.begin[t],l=!0):n?(i=1,l=!0):o&&s>=0&&(i=d.strides[t]<0?-s:s,l=!0),l){let e;e=0===i||i<0!=d.strides[t]<0?0:Math.trunc(i/d.strides[t])+(i%d.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<d.finalShapeGatherIndices.length;++e){const t=d.finalShapeGatherIndices[e];t>=0?x.push(g[t]):t===br&&x.push(1)}return{finalShapeSparse:x.filter(((e,t)=>d.finalShapeGatherIndices[t]!==br)),finalShape:x,isIdentity:p,sliceDim0:f,isSimpleSlice:m,begin:d.begin,end:d.end,strides:d.strides}}function Or(e,t,n,s,a,r){if(a[t])return n>0?r[t]:r[t+1&1];{const t=e<0?s+e:e;return t<r[0]?r[0]:t>r[1]?r[1]:t}}var Dr=Object.freeze({__proto__:null,assertParamsValid:vr,maskToAxes:function(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t},computeOutShape:kr,stridesWithElidedDims:wr,getNormalizedAxes:function(e,t,n,s,a,r,o,i,l){const u=e.length;let c=new Array(u),h=new Array(u),d=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=Sr(o,l,u,s,e),h=Cr(i,l,u,a,e),d=wr(r,l,u,e)}else for(let t=0;t<u;t++)c[t]=Tr(o,s,r,e,t,l),h[t]=Er(i,a,r,e,t,l),d[t]=$r(r,t,l);return{begin:c,end:h,strides:d}},startIndicesWithElidedDims:Sr,stopIndicesWithElidedDims:Cr,stridesForAxis:$r,startForAxis:Tr,stopForAxis:Er,isSliceContinous:Rr,computeFlatOffset:Ar,parseSliceParams:_r,sliceInfo:Fr});const Mr=Ta({mul_:function(e,t){let n=$a(e,"a","mul"),s=$a(t,"b","mul");[n,s]=function(e,t){if(e.dtype===t.dtype)return[e,t];const n=ha(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}(n,s);const a={a:n,b:s};return ya.runKernel(Et,a)}});function Lr(e,t,n,s,a="NHWC",r){return zr(e,[...t,e[3]],n,r,s,null,null,qr(a))}function Br(e,t,n,s,a,r,o="channelsLast"){const[i,l]=Ur(t);let u;if("channelsLast"===o)u=[i,l,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);u=[i,l,e[1],e[1]]}return zr(e,u,n,s,a,r,!1,o)}function Pr(e,t,n,s,a,r,o="NDHWC"){const[i,l,u]=Gr(t);let c,h;if("NDHWC"===o)h="channelsLast",c=[i,l,u,e[4],e[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);h="channelsFirst",c=[i,l,u,e[1],e[1]]}return Wr(e,c,n,s,a,!1,h,r)}function zr(e,t,n,s,a,r,o=!1,i="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,h,u,c]=e}const[d,p,,f]=t,[m,g]=Ur(n),[x,b]=Ur(s),y=Hr(d,x),v=Hr(p,b),{padInfo:k,outHeight:w,outWidth:I}=function(e,t,n,s,a,r,o,i,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,s,a){null==s&&(s=Vr(e,t,n));const r=e[0],o=e[1],i=jr((r-t+2*s)/n+1,a),l=jr((o-t+2*s)/n+1,a);return[i,l]}([t,n],r,s,e,i);c=a[0],h=a[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/a);const e=Math.max(0,(c-1)*s+r-t),i=Math.max(0,(h-1)*a+o-n),l=Math.floor(e/2),d=e-l,p=Math.floor(i/2);u={top:l,bottom:d,left:p,right:i-p,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-r+1)/s),h=Math.ceil((n-o+1)/a);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const d="channelsLast"===l?e[1][0]:e[2][0],p="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:d,bottom:p,left:f,right:m,type:0===d&&0===p&&0===f&&0===m?"VALID":"EXPLICIT"},c=jr((t-r+d+p)/s+1,i),h=jr((n-o+f+m)/a+1,i)}}return{padInfo:u,outHeight:c,outWidth:h}}(a,u,c,m,g,y,v,r,i),N=o?f*h:f;let S;return"channelsFirst"===i?S=[l,N,w,I]:"channelsLast"===i&&(S=[l,w,I,N]),{batchSize:l,dataFormat:i,inHeight:u,inWidth:c,inChannels:h,outHeight:w,outWidth:I,outChannels:N,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:d,filterWidth:p,effectiveFilterHeight:y,effectiveFilterWidth:v,dilationHeight:x,dilationWidth:b,inShape:e,outShape:S,filterShape:t}}function Wr(e,t,n,s,a,r=!1,o="channelsLast",i){let[l,u,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h,d]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,d,u,c,h]=e}const[p,f,m,,g]=t,[x,b,y]=Gr(n),[v,k,w]=Gr(s),I=Hr(p,v),N=Hr(f,k),S=Hr(m,w),{padInfo:C,outDepth:$,outHeight:T,outWidth:E}=function(e,t,n,s,a,r,o,i,l,u,c){let h,d,p,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,a,r){null==a&&(a=Vr(e,t,s));const o=e[0],i=e[1],l=e[2],u=jr((o-t+2*a)/s+1,r),c=jr((i-t+2*a)/s+1,r),h=jr((l-t+2*a)/s+1,r);return[u,c,h,n]}([t,n,s,1],i,1,a,e,c);d=r[0],p=r[1],f=r[2]}else if("same"===e){d=Math.ceil(t/a),p=Math.ceil(n/r),f=Math.ceil(s/o);const e=(d-1)*a+i-t,c=(p-1)*r+l-n,m=(f-1)*o+u-s,g=Math.floor(e/2),x=e-g,b=Math.floor(c/2),y=c-b,v=Math.floor(m/2);h={top:b,bottom:y,left:v,right:m-v,front:g,back:x,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((t-i+1)/a),p=Math.ceil((n-l+1)/r),f=Math.ceil((s-u+1)/o)}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(a,u,c,h,x,b,y,I,N,S,i),R=r?g*d:g;let A;return"channelsFirst"===o?A=[l,R,$,T,E]:"channelsLast"===o&&(A=[l,$,T,E,R]),{batchSize:l,dataFormat:o,inDepth:u,inHeight:c,inWidth:h,inChannels:d,outDepth:$,outHeight:T,outWidth:E,outChannels:R,padInfo:C,strideDepth:x,strideHeight:b,strideWidth:y,filterDepth:p,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:N,effectiveFilterWidth:S,dilationDepth:v,dilationHeight:k,dilationWidth:w,inShape:e,outShape:A,filterShape:t}}function Vr(e,t,n,s=1){const a=Hr(t,s);return Math.floor((e[0]*(n-1)-n+a)/2)}function Ur(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Gr(e){return"number"==typeof e?[e,e,e]:e}function Hr(e,t){return t<=1?e:e+(e-1)*(t-1)}function jr(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Xr(e){const[t,n,s]=Ur(e);return 1===t&&1===n&&1===s}function Kr(e,t){return Xr(e)||Xr(t)}function qr(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}const Yr=Ta({reshape_:function(e,t){const n={x:$a(e,"x","reshape","string_or_numeric")},s={shape:t};return ya.runKernel(Xt,n,s)}});const Zr=Ta({sigmoid_:function(e){const t={x:$a(e,"x","sigmoid","float32")};return ya.runKernel(hn,t)}});const Jr=Ta({broadcastTo_:function(e,t){let n=$a(e,"broadcastTo","x");const s=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Yr(n,e)}const a=n.shape,r=Array.from(t);for(let e=t.length-1;e>=0;e--)if(a[e]===t[e])r[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);if(0===r.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return lr(n);const o={x:n},i={reps:r};return ya.runKernel(_n,o,i)}});const Qr=Ta({elu_:function(e){const t={x:$a(e,"x","elu","float32")};return ya.runKernel(ze,t)}});function eo(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function to(e,t,n){const s=e.length+t.length,a=[];let r=0,o=0;for(let i=0;i<s;i++)-1===n.indexOf(i)?a.push(e[r++]):a.push(t[o++]);return a}function no(e,t){const n=[],s=e.length;for(let a=0;a<s;a++)-1===t.indexOf(a)&&n.push(e[a]);return[n,t.map((t=>e[t]))]}function so(e,t){return to(e,t.map((e=>1)),t)}function ao(e,t,n){l(eo(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function ro(e,t){if(eo(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function oo(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function io(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}function lo(e,t){if((I(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&I(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return function(e,t,n,s){if(null==s&&(s=C(e)),"complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!I(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){D(t);const e=h(t),s=h(n);l(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let e=0;e<n.length;++e){const s=n[e],a=e!==n.length-1||s!==h(t.slice(e));l(n[e]===t[e]||!a,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return I(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?Ps(e,s):c(e,[],!0),ya.makeTensor(e,t,s)}(e,[],[],t)}const uo=Ta({sum_:function(e,t=null,n=!1){let s=$a(e,"x","sum");"bool"===s.dtype&&(s=ir(s,"int32"));const a={x:s},r={axis:t,keepDims:n};return ya.runKernel(fn,a,r)}});const co=Ta({leakyRelu_:function(e,t=.2){const n={x:$a(e,"x","leakyRelu")},s={alpha:t};return ya.runKernel(lt,n,s)}});function ho(e,t="float32"){if("complex64"===t){const t=ho(e,"float32"),n=ho(e,"float32");return Ea(t,n)}const n=F(h(e),t);return ya.makeTensor(n,e,t)}const po=Ta({prelu_:function(e,t){const n={x:$a(e,"x","prelu"),alpha:$a(t,"alpha","prelu")};return ya.runKernel(Pt,n)}});var fo="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function mo(e,t,n){return e(n={path:t,exports:{},require:function(e,t){return go(null==t&&n.path)}},n.exports),n.exports}function go(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}var xo=mo((function(e){!function(e,t,n){function s(e){var t=this,n=function(){var e=4022871197,t=function(t){t=String(t);for(var n=0;n<t.length;n++){var s=.02519603282416938*(e+=t.charCodeAt(n));s-=e=s>>>0,e=(s*=e)>>>0,e+=4294967296*(s-=e)}return 2.3283064365386963e-10*(e>>>0)};return t}();t.next=function(){var e=2091639*t.s0+2.3283064365386963e-10*t.c;return t.s0=t.s1,t.s1=t.s2,t.s2=e-(t.c=0|e)},t.c=1,t.s0=n(" "),t.s1=n(" "),t.s2=n(" "),t.s0-=n(e),t.s0<0&&(t.s0+=1),t.s1-=n(e),t.s1<0&&(t.s1+=1),t.s2-=n(e),t.s2<0&&(t.s2+=1),n=null}function a(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function r(e,t){var n=new s(e),r=t&&t.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,r&&("object"==typeof r&&a(r,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=r:n&&n.amd?n((function(){return r})):this.alea=r}(0,e,!1)})),bo=mo((function(e){!function(e,t,n){function s(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function r(e,t){var n=new s(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&a(r,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=r:n&&n.amd?n((function(){return r})):this.xor128=r}(0,e,!1)})),yo=mo((function(e){!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function r(e,t){var n=new s(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&a(r,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=r:n&&n.amd?n((function(){return r})):this.xorwow=r}(0,e,!1)})),vo=mo((function(e){!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.x,a=t.i;return e=s[a],n=(e^=e>>>7)^e<<24,n^=(e=s[a+1&7])^e>>>10,n^=(e=s[a+3&7])^e>>>3,n^=(e=s[a+4&7])^e<<7,e=s[a+7&7],n^=(e^=e<<13)^e<<9,s[a]=n,t.i=a+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function a(e,t){return t.x=e.x.slice(),t.i=e.i,t}function r(e,t){null==e&&(e=+new Date);var n=new s(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&(r.x&&a(r,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=r:n&&n.amd?n((function(){return r})):this.xorshift7=r}(0,e,!1)})),ko=mo((function(e){!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.w,a=t.X,r=t.i;return t.w=s=s+1640531527|0,n=a[r+34&127],e=a[r=r+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=a[r]=n^e,t.i=r,n+(s^s>>>16)|0},function(e,t){var n,s,a,r,o,i=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),a=0,r=-32;r<l;++r)t&&(s^=t.charCodeAt((r+32)%t.length)),0===r&&(o=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,r>=0&&(o=o+1640531527|0,a=0==(n=i[127&r]^=s+o)?a+1:0);for(a>=128&&(i[127&(t&&t.length||0)]=-1),a=127,r=512;r>0;--r)s=i[a+34&127],n=i[a=a+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,i[a]=s^n;e.w=o,e.X=i,e.i=a}(t,e)}function a(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function r(e,t){null==e&&(e=+new Date);var n=new s(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&(r.X&&a(r,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=r:n&&n.amd?n((function(){return r})):this.xor4096=r}(0,e,!1)})),wo=mo((function(e){!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,a=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^a,a=a-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^a,t.a=a-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function a(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function r(e,t){var n=new s(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&a(r,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=r:n&&n.amd?n((function(){return r})):this.tychei=r}(0,e,!1)})),Io=mo((function(t){!function(n,s,a){var r,o=256,i="random",l=a.pow(o,6),u=a.pow(2,52),c=2*u,h=o-1;function d(e,t,h){var d=[],b=g(m((t=1==t?{entropy:!0}:t||{}).entropy?[e,x(s)]:null==e?function(){try{var e;return r&&(e=r.randomBytes)?e=e(o):(e=new Uint8Array(o),(n.crypto||n.msCrypto).getRandomValues(e)),x(e)}catch(e){var t=n.navigator,a=t&&t.plugins;return[+new Date,n,a,n.screen,x(s)]}}():e,3),d),y=new p(d),v=function(){for(var e=y.g(6),t=l,n=0;e<u;)e=(e+n)*o,t*=o,n=y.g(1);for(;e>=c;)e/=2,t/=2,n>>>=1;return(e+n)/t};return v.int32=function(){return 0|y.g(4)},v.quick=function(){return y.g(4)/4294967296},v.double=v,g(x(y.S),s),(t.pass||h||function(e,t,n,s){return s&&(s.S&&f(s,y),e.state=function(){return f(y,{})}),n?(a[i]=e,t):e})(v,b,"global"in t?t.global:this==a,t.state)}function p(e){var t,n=e.length,s=this,a=0,r=s.i=s.j=0,i=s.S=[];for(n||(e=[n++]);a<o;)i[a]=a++;for(a=0;a<o;a++)i[a]=i[r=h&r+e[a%n]+(t=i[a])],i[r]=t;(s.g=function(e){for(var t,n=0,a=s.i,r=s.j,i=s.S;e--;)t=i[a=h&a+1],n=n*o+i[h&(i[a]=i[r=h&r+t])+(i[r]=t)];return s.i=a,s.j=r,n})(o)}function f(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function m(e,t){var n,s=[],a=typeof e;if(t&&"object"==a)for(n in e)try{s.push(m(e[n],t-1))}catch(e){}return s.length?s:"string"==a?e:e+"\0"}function g(e,t){for(var n,s=e+"",a=0;a<s.length;)t[h&a]=h&(n^=19*t[h&a])+s.charCodeAt(a++);return x(t)}function x(e){return String.fromCharCode.apply(0,e)}if(g(a.random(),s),t.exports){t.exports=d;try{r=e}catch(e){}}else a["seed"+i]=d}("undefined"!=typeof self?self:fo,[],Math)}));Io.alea=xo,Io.xor128=bo,Io.xorwow=yo,Io.xorshift7=vo,Io.xor4096=ko,Io.tychei=wo;var No=Io;const So=Ta({relu_:function(e){const t={x:$a(e,"x","relu")};return ya.runKernel(jt,t)}});const Co=Ta({relu6_:function(e){const t={x:$a(e,"x","relu6")};return ya.runKernel(Jt,t)}});const $o=Ta({step_:function(e,t=0){const n={x:$a(e,"x","step")},s={alpha:t};return ya.runKernel(zn,n,s)}});function To(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const s=or(e,"int32"),a=or([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const r=s.indexToLoc(n[t]),o=t*e.length;a.values.set(r,o)}return a.toTensor()}function Eo(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,a=e.length,r=0,o=!1;for(;s<a;){r=s+(a-s>>>1);const i=n(t,e[r]);i>0?s=r+1:(a=r,o=!i)}return o?s:-s-1}(e,t,n||Ro)}(e,t,n),a=s<0?-(s+1):s;e.splice(a,0,t)}function Ro(e,t){return e>t?1:e<t?-1:0}function Ao(e,t,n,s,a){return Oo(e,t,n,s,a,0)}function _o(e,t,n,s,a,r){return Oo(e,t,n,s,a,0,!1,r,!0)}function Fo(e,t,n,s,a,r){return Oo(e,t,n,s,a,r,!0)}function Oo(e,t,n,s,a,r,o=!1,i=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>a&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(Lo);const c=r>0?-.5/r:0,h=[],d=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:r,suppressBeginIndex:o}=t;if(n<a)break;let i=!1;for(let n=h.length-1;n>=o;--n){const o=Do(e,r,h[n]);if(o>=s){i=!0;break}if(t.score=t.score*Mo(s,c,o),t.score<=a)break}t.suppressBeginIndex=h.length,i||(t.score===n?(h.push(r),d.push(t.score)):t.score>a&&Eo(u,t,Lo))}const p=h.length,f=n-p;i&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const m={selectedIndices:h};return o&&(m.selectedScores=d),l&&(m.validOutputs=p),m}function Do(e,t,n){const s=e.subarray(4*t,4*t+4),a=e.subarray(4*n,4*n+4),r=Math.min(s[0],s[2]),o=Math.min(s[1],s[3]),i=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(a[0],a[2]),c=Math.min(a[1],a[3]),h=Math.max(a[0],a[2]),d=Math.max(a[1],a[3]),p=(i-r)*(l-o),f=(h-u)*(d-c);if(p<=0||f<=0)return 0;const m=Math.max(r,u),g=Math.max(o,c),x=Math.min(i,h),b=Math.min(l,d),y=Math.max(x-m,0)*Math.max(b-g,0);return y/(p+f-y)}function Mo(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function Lo(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const Bo="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function Po(e,t){const n=e[0].length;e.forEach(((e,t)=>{l(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),l(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,a)=>{for(let r=0;r<n;r++)l(r===t||e[r]===s[r],(()=>`Error in concat${n}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${a}.`))}))}function zo(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}var Wo;function Vo(e,t,n){let s=new Array;if(null==n&&null==t)return s;if(null==t)for(;s.length<e+n.length;)s.push(-1);else s=t.slice();if(null==n)return s;if(e+n.length!==s.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${s.length}`);for(let a=1;a<n.length;++a){const r=n[a],o=s[s.length-n.length+a],i=s[o];if(r>=0)if(i>=0){if(i!==r)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${a+e}] = ${r} but shape[${a+e}] = ${i}`)}else s[o]=r}return s}function Uo(e){const t={FIRST_DIM_SIZE:Wo.FIRST_DIM_SIZE,VALUE_ROWIDS:Wo.VALUE_ROWIDS,ROW_LENGTHS:Wo.ROW_LENGTHS,ROW_SPLITS:Wo.ROW_SPLITS,ROW_LIMITS:Wo.ROW_LIMITS,ROW_STARTS:Wo.ROW_STARTS},n=[];for(const s of e){if(!(s in t))break;n.push(t[s])}return n}function Go(e){return 0===e.length?0:e[0]===Wo.FIRST_DIM_SIZE?e.length-1:e.length}function Ho(e,t){if(null==e||null==t)return;const n=e.length,s=t.length;if(n>=s)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${s})`);for(let a=0;a<Math.min(n,s-1);++a){const n=e[a],s=t[a+1];if(n>=0&&s>=0&&1!==n&&n!==s)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${a-e.length}] = ${n} but ragged tensor input.flatValues.shape[${a-e.length}] = ${s}`)}}!function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(Wo||(Wo={}));const jo=30;function Xo(e){return e<=jo?e:T(e,Math.floor(Math.sqrt(e)))}function Ko(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function qo(e,t,n,s=!0){let a=[];if(s)a=a.concat(t.slice(0)),a.push(e[0]/n),a=a.concat(e.slice(1));else{a=a.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)a=a.concat([e[s+1]/t[s],t[s]]);a=a.concat(e.slice(n+1))}return a}function Yo(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],a=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?a.push(s):n.push(s);s.push(...n),s.push(0),s.push(...a)}return s}function Zo(e,t,n,s=!0){const a=[];s?a.push(e[0]/n):a.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?s?a.push(t[n-1]*e[n]):a.push(e[n]/t[n-1]):a.push(e[n]);return a}function Jo(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function Qo(e,t,n){const s=e.slice(0,1);for(let a=0;a<n;++a)s.push(e[a+1]-t[a][0]-t[a][1]);return s}const ei=1.7580993408473768,ti=1.0507009873554805,ni=.3275911,si=.254829592,ai=-.284496736,ri=1.421413741,oi=-1.453152027,ii=1.061405429;function li(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function ui(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function ci(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function hi(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function di(e,t){return{real:e[2*t],imag:e[2*t+1]}}function pi(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function fi(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){const r=(t?2:-2)*Math.PI*(a/e);n[a]=Math.cos(r),s[a]=Math.sin(r)}return{real:n,imag:s}}function mi(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}const gi="->",xi=/->/g,bi=",",yi="...";function vi(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(xi,"").length)/gi.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error(`Equation must contain exactly one arrow ("${gi}").`);const[s,a]=e.split(gi);l(-1===s.indexOf(yi),(()=>`The ellipsis notation ("${yi}") is not supported yet.`));const r=s.split(bi),o=r.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let e=0;e<a.length;++e){const t=a[e];if(!r.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===i.indexOf(t)&&i.push(t)}for(let e=0;e<s.length;++e){const t=s[e];-1===i.indexOf(t)&&t!==bi&&i.push(t)}const u=new Array(r.length);for(let e=0;e<o;++e){if(new Set(r[e].split("")).size!==r[e].length)throw new Error(`Found duplicate axes in input component ${r[e]}. Support for duplicate axes in input is not implemented yet.`);u[e]=[];for(let t=0;t<r[e].length;++t)u[e].push(i.indexOf(r[e][t]))}const c=i.length,h=[];for(let e=a.length;e<c;++e)h.push(e);return{allDims:i,summedDims:h,idDims:u}}function ki(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const s=[];for(let t=0;t<e;++t)-1===n[t]&&s.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:s}}function wi(e,t,n){const s=new Array(e);for(let e=0;e<n.length;++e){const a=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===s[t[e][n]]?s[t[e][n]]=a[n]:l(s[t[e][n]]===a[n],(()=>`Expected dimension ${s[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(a)}, but got dimension ${a[n]}`))}}function Ii(e,t){const n=e,s=[];let a=0;0===e.length&&n.push(-1),a=e.length+1;for(let e=0;e<a;++e)s.push([]);const r=[];for(let e=0;e<n.length;++e){const a=Si(t,n[e]);for(const t of a)-1===r.indexOf(t)&&(s[e].push(t),r.push(t))}return{path:n,steps:s}}function Ni(e){return e.every(((e,t)=>e===t))}function Si(e,t){const n=[];for(let s=0;s<e.length;++s)0!==e[s].length&&-1===e[s].indexOf(t)&&-1!==t||n.push(s);return n}function Ci(e,t,n=0){let s=[];if("number"==typeof t)l(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{const a=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);l(a<=1,(()=>"There should be only one negative value in split array."));const r=t.indexOf(-1);if(-1!==r){const s=t.reduce(((e,t)=>t>0?e+t:e));t[r]=e.shape[n]-s}l(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}function $i(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function Ti(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function Ei(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function Ri(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function Ai(e,t){return`size ${e} must be non-negative, not ${t}`}function _i(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function Fi(e,t){return`Input to reshape is a SparseTensor with ${h(e)}\n  dense values, but the requested shape requires a multiple of ${h(t)}. inputShape=${e} outputShape= ${t}`}function Oi(e,t){return`Input to reshape is a tensor with ${h(e)} dense values, but the requested shape has ${h(t)}. inputShape=${e} outputShape=${t}`}function Di(){return"segment ids must be >= 0"}function Mi(){return"segment ids are not increasing"}function Li(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function Bi(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function Pi(e,t){let n,s=!1;for(e<=jo?(n=e,s=!0):n=T(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=T(e,n+1);return n}function zi(e,t,n){const s=[],a=e.length;for(let r=0;r<a;r++)r!==t?s.push(e[r]):s.push(n);return s}function Wi(e,t,n,s){const a=t.shape.length,r=e.shape.length;if(0!==s&&(s<-a||s>a))throw new Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${s}`);if(s<0&&(s+=a),s>r)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${r}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let l=1,u=1,c=1;for(let t=0;t<s;++t)i.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<n;t++)i.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<a;e++)i.push(t.shape[e]);for(let t=n+1;t<r;t++)i.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:o,outputShape:i}}var Vi=Object.freeze({__proto__:null,segOpComputeOptimalWindowSize:Pi,computeOutShape:zi,collectGatherOpShapeInfo:Wi});function Ui(e){try{return e.map((e=>Vs(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Gi(e){return e.map((e=>Ws(e)))}var Hi=Object.freeze({__proto__:null,slice_util:Dr,segment_util:Vi,fromUint8ToStringArray:Ui,fromStringArrayToUint8:Gi,upcastType:ha,axesAreInnerMostDims:eo,combineLocations:to,computeOutAndReduceShapes:no,expandShapeToKeepDim:so,assertAxesAreInnerMostDims:ao,getAxesPermutation:ro,getUndoAxesPermutation:oo,getInnerMostAxes:io,getBroadcastDims:dr,getReductionAxes:pr,assertAndGetBroadcastShape:fr,assertParamsConsistent:Po,computeOutShape:zo,computeDilation2DInfo:Lr,computePool2DInfo:Br,computePool3DInfo:Pr,computeConv2DInfo:zr,computeConv3DInfo:Wr,computeDefaultPad:Vr,tupleValuesAreOne:Xr,eitherStridesOrDilationsAreOne:Kr,convertConv2DDataFormat:qr,checkPadOnDimRoundingMode:function(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)l(p(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{l(p(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}},getFusedDyActivation:function(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Mr(e,$o(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)},getFusedBiasGradient:function(e,t){let n=t;const s=pr(e.shape,t.shape);return s.length>0&&(n=uo(n,s)),Yr(n,e.shape)},applyActivation:function(e,t,n,s){if("linear"===t)return e;if("relu"===t)return So(e);if("elu"===t)return Qr(e);if("relu6"===t)return Co(e);if("prelu"===t)return po(e,n);if("leakyrelu"===t)return co(e,s);if("sigmoid"===t)return Zr(e);throw new Error(`Unknown fused activation ${t}.`)},shouldFuse:(e,t)=>!(e>0)||"linear"===t,get RowPartitionType(){return Wo},combineRaggedTensorToTensorShapes:Vo,getRowPartitionTypesHelper:Uo,getRaggedRank:Go,validateDefaultValueShape:Ho,PARALLELIZE_THRESHOLD:jo,computeOptimalWindowSize:Xo,getImageCenter:Ko,getReshaped:qo,getPermuted:Yo,getReshapedPermuted:Zo,getSliceBeginCoords:Jo,getSliceSize:Qo,prepareAndValidate:mr,validateUpdateShape:gr,validateInput:function(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}gr(n,t,e)},calculateShapes:xr,SELU_SCALEALPHA:ei,SELU_SCALE:ti,ERF_P:ni,ERF_A1:si,ERF_A2:ai,ERF_A3:ri,ERF_A4:oi,ERF_A5:ii,warn:Hn,log:function(...e){V().getBool("IS_TEST")||V().getBool("PROD")||console.log(...e)},mergeRealAndImagArrays:li,splitRealAndImagArrays:ui,complexWithEvenIndex:ci,complexWithOddIndex:hi,getComplexWithIndex:di,assignToTypedArray:pi,exponents:fi,exponent:mi,decodeEinsumEquation:vi,getEinsumPermutation:ki,checkEinsumDimSizes:wi,getEinsumComputePath:Ii,isIdentityPermutation:Ni,prepareSplitSize:Ci,getSparseFillEmptyRowsIndicesDenseShapeMismatch:$i,getSparseFillEmptyRowsNegativeIndexErrorMessage:Ti,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:Ei,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:Ri,getSparseReshapeNegativeOutputDimErrorMessage:Ai,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:_i,getSparseReshapeInputOutputMultipleErrorMessage:Fi,getSparseReshapeInputOutputMismatchErrorMessage:Oi,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:Di,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:Mi,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:Li,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:Bi});function ji(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&l("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}const Xi=To;class Ki extends s{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new n(this,ur())}nextDataId(){return Ki.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,V().get("IS_NODE")&&Hn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&S(n[0])){const a=n.map((e=>Ws(e)));s=this.write(a,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,s,a){this.data.set(e,{values:t,dtype:s,refCount:a})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){return li(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>Vs(e)));return or(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return or(e.shape,e.dtype,t)}makeOutput(e,t,n){return ur().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=zs();e();return{kernelMs:zs()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){ji([e],"where");const t=this.readSync(e.dataId);return Xi(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function qi(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}Ki.nextDataId=0;const Yi={kernelName:"Abs",backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;ji(t,"abs");let s=new Float32Array(h(t.shape));return s=qi(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,t.dtype)}};function Zi(e){return(t,n,s,a,r)=>{const o=fr(t,n),i=o.length,l=E(o),u=v(r,h(o)),c=t.length,d=n.length,p=E(t),f=E(n),m=dr(t,o),g=dr(n,o);if(m.length+g.length===0)for(let t=0;t<u.length;++t)u[t]=e(s[t%s.length],a[t%a.length]);else for(let t=0;t<u.length;++t){const n=L(t,i,l),r=n.slice(-c);m.forEach((e=>r[e]=0));const o=M(r,c,p),h=n.slice(-d);g.forEach((e=>h[e]=0));const x=M(h,d,f);u[t]=e(s[o],a[x])}return[u,o]}}function Ji(e){const{inputs:t,backend:n}=e,{real:s,imag:a}=t,r=n.data.get(s.dataId).values,o=n.data.get(a.dataId).values,i=n.makeTensorInfo(s.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",r),imag:n.makeTensorInfo(a.shape,"float32",o)},i}const Qi={kernelName:me,backendName:"cpu",kernelFunc:Ji};function el(e,t,n="float32"){if("complex64"===n){return Ji({inputs:{real:el(e,t,"float32"),imag:el(e,t,"float32")},backend:e})}const s=F(h(t),n);return e.makeTensorInfo(t,n,s)}function tl(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const nl={kernelName:nt,backendName:"cpu",kernelFunc:tl};function sl(e){const{inputs:t,backend:n}=e,{input:s}=t,a=n.data.get(s.dataId).complexTensorInfos.real,r=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,r)}const al={kernelName:Gt,backendName:"cpu",kernelFunc:sl};function rl(e,t,n,s){if("int32"===s){return[t,"int32",Int32Array.from(e)]}if("bool"===s){const s=Ps([0],n),[a,r]=Zi(((e,t)=>e!==t?1:0))(t,[],e,s,"bool");return[r,"bool",a]}throw new Error(`Error in Cast: failed to cast ${n} to ${s}`)}function ol(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dtype:r}=s;if("complex64"===r){if("complex64"===a.dtype)return tl({inputs:{x:a},backend:n});const e=el(n,a.shape,a.dtype),t=ol({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),s=Ji({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===a.dtype){const e=sl({inputs:{input:a},backend:n}),t=ol({inputs:{x:e},backend:n,attrs:{dtype:r}});return n.disposeIntermediateTensorInfo(e),t}if(!w(a.dtype,r)){const e=tl({inputs:{x:a},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:r}}const o=n.data.get(a.dataId).values,[i,l,u]=rl(o,a.shape,a.dtype,r);return n.makeTensorInfo(i,l,u)}const il={kernelName:de,backendName:"cpu",kernelFunc:ol};function ll(e,t,n,s){return null==n?({inputs:n,backend:a})=>{const{a:r,b:o}=n,i=a;ji([r,o],e);const l=i.data.get(r.dataId).values,u=i.data.get(o.dataId).values,c="string"===r.dtype?Ui(l):l,h="string"===r.dtype?Ui(u):u,d=s||r.dtype,[p,f]=t(r.shape,o.shape,c,h,d);return i.makeTensorInfo(f,d,p)}:({inputs:e,backend:a})=>{const{a:r,b:o}=e,i=a;if("complex64"===r.dtype||"complex64"===o.dtype){const e=ol({inputs:{x:r},backend:i,attrs:{dtype:"complex64"}}),t=i.data.get(e.dataId),s=t.complexTensorInfos.real,a=t.complexTensorInfos.imag,l=i.data.get(s.dataId).values,u=i.data.get(a.dataId).values,c=ol({inputs:{x:o},backend:i,attrs:{dtype:"complex64"}}),h=i.data.get(c.dataId),d=h.complexTensorInfos.real,p=h.complexTensorInfos.imag,f=i.data.get(d.dataId).values,m=i.data.get(p.dataId).values,[g,x,b]=n(r.shape,o.shape,l,u,f,m),y=i.makeTensorInfo(b,"float32",g),v=i.makeTensorInfo(b,"float32",x),k=Ji({inputs:{real:y,imag:v},backend:i});return i.disposeIntermediateTensorInfo(e),i.disposeIntermediateTensorInfo(c),i.disposeIntermediateTensorInfo(y),i.disposeIntermediateTensorInfo(v),k}{const e=i.data.get(r.dataId).values,n=i.data.get(o.dataId).values,a=s||r.dtype,[l,u]=t(r.shape,o.shape,e,n,a);return i.makeTensorInfo(u,a,l)}}}function ul(e){return(t,n,s,a,r,o)=>{const i=fr(t,n),l=h(i),u=i.length,c=E(i),d=v("float32",l),p=v("float32",l),f=dr(t,i),m=dr(n,i),g=li(s,a),x=li(r,o),b=t.length,y=E(t),k=n.length,w=E(n);if(f.length+m.length===0)for(let t=0;t<d.length;t++){const n=t%g.length,s=t%x.length,a=e(g[2*n],g[2*n+1],x[2*s],x[2*s+1]);d[t]=a.real,p[t]=a.imag}else for(let t=0;t<d.length;t++){const n=L(t,u,c),s=n.slice(-b);f.forEach((e=>s[e]=0));const a=M(s,b,y),r=n.slice(-k);m.forEach((e=>r[e]=0));const o=M(r,k,w),i=e(g[2*a],g[2*a+1],x[2*o],x[2*o+1]);d[t]=i.real,p[t]=i.imag}return[d,p,i]}}const cl=Zi(((e,t)=>e+t)),hl=ul(((e,t,n,s)=>({real:e+n,imag:t+s}))),dl=ll(q,cl,hl),pl={kernelName:q,backendName:"cpu",kernelFunc:dl};function fl(e,t,n,s,a){const r=h(s),o=F(a,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=a||(o[s]+=r>0?t[n]:1)}return o}function ml(e,t,n,s=!1){const a=e.shape[0],r=e.shape[1],o=or([a,n],t.dtype);for(let i=0;i<a;i++)for(let a=0;a<r;a++){const r=e.get(i,a);if(r<0)throw new Error("Input x must be non-negative!");r>=n||(s?o.set(1,i,r):t.size>0?o.set(o.get(i,r)+t.get(i,a),i,r):o.set(o.get(i,r)+1,i,r))}return o}function gl(e){return(t,n,s)=>{const a=v(n,t.length);for(let n=0;n<t.length;++n)a[n]=e(t[n],s);return a}}function xl(e,t,n){return({inputs:s,attrs:a,backend:r})=>{const{x:o}=s;if(ji(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=r,l=i.data.get(o.dataId).values,u=h(o.shape),c=n||o.dtype,d=k(c,u);for(let e=0;e<u;++e)d[e]=t(l[e],a);return i.makeTensorInfo(o.shape,c,d)}}function bl(e,t,n){return({inputs:s,attrs:a,backend:r})=>{const{x:o}=s;if(ji(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=r,l=i.data.get(o.dataId).values,u=n||o.dtype,c=t(l,u,a);return i.makeTensorInfo(o.shape,u,c)}}const yl=gl((e=>Math.ceil(e))),vl={kernelName:pe,backendName:"cpu",kernelFunc:bl(pe,yl)};function kl(e,t,n,s){const a=k(n,h(t));if(s&&"string"!==n){let t=0;e.forEach((e=>{const n=h(e.shape);a.set(e.vals,t),t+=n}))}else{let s=0;e.forEach((e=>{const r="string"===n?Ui(e.vals):e.vals;let o=0;for(let n=0;n<e.shape[0];++n){const i=n*t[1]+s;for(let t=0;t<e.shape[1];++t)a[i+t]=r[o++]}s+=e.shape[1]}))}return a}const wl=Zi(((e,t)=>e===t?1:0)),Il=ll(Ue,wl,null,"bool"),Nl={kernelName:Ue,backendName:"cpu",kernelFunc:Il},Sl=gl((e=>Math.exp(e))),Cl=bl(Ge,Sl,"float32"),$l={kernelName:Ge,backendName:"cpu",kernelFunc:Cl},Tl=gl((e=>Math.expm1(e))),El={kernelName:je,backendName:"cpu",kernelFunc:bl(je,Tl)},Rl=gl((e=>Math.floor(e))),Al={kernelName:qe,backendName:"cpu",kernelFunc:bl(qe,Rl)};function _l(e,t,n,s,a,r,o,i,l){const u=or([s,r],n);for(let n=0;n<s;n++){const s=[];let c=0;for(let t=0;t<a;t++){const r=e[n*a+t];c+=r*o[t],s.push(r)}if(c<0||c>=l/r)throw new Error(`Invalid indices: ${s} does not index into ${i}`);for(let e=0;e<r;e++)u.values[n*r+e]=t.get(...t.indexToLoc(c*r+e))}return u}function Fl(e,t,n){const s=or(n,e.dtype);for(let n=0;n<s.size;++n){const a=s.indexToLoc(n).slice(),r=a[0],o=a[2],i=t.locToIndex([r,o]);a[2]=t.values[i];const l=e.locToIndex(a);0<=l&&l<e.values.length&&(s.values[n]=e.values[l])}return s}const Ol=Zi(((e,t)=>e>t?1:0)),Dl={kernelName:et,backendName:"cpu",kernelFunc:ll(et,Ol,null,"bool")},Ml=Zi(((e,t)=>e>=t?1:0)),Ll={kernelName:tt,backendName:"cpu",kernelFunc:ll(tt,Ml,null,"bool")},Bl=Zi(((e,t)=>e<t?1:0)),Pl={kernelName:ut,backendName:"cpu",kernelFunc:ll(ut,Bl,null,"bool")},zl=Zi(((e,t)=>e<=t?1:0)),Wl={kernelName:ct,backendName:"cpu",kernelFunc:ll(ct,zl,null,"bool")};function Vl(e,t,n){const s=(t-e)/(n-1),a=F(n,"float32");a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+s;return a}const Ul=gl((e=>Math.log(e))),Gl={kernelName:dt,backendName:"cpu",kernelFunc:bl(dt,Ul)};function Hl(e,t,n,s){const a=v(s,h(n));for(let n=0;n<a.length;++n){const s=n*t;let r=e[s];for(let n=0;n<t;++n){const t=e[s+n];(Number.isNaN(t)||t>r)&&(r=t)}a[n]=r}return a}const jl=Zi(((e,t)=>Math.max(e,t))),Xl={kernelName:bt,backendName:"cpu",kernelFunc:ll(bt,jl)},Kl=Zi(((e,t)=>Math.min(e,t))),ql={kernelName:St,backendName:"cpu",kernelFunc:ll(St,Kl)},Yl=Zi(((e,t)=>e*t)),Zl=ul(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),Jl=ll(Et,Yl,Zl),Ql={kernelName:Et,backendName:"cpu",kernelFunc:Jl};function eu(e,t,n){const s=Bs(-1,n);return Yl([],t,s,e,n)}const tu={kernelName:"Neg",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;ji(s,"neg");const a=n.data.get(s.dataId).values,[r,o]=eu(a,s.shape,s.dtype);return n.makeTensorInfo(o,s.dtype,r)}},nu=Zi(((e,t)=>e!==t?1:0)),su={kernelName:Rt,backendName:"cpu",kernelFunc:ll(Rt,nu,null,"bool")};function au(e,t,n,s,a){const r=t.length,o=h(t),i=E(t),l=E(a),u=v(n,h(a));for(let t=0;t<o;++t){const n=L(t,r,i),a=new Array(n.length);for(let e=0;e<a.length;e++)a[e]=n[s[e]];u[M(a,r,l)]=e[t]}return u}function ru(e){const{inputs:t,attrs:n,backend:s}=e,{x:a}=t,{perm:r}=n;ji(a,"transpose");const o=a.shape.length,i=new Array(o);for(let e=0;e<i.length;e++)i[e]=a.shape[r[e]];const l=au(s.data.get(a.dataId).values,a.shape,a.dtype,r,i);return{dataId:s.write(l,i,a.dtype),shape:i,dtype:a.dtype}}const ou={kernelName:Dn,backendName:"cpu",kernelFunc:ru};function iu(e,t,n,s){const[a,r]=no(e,s),o=ha(t,"int32"),i=F(h(a),o),l=h(r);for(let e=0;e<i.length;++e){const t=e*l;let s=1;for(let e=0;e<l;++e)s*=n[t+e];i[e]=s}return{outVals:i,outShape:a,outDtype:o}}const lu={kernelName:zt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s;ji(a,"prod");const i=a.shape.length,l=b(r,a.shape),u=ro(l,i);let c=l,h=a;const d=[];null!=u&&(h=ru({inputs:{x:a},backend:n,attrs:{perm:u}}),d.push(h),c=io(c.length,i));const p=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=iu(h.shape,h.dtype,p,c);let x=m;return o&&(x=so(m,l)),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(x,g,f)}};function uu(e,t,n,s){const a=[];let r=0;const o=t.length-1+n.length,i=new Array(o).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const s=e[n],a=n===e.length-1?t:e[n+1].length;if(0===s.length)throw new Error("Ragged splits may not be empty");if(s[0]<0)throw new Error("Ragged splits must be non-negative");if(s[s.length-1]>a)throw new Error("Ragged splits must not point past values");for(let e=1;e<s.length;++e)if(s[e-1]>s[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,s);let l=1;for(let e=0;e<t.length-1;++e){l*=t[e];const n=t[e+1];for(let t=1;t<l+1;++t)i[e].push(t*n)}for(let s=0;s<e.length;++s){let o=e[s],l=e[s]+1;for(let e=0;e<n.length;++e){const s=n[e],a=e+t.length-1;if(a>=0){const e=i[a],t=e[e.length-1]-s[o];for(let e=o;e<l;++e)i[a].push(s[e+1]+t)}o=s[o],l=s[l]}l!==o&&(a.push([o,l]),r+=l-o)}return{outSplits:i,valueSlices:a,numValues:r}}function cu(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let s=t;s<e.length;s++)n[t-1]*=e[s];return n}function hu(e,t,n,s,a){const r=t.slice();r[0]=a;const o=k(n,h(r)),i=e.length;return function(e,t,n,s,a,r){const o=cu(t,2)[1],i=cu(r,2)[1];let l=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<s;++t)a[l*i+t]=e[n*o+t];++l}}(e,t,s,0===i?0:i/t[0],o,r),[o,r]}function du(e,t,n,s,a,r,o,i){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach(((e,s)=>{if(e<0||e>=n){const a=L(s,t.length,E(t)).join(",");throw new Error(`indices[${a}] = ${e} is not in [0, ${n})`)}}))}(r,o,t[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const l=s[0],{outSplits:u,valueSlices:c,numValues:h}=uu(r,o,e,l),d=function(e){const t=[];for(let n=0;n<e.length;++n){const s=k("int32",e[n].length);t.push(s),e[n].forEach(((e,t)=>s[t]=e))}return t}(u),p=hu(n,s,a,c,h);return[d,p[0],p[1]]}var pu=Wo;class fu{constructor(e,t,n,s,a,r,o,i,l,u){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=s,this.valuesDType=a,this.defaultValue=r,this.defaultValueShape=o,this.rowPartitionValues=i,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=Uo(u),this.raggedRank=Go(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===pu.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===pu.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case pu.VALUE_ROWIDS:return fu.getMaxWidthValueRowID(t);case pu.ROW_SPLITS:return fu.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${pu[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let s=0;s<t-1;++s){const t=e[s+1]-e[s];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,s=e[0],a=0;for(let r=1;r<t;++r){const t=e[r];t!==s&&(s=t,a=Math.max(r-n,a),n=r)}return Math.max(t-n,a)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return gu(e,n)}calculateOutputSize(e){const t=this.valuesShape;Ho(this.defaultValueShape,t);const n=this.tensorShapeFromTensor(this.shape,this.shapeShape),s=Vo(this.raggedRank,n,t);s[0]<0&&(s[0]=e);for(let e=1;e<=this.raggedRank;++e)s[e]<0&&(s[e]=this.getMaxWidth(e));return s}calculateFirstParentOutputIndex(e,t,n){const s=Math.min(e,n),a=[];let r=0;for(let e=0;e<s;++e,r+=t)a.push(r);for(let t=s;t<e;++t)a.push(-1);return l(a.length===e,(()=>"Final length of result must be equal to firstDimension.")),a}calculateOutputIndexRowSplit(e,t,n,s){const a=e.length,r=[];for(let o=0;o<a-1;++o){const a=e[o+1]-e[o];let i=Math.min(s,a),l=t[o];-1===l&&(i=0);for(let e=0;e<i;++e)r.push(l),l+=n;for(let e=0;e<a-i;++e)r.push(-1)}if(a>0&&r.length!==e[a-1])throw new Error("Invalid row split size.");return r}calculateOutputIndexValueRowID(e,t,n,s){const a=e.length,r=[];if(0===a)return[];let o=0,i=e[0];if(i>=t.length)throw new Error(`Got currentValueRowId=${i}, which is not less than ${t.length}`);let l=t[i];r.push(l);for(let u=1;u<a;++u){const a=e[u];if(a===i)l>=0&&(++o,o<s?l+=n:l=-1);else{if(o=0,i=a,a>=t.length)throw new Error(`Got nextValueRowId=${a} which is not less than ${t.length}`);l=t[a]}r.push(l)}if(r.length!==e.length)throw new Error("Invalid row ids.");return r}calculateOutputIndex(e,t,n,s){const a=this.getRowPartitionTensor(e),r=this.getRowPartitionTypeByDimension(e);switch(r){case pu.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(a,t,n,s);case pu.ROW_SPLITS:if(a.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${a.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(a,t,n,s);default:throw new Error(`Unsupported partition type: ${pu[r]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case pu.FIRST_DIM_SIZE:return e[0];case pu.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case pu.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${pu[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];const s=gu(t,!1),a=k(this.valuesDType,h(s));if(n[0]*t[0]>0){let r=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e){r=this.calculateOutputIndex(e-1,r,n[e],t[e])}this.setOutput(this.raggedRank,r,a,s)}return[s,a]}setOutput(e,t,n,s){if(0===n.length)return;const a=this.values,r=n;let o=s.slice();o=o.slice(e+1);const i=h(o),l=t.length;let u=this.defaultValue;if(u.length!==i&&1!==u.length){const e=this.defaultValueShape;cr((()=>{const t=Yr(u,e),n=Jr(t,o);u=n.dataSync()}))}let c=0,d=0,p=0;for(let e=0;e<=l;++e){let s=e<l?t[e]:-1;if(s!==p){if(d<p){const e=a.subarray(c*i);mu(r.subarray(d*i),e,(p-d)*i)}if(e>=l){const e=n.length;s=Math.floor(e/i)}if(s>p)if(1===this.defaultValue.length)r.subarray(p*i,s*i).fill(this.defaultValue[0]),p=s;else for(;s>p;){mu(r.slice(p*i),u,i),++p}s<0?(c=e+1,d=p):(c=e,d=p,p=d+1)}else++p}}}function mu(e,t,n){for(let s=0;s<n;s++)e[s]=t[s]}function gu(e,t){const n=[];for(let s of e){if(s<0){if(!t)throw new Error(`Dimension ${s} must be >= 0`);if(s<-1)throw new Error(`Dimension ${s} must be >= -1`);s=-1}n.push(s)}return n}function xu(e,t,n,s,a,r,o,i,l,u){return new fu(e,t,n,s,a,r,o,i,l,u).compute()}function bu(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return F(0,s);const a=F(Math.abs(Math.ceil((t-e)/n)),s);t<e&&1===n&&(n=-1),a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+n;return a}const yu=gl((e=>1/Math.sqrt(e))),vu={kernelName:tn,backendName:"cpu",kernelFunc:bl(tn,yu)};function ku(e,t,n,s,a,r,o,i,l,u){const c=[s/a,a],h=e.values,d=t.values;if(0===s)return or(n,t.dtype);const p=or(c,t.dtype);"string"==typeof l||"number"==typeof l?p.values.fill(l):"boolean"==typeof l&&p.values.fill(+l);for(let e=0;e<r;e++){const r=[];let l=0;for(let t=0;t<o;t++){const n=h[e*o+t];r.push(n),l+=n*i[t]}if(l<0||l>=s/a)throw new Error(`Invalid indices: ${r} does not index into ${n}`);for(let n=0;n<a;n++)u?p.values[l*a+n]+=d[e*a+n]:p.values[l*a+n]=0===t.rank?d[0]:d[e*a+n]}return p}const wu=gl((e=>1/(1+Math.exp(-e)))),Iu=xl(hn,(e=>1/(1+Math.exp(-e)))),Nu={kernelName:hn,backendName:"cpu",kernelFunc:Iu};function Su(e,t,n,s,a){const r=Rr(s,t,n),o=h(n),i=E(s);if(r){const n=Ar(t,i);return"string"===a?e.slice(n,n+o):e.subarray(n,n+o)}const l=or(s,a,"string"===a?Ui(e):e),u=or(n,a);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),s=n.map(((e,n)=>e+t[n]));u.set(l.get(...s),...n)}return"string"===a?Gi(u.values):u.values}function Cu(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:r,size:o}=s;ji(a,"slice");const[i,l]=_r(a,r,o);vr(a,i,l);const u=Su(n.data.get(a.dataId).values,i,l,a.shape,a.dtype);return n.makeTensorInfo(l,a.dtype,u)}const $u={kernelName:on,backendName:"cpu",kernelFunc:Cu};function Tu(e,t,n,s,a,r,o){const i=t[0],l=r[0],u=new Array(l),c=new Array(i),h=t[1];if(0===l){if(0!==i)throw new Error($i(i));return[k(n,0),[0,h],k(a,0),u,c]}let d=!0,p=0;const f=new Array(l).fill(0);for(let t=0;t<i;++t){const n=e[t*h];if(n<0)throw new Error(Ti(t,n));if(n>=l)throw new Error(Ei(t,n,l));++f[n],d=d&&n>=p,p=n}let m=!0;for(let e=0;e<l;++e){const t=0===f[e];u[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&d){const t=e,n=s;for(let e=0;e<i;++e)c[e]=e;return[t,[i,h],n,u,c]}{const t=f[l-1],r=k(n,t*h),d=k(a,t),p=new Array(l).fill(0);for(let t=0;t<i;++t){const n=e[t*h],a=p[n],o=(0===n?0:f[n-1])+a;p[n]++;for(let n=0;n<h;++n)r[o*h+n]=e[t*h+n];d[o]=s[t],c[t]=o}for(let e=0;e<l;++e){if(0===p[e]){const t=0===e?0:f[e-1];r[t*h+0]=e;for(let e=1;e<h;++e)r[t*h+e]=0;d[t]=o}}return[r,[t,h],d,u,c]}}function Eu(e,t,n,s,a){const r=h(s),o=t[0],i=a.length,l=[];let u=1,c=-1;for(let e=0;e<i;++e){const t=a[e];if(-1===t){if(-1!==c)throw new Error(Ri(c,e));c=e,l.push(1)}else{if(t<0)throw new Error(Ai(e,t));u*=t,l.push(t)}}if(-1!==c){if(u<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(r/u);if(u*e!==r)throw new Error(Fi(s,l));l[c]=e}if(h(l)!==r)throw new Error(Oi(s,l));const d=s.length,p=[];if(d>0){p[d-1]=1;for(let e=d-2;e>=0;--e)p[e]=p[e+1]*s[e+1]}const f=[];if(i>0){f[i-1]=1;for(let e=i-2;e>=0;--e)f[e]=f[e+1]*l[e+1]}const m=k(n,o*i);for(let t=0;t<o;++t){let n=0;for(let s=0;s<d;++s)n+=e[t*d+s]*p[s];for(let e=0;e<i;++e)m[t*i+e]=Math.trunc(n/f[e]),n%=f[e]}return[m,[o,i],l]}function Ru(e,t,n,s,a,r=!1,o=0){const i=s.length,l=[t[0],e.length/t[0]],u=l[1],c=i>0?a[i-1]+1:0;if(c<0)throw new Error("segment ids must be >= 0");const h=t.slice();h[0]=c;const d=k(n,h.reduce(((e,t)=>e*t),1));if(0===i)return c>0&&d.fill(o),[d,h];if(c<=0)throw new Error("segment ids must be >= 0");let p=0,f=1,m=0,g=a[p];for(;;){let t=0;if(f<i){if(t=a[f],g===t){++f;continue}if(g>=t)throw new Error("segment ids are not increasing")}if(g<0||g>=c)throw new Error(Li(g,c));g>m&&d.fill(o,m*u,g*u);for(let t=p;t<f;++t){const n=s[t];if(n<0||n>=l[0])throw new Error(Bi(t,s[t],l[0]));for(let t=0;t<u;t++)d[g*u+t]+=e[n*u+t]}if(r)for(let e=0;e<u;e++)d[g*u+e]/=f-p;if(p=f,++f,m=g+1,g=t,f>i)break}return m<c&&d.fill(o,m*u,c*u),[d,h]}const Au=gl((e=>Math.sqrt(e))),_u={kernelName:pn,backendName:"cpu",kernelFunc:xl(pn,(e=>Math.sqrt(e)))},Fu=Zi(((e,t)=>{const n=e-t;return n*n})),Ou={kernelName:In,backendName:"cpu",kernelFunc:ll(In,Fu)};function Du(e,t,n,s){const a=or(e,t.dtype);for(let e=0;e<a.size;e++){const r=a.indexToLoc(e),o=new Array(r.length);for(let e=0;e<o.length;e++)o[e]=r[e]*n[e]+s[e];a.set(t.get(...o),...r)}return a}class Mu{constructor(e,t,n,s,a,r){this.separator=Ws(e),this.nGramWidths=t,this.leftPad=Ws(n),this.rightPad=Ws(s),this.padWidth=a,this.preserveShort=r}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,s,a,r){for(let o=0;o<a;++o){const i=this.getPadWidth(r),l=Math.max(0,i-o),u=Math.max(0,i-(a-(o+1))),c=r-(l+u),h=t+(l>0?0:o-i);let d=0;d+=l*this.leftPad.length;for(let t=0;t<c;++t)d+=e[h+t].length;d+=u*this.rightPad.length;d+=(l+u+c-1)*this.separator.length,n[s+o]=new Uint8Array(d);const p=n[s+o];let f=0;const m=e=>e.forEach((e=>p[f++]=e));for(let e=0;e<l;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[h+t]),m(this.separator);if(c>0){m(e[h+c-1]);for(let e=0;e<u;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<u-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,s=t.length;if(s>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let a=1;a<s;++a){let s=t[a]>=e;if(s=s&&t[a]<=n,!s)throw new Error(`Invalid split value ${t[a]}, must be in [${e}, ${n}]`);e=t[a]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const a=s-1,r=k("int32",s);if(0===n||0===s){const e=new Array(n);for(let e=0;e<=a;++e)r[e]=0;return[e,r]}r[0]=0;for(let e=1;e<=a;++e){const n=t[e]-t[e-1];let s=0;this.nGramWidths.forEach((e=>{s+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===s&&(s=1),r[e]=r[e-1]+s}const o=new Array(r[a]);for(let n=0;n<a;++n){const s=t[n];let a=r[n];if(this.nGramWidths.forEach((r=>{const i=t[n+1]-t[n],l=this.getNumNGrams(i,r);this.createNGrams(e,s,o,a,l,r),a+=l})),this.preserveShort&&a===r[n]){const r=t[n+1]-t[n];if(0===r)continue;const i=r+2*this.padWidth,l=1;this.createNGrams(e,s,o,a,l,i)}}return[o,r]}}function Lu(e,t,n,s,a,r,o,i){return new Mu(n,s,a,r,o,i).compute(e,t)}function Bu(e,t,n,s){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)s.push(e.subarray(t,t+1));return}if(1===t.length){const a=t[0];let r=e.indexOf(a);for(;-1!==r;){const t=e.subarray(0,r);n&&0===t.length||s.push(t),r=(e=e.subarray(r+1)).indexOf(a)}return void(n&&0===e.length||s.push(e))}let a=0;for(let r=0;r<e.length+1;r++)if(r===e.length||-1!==t.indexOf(e[r])){const t=e.subarray(a,r);n&&0===t.length||s.push(t),a=r+1}}function Pu(e,t,n){const s=e.length,a=[];let r=0,o=0;const i=new Array(s);for(let l=0;l<s;++l){const s=a.length;Bu(e[l],t,n,a);const u=a.length-s;i[l]=u,r+=u,o=Math.max(o,u)}const l=k("int32",2*r),u=new Array(r),c=[s,o];let h=0;for(let e=0;e<s;++e)for(let t=0;t<i[e];++t)l[2*h]=e,l[2*h+1]=t,u[h]=a[h],++h;return[l,u,c]}function zu(e,t){const n=k("int32",e.length);for(let s=0;s<e.length;++s)n[s]=Ls(e[s]).modulo(t).getLowBitsUnsigned();return n}const Wu=Zi(((e,t)=>e-t)),Vu=ll(En,Wu,ul(((e,t,n,s)=>({real:e-n,imag:t-s})))),Uu={kernelName:En,backendName:"cpu",kernelFunc:Vu};function Gu(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const s=or(n,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),a=new Array(e.rank);for(let t=0;t<a.length;t++)a[t]=n[t]%e.shape[t];const r=e.locToIndex(a);s.values[t]=e.values[r]}return s}const Hu=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function ju(e,t,n=0,s=e.length-1){for(;s>n;){if(s-n>600){const a=s-n+1,r=t-n+1,o=Math.log(a),i=.5*Math.exp(2*o/3),l=.5*Math.sqrt(o*i*(a-i)/a)*Math.sign(r-a/2);ju(e,t,Math.max(n,Math.floor(t-r*i/a+l)),Math.min(s,Math.floor(t+(a-r)*i/a+l)))}const a=e[t];let r=n,o=s;for(i(e,n,t),Hu(e[s],a)>0&&i(e,n,s);r<o;){for(i(e,r,o),r++,o--;Hu(e[r],a)<0;)r+=1;for(;Hu(e[o],a)>0;)o-=1}0===Hu(e[n],a)?i(e,n,o):(o+=1,i(e,o,s)),o<=t&&(n=o+1),t<=o&&(s=o-1)}}function Xu(e,t,n,s,a){const r=t[t.length-1],[o,i]=[e.length/r,r],l=v(n,o*s),u=v("int32",o*s);for(let t=0;t<o;t++){const n=t*i,r=e.subarray(n,n+i);let o=new Array(r.length);r.forEach(((e,t)=>o[t]={value:e,index:t})),s<o.length&&(ju(o,s),o=o.slice(0,s)),a&&o.sort(Hu);const c=t*s,h=l.subarray(c,c+s),d=u.subarray(c,c+s);for(let e=0;e<s;e++)h[e]=o[e].value,d[e]=o[e].index}const c=t.slice();return c[c.length-1]=s,[or(c,n,l),or(c,"int32",u)]}function Ku(e,t,n,s){const a=b(t,n)[0],r=[1,n[0],1];for(let e=0;e<a;e++)r[0]*=n[e];r[1]=n[a];for(let e=a+1;e<n.length;e++)r[2]*=n[e];const o={},i=new Int32Array(n[a]),l=new ea(r,s,e),u=[],c=1===r[0]&&1===r[2];for(let t=0;t<n[a];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<r[0];n++)for(let s=0;s<r[2];s++)e.push(l.get(n,t,s));n=e.join(",")}if(void 0!==o[n])i[t]=o[n];else{const e=Object.keys(o).length;o[n]=e,i[t]=e,u.push(t)}}const h=r.slice();h[1]=Object.keys(o).length;const d=new ea(h,s);u.forEach(((e,t)=>{for(let n=0;n<r[0];n++)for(let s=0;s<r[2];s++)d.set(l.get(n,e,s),n,t,s)}));const p=n.slice();return p[a]=h[1],{outputValues:d.values,outputShape:p,indices:i}}var qu=Object.freeze({__proto__:null,simpleAbsImpl:qi,addImpl:cl,bincountImpl:fl,bincountReduceImpl:ml,castImpl:rl,ceilImpl:yl,concatImpl:kl,equalImpl:wl,expImpl:Sl,expm1Impl:Tl,floorImpl:Rl,gatherNdImpl:_l,gatherV2Impl:Fl,greaterImpl:Ol,greaterEqualImpl:Ml,lessImpl:Bl,lessEqualImpl:zl,linSpaceImpl:Vl,logImpl:Ul,maxImpl:Hl,maximumImpl:jl,minimumImpl:Kl,multiplyImpl:Yl,negImpl:eu,notEqualImpl:nu,prodImpl:iu,raggedGatherImpl:du,raggedTensorToTensorImpl:xu,rangeImpl:bu,rsqrtImpl:yu,scatterImpl:ku,sigmoidImpl:wu,sliceImpl:Su,sparseFillEmptyRowsImpl:Tu,sparseReshapeImpl:Eu,sparseSegmentReductionImpl:Ru,sqrtImpl:Au,squaredDifferenceImpl:Fu,stridedSliceImpl:Du,stringNGramsImpl:Lu,stringSplitImpl:Pu,stringToHashBucketFastImpl:zu,subImpl:Wu,tileImpl:Gu,topKImpl:Xu,transposeImpl:au,uniqueImpl:Ku});hr("cpu",(()=>new Ki),1);const Yu=xl(ze,(e=>e>=0?e:Math.exp(e)-1)),Zu={kernelName:ze,backendName:"cpu",kernelFunc:Yu};function Ju(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{alpha:r}=s;ji([a],"leakyRelu");const o=h(a.shape),i=n.data.get(a.dataId).values,l=v("float32",o);for(let e=0;e<i.length;e++)l[e]=i[e]<0?r*i[e]:i[e];return n.makeTensorInfo(a.shape,"float32",l)}const Qu={kernelName:lt,backendName:"cpu",kernelFunc:Ju},ec=Zi(((e,t)=>e<0?t*e:e));function tc(e){const{inputs:t,backend:n}=e,{x:s,alpha:a}=t;ji([s,a],"prelu");const r=n.data.get(s.dataId).values,o=n.data.get(a.dataId).values,[i,l]=ec(s.shape,a.shape,r,o,"float32");return n.makeTensorInfo(l,"float32",i)}const nc={kernelName:Pt,backendName:"cpu",kernelFunc:tc},sc=xl(jt,(e=>Math.max(0,e))),ac={kernelName:jt,backendName:"cpu",kernelFunc:sc},rc=xl(Jt,(e=>Math.min(Math.max(0,e),6))),oc={kernelName:Jt,backendName:"cpu",kernelFunc:rc};function ic(e,t,n,s,a){if("linear"===n)return tl({inputs:{x:t},backend:e});if("relu"===n)return sc({inputs:{x:t},backend:e});if("elu"===n)return Yu({inputs:{x:t},backend:e});if("relu6"===n)return rc({inputs:{x:t},backend:e});if("prelu"===n)return tc({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return Ju({inputs:{x:t},backend:e,attrs:{alpha:a}});if("sigmoid"===n)return Iu({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function lc(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{shape:r}=s,o=h(a.shape),i=x(r,o),u=h(i);l(o===u,(()=>`The new shape (${i}) has ${u} elements and the old shape (${a.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(a.dataId);const c=n.data.get(a.dataId);if(null!=c.complexTensorInfos){const e=c.complexTensorInfos.real,t=c.complexTensorInfos.imag;e.shape=i,t.shape=i}return{dataId:a.dataId,shape:i,dtype:a.dtype}}const uc={kernelName:Xt,backendName:"cpu",kernelFunc:lc};function cc(e){const{inputs:t,backend:n,attrs:s}=e,{a:a,b:r}=t,{transposeA:o,transposeB:i}=s;ji([a,r],"matMul");const u=a.shape.length,c=r.shape.length,d=o?a.shape[u-2]:a.shape[u-1],p=i?r.shape[c-1]:r.shape[c-2],f=o?a.shape[u-1]:a.shape[u-2],m=i?r.shape[c-2]:r.shape[c-1],g=a.shape.slice(0,-2),x=r.shape.slice(0,-2),b=h(g),y=h(x),v=fr(a.shape.slice(0,-2),r.shape.slice(0,-2)).concat([f,m]);l(d===p,(()=>`Error in matMul: inner shapes (${d}) and (${p}) of Tensors with shapes ${a.shape} and ${r.shape} and transposeA=${o} and transposeB=${i} must match.`));const k=i?[y,m,p]:[y,p,m],w=lc({inputs:{x:a},backend:n,attrs:{shape:o?[b,d,f]:[b,f,d]}}),I=lc({inputs:{x:r},backend:n,attrs:{shape:k}}),N=o?w.shape[1]:w.shape[2],S=o?w.shape[2]:w.shape[1],C=i?I.shape[1]:I.shape[2],$=Math.max(b,y),T=n.data.get(w.dataId).values,R=n.data.get(I.dataId).values,A=E(w.shape),_=E(I.shape),[F,O,D]=o?[A[0],1,A[1]]:[A[0],A[1],1],[M,L,B]=i?[1,_[1],_[0]]:[_[1],1,_[0]],P=S*C,z=or([$,S,C],w.dtype),W=z.values,V=n.blockSize;for(let e=0;e<$;e++)for(let t=0;t<S;t+=V)for(let n=0;n<C;n+=V)for(let s=0;s<N;s+=V){const a=Math.min(t+V,S),r=Math.min(n+V,C),o=Math.min(s+V,N);for(let i=t;i<a;i++)for(let t=n;t<r;t++){let n=0;for(let a=s;a<o;a++){const s=Math.min(e,b-1)*F,r=Math.min(e,y-1)*B;n+=T[s+i*O+a*D]*R[a*M+t*L+r]}W[e*P+(i*C+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(I),n.makeTensorInfo(v,z.dtype,z.values)}const hc={kernelName:le,backendName:"cpu",kernelFunc:cc};const dc={kernelName:Vn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:a,b:r,bias:o,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let d,p,f;const m=[];d=cc({inputs:{a:a,b:r},attrs:{transposeA:l,transposeB:u},backend:n}),o&&(p=dl({inputs:{a:d,b:o},backend:n}),m.push(d),d=p),c&&(f=ic(n,d,c,i,h),m.push(d),d=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return d}},pc={kernelName:X,backendName:"cpu",kernelFunc:xl(X,(e=>Math.acos(e)))},fc={kernelName:K,backendName:"cpu",kernelFunc:xl(K,(e=>Math.acosh(e)))};const mc={kernelName:Y,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;ji(t,"addN");const a=s.map((e=>n.data.get(e.dataId).values)),r=or(s[0].shape,s[0].dtype),o=r.values;for(let e=0;e<s.length;e++){const t=a[e];for(let e=0;e<o.length;e++)o[e]+=t[e]}return n.makeTensorInfo(r.shape,r.dtype,r.values)}};const gc={kernelName:"All",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s;ji(a,"all");const i=b(r,a.shape);let l=i;const u=ro(l,a.shape.length);let c=a;null!=u&&(c=ru({inputs:{x:a},backend:n,attrs:{perm:u}}),l=io(l.length,a.shape.length)),ao("all",l,c.shape.length);const[d,p]=no(c.shape,l),f=h(p),m=F(h(d),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];n=n&&s}m[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const x=n.makeTensorInfo(d,c.dtype,m);if(o){const e=lc({inputs:{x:x},backend:n,attrs:{shape:so(d,i)}});return n.disposeIntermediateTensorInfo(x),e}return x}};const xc={kernelName:"Any",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s;ji(a,"any");const i=b(r,a.shape);let l=i;const u=ro(l,a.shape.length);let c=a;null!=u&&(c=ru({inputs:{x:a},backend:n,attrs:{perm:u}}),l=io(l.length,a.shape.length)),ao("any",l,c.shape.length);const[d,p]=no(c.shape,l),f=h(p),m=F(h(d),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];n=n||s}m[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const x=n.makeTensorInfo(d,c.dtype,m);if(o){const e=lc({inputs:{x:x},backend:n,attrs:{shape:so(d,i)}});return n.disposeIntermediateTensorInfo(x),e}return x}};const bc={kernelName:Z,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r}=s;ji(a,"argMax");let o=b(r,a.shape);const i=ro(o,a.shape.length);let l=a;const u=[];null!=i&&(l=ru({inputs:{x:a},backend:n,attrs:{perm:i}}),u.push(l),o=io(o.length,l.shape.length)),o=[o[0]],ao("argMax",o,l.shape.length);const[c,d]=no(l.shape,o),p=F(h(c),"int32"),f=h(d),m=n.data.get(l.dataId).values;for(let e=0;e<p.length;++e){const t=e*f;let n=m[t],s=0;for(let e=0;e<f;++e){const a=m[t+e];a>n&&(n=a,s=e)}p[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",p)}};const yc={kernelName:J,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r}=s;ji(a,"argMin");let o=b(r,a.shape);const i=ro(o,a.shape.length);let l=a;const u=[];null!=i&&(l=ru({inputs:{x:a},backend:n,attrs:{perm:i}}),u.push(l),o=io(o.length,l.shape.length)),o=[o[0]],ao("argMin",o,l.shape.length);const[c,d]=no(l.shape,o),p=F(h(c),"int32"),f=h(d),m=n.data.get(l.dataId).values;for(let e=0;e<p.length;++e){const t=e*f;let n=m[t],s=0;for(let e=0;e<f;++e){const a=m[t+e];a<n&&(n=a,s=e)}p[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",p)}},vc={kernelName:Q,backendName:"cpu",kernelFunc:xl(Q,(e=>Math.asin(e)))},kc={kernelName:ee,backendName:"cpu",kernelFunc:xl(ee,(e=>Math.asinh(e)))},wc={kernelName:te,backendName:"cpu",kernelFunc:xl(te,(e=>Math.atan(e)))},Ic={kernelName:se,backendName:"cpu",kernelFunc:ll(se,Zi(((e,t)=>Math.atan2(e,t))))},Nc={kernelName:ne,backendName:"cpu",kernelFunc:xl(ne,(e=>Math.atanh(e)))};function Sc(e,t,n,s,a,r){const o=a.strideHeight,i=a.strideWidth,l=a.dilationHeight,u=a.dilationWidth,c=a.effectiveFilterHeight,h=a.effectiveFilterWidth,d=a.padInfo.top,p=a.padInfo.left,f="max"===r?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=or(a.outShape,n),g=m.values,x=a.outShape[1]*a.outShape[2]*a.outShape[3],b=a.outShape[2]*a.outShape[3],y=a.outShape[3];for(let t=0;t<a.batchSize;++t){const n=t*x,m=t*s[0];for(let t=0;t<a.inChannels;++t)for(let x=0;x<a.outHeight;++x){const v=x*o-d,k=Math.max(0,v),w=Math.min(a.inHeight,c+v),I=n+x*b;for(let n=0;n<a.outWidth;++n){const o=n*i-p,c=Math.max(0,o),d=Math.min(a.inWidth,h+o);let x=f,b=0,v=0;for(let n=k;n<w;n+=l){const a=m+n*s[1];for(let n=c;n<d;n+=u){const o=e[a+n*s[2]+t];"max"===r&&o>x?x=o:"avg"===r&&(b+=o,v++)}if(isNaN(x))break}g[I+n*y+t]="avg"===r?b/v:x}}}return m}function Cc(e,t,n,s,a=!1,r=!1){const o=or(s.outShape,"int32"),i=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,d=s.effectiveFilterWidth,p=s.padInfo.top,f=s.padInfo.left,m=or(t,n,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let n=0;n<s.outHeight;++n){const g=n*i-p;let x=g;for(;x<0;)x+=u;const b=Math.min(s.inHeight,h+g);for(let i=0;i<s.outWidth;++i){const h=i*l-f;let p=h;for(;p<0;)p+=c;const y=Math.min(s.inWidth,d+h);let v=Number.NEGATIVE_INFINITY,k=-1;for(let n=x;n<b;n+=u){const o=n-g;for(let i=p;i<y;i+=c){const l=i-h,u=m.get(e,n,i,t);u>v&&(v=u,k=a?r?((e*s.inHeight+n)*s.inWidth+i)*s.inChannels+t:(n*s.inWidth+i)*s.inChannels+t:o*d+l)}}o.set(k,e,n,i,t)}}return o}function $c(e,t,n,s,a,r){const o=a.strideDepth,i=a.strideHeight,l=a.strideWidth,u=a.dilationDepth,c=a.dilationHeight,h=a.dilationWidth,d=a.effectiveFilterDepth,p=a.effectiveFilterHeight,f=a.effectiveFilterWidth,m=a.padInfo.front,g=a.padInfo.top,x=a.padInfo.left,b="max"===r?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,y=or(a.outShape,n),v=y.values,k=a.outShape[1]*a.outShape[2]*a.outShape[3]*a.outShape[4],w=a.outShape[2]*a.outShape[3]*a.outShape[4],I=a.outShape[3]*a.outShape[4],N=a.outShape[4];for(let t=0;t<a.batchSize;++t){const n=t*k,y=t*s[0];for(let t=0;t<a.inChannels;++t)for(let k=0;k<a.outDepth;++k){const S=k*o-m;let C=S;for(;C<0;)C+=u;const $=Math.min(a.inDepth,d+S),T=n+k*w;for(let n=0;n<a.outHeight;++n){const o=n*i-g;let d=o;for(;d<0;)d+=c;const m=Math.min(a.inHeight,p+o),k=T+n*I;for(let n=0;n<a.outWidth;++n){const o=n*l-x;let i=o;for(;i<0;)i+=h;const p=Math.min(a.inWidth,f+o),g=k+n*N;let w=b,I=0,S=0;for(let n=C;n<$;n+=u){const a=y+n*s[1];for(let n=d;n<m;n+=c){const o=a+n*s[2];for(let n=i;n<p;n+=h){const a=e[o+n*s[3]+t];if("max"===r&&a>w?w=a:"avg"===r&&(I+=a,S++),isNaN(w))break}if(isNaN(w))break}if(isNaN(w))break}v[g+t]="avg"===r?I/S:w}}}}return y}const Tc={kernelName:ae,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;ji(a,"avgPool");const{filterSize:r,strides:o,pad:i,dimRoundingMode:u}=s;l(Kr(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=Br(a.shape,r,o,1,i,u);let h;if(1===c.filterWidth&&1===c.filterHeight&&d(c.inShape,c.outShape))h=tl({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=E(a.shape),s=Sc(e,a.shape,a.dtype,t,c,"avg");h=n.makeTensorInfo(c.outShape,a.dtype,s.values)}return h}};const Ec={kernelName:oe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:r,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=s;ji(a,"avgPool3d");const c=Pr(a.shape,r,o,1,i,l,u),h=$c(n.data.get(a.dataId).values,a.shape,a.dtype,E(a.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}};const Rc={kernelName:ie,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=s;ji([a,r],"avgPool3DGrad");const c=Pr(r.shape,o,i,1,l,u),h=c.strideDepth,d=c.strideHeight,p=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,x=c.dilationDepth,b=c.dilationHeight,y=c.dilationWidth,v=c.effectiveFilterDepth,k=c.effectiveFilterHeight,w=c.effectiveFilterWidth,I=v-1-c.padInfo.front,N=w-1-c.padInfo.left,S=k-1-c.padInfo.top,C=or(r.shape,"float32"),$=1/(f*m*g),T=n.bufferSync(a);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let a=0;a<c.inWidth;++a){const r=n-I,o=s-S,i=a-N;let l=0;for(let n=0;n<v;n+=x){const s=(r+n)/h;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let n=0;n<k;n+=b){const a=(o+n)/d;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let n=0;n<w;n+=y){const r=(i+n)/p;if(r<0||r>=c.outWidth||Math.floor(r)!==r)continue;l+=T.get(e,s,a,r,t)}}}C.set(l*$,e,n,s,a,t)}return n.makeTensorInfo(C.shape,C.dtype,C.values)}};const Ac={kernelName:re,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,o=r;ji([a,r],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=Br(o.shape,i,l,1,u),h=c.strideHeight,d=c.strideWidth,p=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,x=c.effectiveFilterHeight,b=c.effectiveFilterWidth,y=b-1-c.padInfo.left,v=x-1-c.padInfo.top,k=or(o.shape,"float32"),w=1/(p*f),I=n.data.get(a.dataId).values,N=or(a.shape,"float32",I);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const a=n-v,r=s-y;let o=0;for(let n=0;n<x;n+=m){const s=(a+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<b;n+=g){const a=(r+n)/d;if(a<0||a>=c.outWidth||Math.floor(a)!==a)continue;o+=N.get(e,s,a,t)}}k.set(o*w,e,n,s,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}};const _c={kernelName:Ze,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,scale:r,offset:o,mean:i,variance:u}=t;l(i.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),l(null==o||i.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),l(null==r||i.shape.length===r.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),ji([a,i,u,r,o],"batchNorm");let{varianceEpsilon:c}=s;null==c&&(c=.001);const h=n.data.get(a.dataId).values,d=n.data.get(i.dataId).values,p=n.data.get(u.dataId).values,f=r?n.data.get(r.dataId).values:new Float32Array([1]),m=o?n.data.get(o.dataId).values:new Float32Array([0]),g=new Float32Array(h.length),x=m.length,b=f.length,y=p.length,v=d.length;let k=0,w=0,I=0,N=0;for(let e=0;e<h.length;++e)g[e]=m[k++]+(h[e]-d[w++])*f[I++]/Math.sqrt(p[N++]+c),k>=x&&(k=0),w>=v&&(w=0),I>=b&&(I=0),N>=y&&(N=0);return n.makeTensorInfo(a.shape,a.dtype,g)}};const Fc={kernelName:ue,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:r,crops:o}=s;ji([a],"batchToSpaceND");const i=r.reduce(((e,t)=>e*t)),l=qo(a.shape,r,i),u=Yo(l.length,r.length),c=Zo(a.shape,r,i),h=Jo(o,r.length),d=Qo(c,o,r.length),p=lc({inputs:{x:a},backend:n,attrs:{shape:l}}),f=ru({inputs:{x:p},backend:n,attrs:{perm:u}}),m=lc({inputs:{x:f},backend:n,attrs:{shape:c}}),g=Cu({inputs:{x:m},backend:n,attrs:{begin:h,size:d}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};const Oc={kernelName:ce,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:o}=s,i=fl(n.data.get(a.dataId).values,n.data.get(r.dataId).values,r.dtype,r.shape,o);return n.makeTensorInfo([o],r.dtype,i)}};const Dc={kernelName:he,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:a}=t,r=n.data.get(s.dataId).values,o=n.data.get(a.dataId).values,i=fr(Array.from(r),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},Mc={kernelName:fe,backendName:"cpu",kernelFunc:xl(fe,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e}))},Lc={kernelName:ge,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(h(t.shape)),a=n.data.get(t.dataId),r=a.complexTensorInfos.real,o=a.complexTensorInfos.imag,i=n.data.get(r.dataId).values,l=n.data.get(o.dataId).values;for(let e=0;e<i.length;e++){const t=i[e],n=l[e];s[e]=Math.hypot(t,n)}return n.makeOutput(s,t.shape,"float32")}};function Bc(e){const{inputs:t,backend:n}=e,{input:s}=t,a=n.data.get(s.dataId).complexTensorInfos.imag,r=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,r)}const Pc={kernelName:at,backendName:"cpu",kernelFunc:Bc};function zc(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s,r=b(a,t[0].shape)[0];Po(t.map((e=>e.shape)),r);let o=zo(t.map((e=>e.shape)),r);if(0===h(o))return n.makeTensorInfo(o,t[0].dtype,[]);const i=t.filter((e=>h(e.shape)>0));if(1===i.length)return tl({inputs:{x:i[0]},backend:n});if("complex64"===i[0].dtype){const e=i.map((e=>sl({inputs:{input:e},backend:n}))),t=i.map((e=>Bc({inputs:{input:e},backend:n}))),s=zc({inputs:e,backend:n,attrs:{axis:r}}),a=zc({inputs:t,backend:n,attrs:{axis:r}}),o=Ji({inputs:{real:s,imag:a},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),o}const l=i.map((e=>{const t=h(e.shape.slice(r));return lc({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),u=l.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));o=zo(l.map((e=>e.shape)),1);const c=1===l[0].shape[0],d=kl(u,o,t[0].dtype,c),p=zo(i.map((e=>e.shape)),r),f=n.makeTensorInfo(p,t[0].dtype,d);return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}const Wc={kernelName:xe,backendName:"cpu",kernelFunc:zc};function Vc(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:o,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s;ji([a,r],"conv2d");const h=qr(l),d=zr(a.shape,r.shape,o,u,i,c,!1,h),p=d.filterHeight,f=d.filterWidth,m=d.dilationHeight,g=d.dilationWidth,x=d.padInfo.left,b=d.padInfo.top,y="channelsLast"===d.dataFormat,v=new ea(d.outShape,a.dtype),k=E(a.shape),w=E(r.shape),I=k[0],N=y?k[1]:k[2],S=y?k[2]:1,C=y?1:k[1],$=v.strides[0],T=y?v.strides[1]:v.strides[2],R=y?v.strides[2]:1,A=y?1:v.strides[1],_=n.data.get(a.dataId).values,F=n.data.get(r.dataId).values,O=v.values;for(let e=0;e<d.batchSize;++e){const t=e*I,n=e*$;for(let e=0;e<d.outHeight;++e){const s=n+e*T,a=e*d.strideHeight-b;for(let e=0;e<p;++e){const n=a+e*m;if(n<0||n>=d.inHeight)continue;const r=e*w[0],o=t+n*N;for(let e=0;e<d.outWidth;++e){const t=s+e*R,n=e*d.strideWidth-x;for(let e=0;e<f;++e){const s=n+e*g;if(s<0||s>=d.inWidth)continue;const a=o+s*S;let i=r+e*w[1];for(let e=0;e<d.inChannels;++e){const n=_[a+e*C];for(let e=0;e<d.outChannels;++e)O[t+e*A]+=n*F[i+e];i+=d.outChannels}}}}}}return n.makeTensorInfo(v.shape,v.dtype,O)}const Uc={kernelName:be,backendName:"cpu",kernelFunc:Vc};const Gc={kernelName:ye,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;ji([a,r],"conv2dBackpropFilter");const h=qr(l),d=zr(a.shape,c,o,1,i,u,!1,h),{strideHeight:p,strideWidth:f,filterHeight:m,filterWidth:g}=d,x="channelsLast"===d.dataFormat,b=new ea(d.filterShape,"float32"),y=d.padInfo.left,v=d.padInfo.top,k=n.data.get(a.dataId).values,w=n.data.get(r.dataId).values,I=new ea(a.shape,a.dtype,k),N=new ea(r.shape,r.dtype,w);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((v-e)/p)),n=Math.min(d.outHeight,(d.inHeight+v-e)/p);for(let s=0;s<g;++s){const a=Math.max(0,Math.ceil((y-s)/f)),r=Math.min(d.outWidth,(d.inWidth+y-s)/f);for(let o=0;o<d.inChannels;++o)for(let i=0;i<d.outChannels;++i){let l=0;for(let u=0;u<d.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*p-v;for(let e=a;e<r;++e){const n=s+e*f-y;l+=x?I.get(u,t,n,o)*N.get(u,c,e,i):I.get(u,o,t,n)*N.get(u,i,c,e)}}b.set(l,e,s,o,i)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const Hc={kernelName:ve,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{inputShape:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s;ji([a,r],"conv2dBackpropInput");const h=E(r.shape),d=E(a.shape);let p=qr(u);const f=zr(o,r.shape,i,1,l,c,!1,p),m=new ea(f.inShape,"float32"),g=m.values,x=n.data.get(a.dataId).values,b=n.data.get(r.dataId).values,[y,v,k]=h,{batchSize:w,filterHeight:I,filterWidth:N,inChannels:S,inHeight:C,inWidth:$,outChannels:T,outHeight:R,outWidth:A,strideHeight:_,strideWidth:F}=f;p=f.dataFormat;const O=I-1-f.padInfo.top,D=N-1-f.padInfo.left,M="channelsLast"===p,L=m.strides[0],B=M?m.strides[1]:m.strides[2],P=M?m.strides[2]:1,z=M?1:m.strides[1],W=d[0],V=M?d[1]:d[2],U=M?d[2]:1,G=M?1:d[1];for(let e=0;e<w;++e)for(let t=0;t<S;++t)for(let n=0;n<C;++n){const s=n-O,a=Math.max(0,Math.ceil(s/_)),r=Math.min(R,(I+s)/_);for(let o=0;o<$;++o){const i=o-D,l=Math.max(0,Math.ceil(i/F)),u=Math.min(A,(N+i)/F);let c=0;for(let n=a;n<r;++n){const a=n*_-s;for(let s=l;s<u;++s){const r=W*e+V*n+U*s,o=y*(I-1-a)+v*(N-1-(s*F-i))+k*t;for(let e=0;e<T;++e){c+=x[r+G*e]*b[o+e]}}}g[L*e+B*n+P*o+z*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const jc={kernelName:ke,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:o,pad:i,dilations:l}=s;ji([a,r],"conv3d");const u=Wr(a.shape,r.shape,o,l,i),{filterDepth:c,filterHeight:h,filterWidth:d,dilationDepth:p,dilationHeight:f,dilationWidth:m,padInfo:g}=u,x=g.front,b=g.left,y=g.top,v=new ea(u.outShape,a.dtype),k=n.data.get(a.dataId).values,w=n.data.get(r.dataId).values,I=v.values,N=E(a.shape),S=E(r.shape);for(let e=0;e<u.batchSize;++e){const t=e*N[0],n=e*v.strides[0];for(let e=0;e<u.outDepth;++e){const s=n+e*v.strides[1],a=e*u.strideDepth-x;for(let e=0;e<c;++e){const n=a+e*p;if(n<0||n>=u.inDepth)continue;const r=e*S[0],o=t+n*N[1];for(let e=0;e<u.outHeight;++e){const t=s+e*v.strides[2],n=e*u.strideHeight-y;for(let e=0;e<h;++e){const s=n+e*f;if(s<0||s>=u.inHeight)continue;const a=r+e*S[1],i=o+s*N[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-b;for(let e=0;e<d;++e){const t=s+e*m;if(t<0||t>=u.inWidth)continue;const r=a+e*S[2],o=i+t*u.inChannels;let l=r;for(let e=0;e<u.inChannels;++e){const t=k[o+e];for(let e=0;e<u.outChannels;++e)I[n+e]+=t*w[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}};const Xc={kernelName:we,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:o,pad:i,filterShape:l}=s;ji([a,r],"conv3dBackpropFilterV2");const u=E(a.shape),c=E(r.shape),h=Wr(a.shape,l,o,1,i),d=h.strideDepth,p=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,x=h.filterWidth,b=new ea(h.filterShape,"float32"),y=b.values,[v,k,w,I]=b.strides,N=n.data.get(r.dataId).values,[S,C,$,T]=c,R=n.data.get(a.dataId).values,[A,_,F,O]=u,D=h.padInfo.front,M=h.padInfo.left,L=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((D-e)/d)),n=Math.min(h.outDepth,(h.inDepth+D-e)/d),s=e*v;for(let a=0;a<g;++a){const r=Math.max(0,Math.ceil((L-a)/p)),o=Math.min(h.outHeight,(h.inHeight+L-a)/p),i=a*k+s;for(let s=0;s<x;++s){const l=Math.max(0,Math.ceil((M-s)/f)),u=Math.min(h.outWidth,(h.inWidth+M-s)/f),c=s*w+i;for(let i=0;i<h.inChannels;++i){const m=i*I+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*A,x=m*S;for(let m=t;m<n;++m){const t=(e+m*d-D)*_+h,n=m*C+x;for(let e=r;e<o;++e){const r=(a+e*p-L)*F+t,o=e*$+n;for(let e=l;e<u;++e){const t=e*T+o;g+=R[(s+e*f-M)*O+r+i]*N[t+c]}}}}y[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const Kc={kernelName:Ie,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{pad:o,strides:i,inputShape:l}=s;ji([a],"conv3dBackpropInputV2");const u=E(a.shape),c=E(r.shape),h=Wr(l,r.shape,i,1,o),d=new ea(h.inShape,"float32"),p=d.values,[f,m,g,x]=d.strides,b=n.data.get(a.dataId).values,[y,v,k,w]=u,I=n.data.get(r.dataId).values,[N,S,C,$]=c,{batchSize:T,filterDepth:R,filterHeight:A,filterWidth:_,inChannels:F,inDepth:O,inHeight:D,inWidth:M,outChannels:L,outDepth:B,outHeight:P,outWidth:z,strideDepth:W,strideHeight:V,strideWidth:U}=h,G=R-1-h.padInfo.front,H=A-1-h.padInfo.top,j=_-1-h.padInfo.left;for(let e=0;e<T;++e)for(let t=0;t<F;++t)for(let n=0;n<O;++n){const s=n-G,a=Math.max(0,Math.ceil(s/W)),r=Math.min(B,(R+s)/W);for(let o=0;o<D;++o){const i=o-H,l=Math.max(0,Math.ceil(i/V)),u=Math.min(P,(A+i)/V);for(let c=0;c<M;++c){const h=c-j,d=Math.max(0,Math.ceil(h/U)),T=Math.min(z,(_+h)/U);let E=0;for(let n=a;n<r;++n){const a=n*W-s;for(let s=l;s<u;++s){const r=s*V-i;for(let o=d;o<T;++o){const i=y*e+v*n+k*s+w*o,l=N*(R-1-a)+S*(A-1-r)+C*(_-1-(o*U-h))+$*t;for(let e=0;e<L;++e){E+=b[i+e]*I[l+e]}}}}p[f*e+m*n+g*o+x*c+t]=E}}}return n.makeTensorInfo(d.shape,d.dtype,d.values)}},qc={kernelName:Ne,backendName:"cpu",kernelFunc:xl(Ne,(e=>Math.cos(e)))},Yc={kernelName:Se,backendName:"cpu",kernelFunc:xl(Se,(e=>Math.cosh(e)))};const Zc={kernelName:Te,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:a,boxes:r,boxInd:o}=t,{cropSize:i,method:l,extrapolationValue:u}=s,[c,h,d,p]=a.shape,f=r.shape[0],[m,g]=i,x=or([f,m,g,p],"float32"),b=n.data.get(r.dataId).values,y=n.data.get(o.dataId).values,v=n.data.get(a.dataId).values,k=E(a.shape),w=E(x.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],s=b[t+1],a=b[t+2],r=b[t+3],o=y[e];if(o>=c)continue;const i=m>1?(a-n)*(h-1)/(m-1):0,f=g>1?(r-s)*(d-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(h-1)+t*i:.5*(n+a)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let s=0;s<p;s++){const a=s+n*w[2]+t*w[1]+e*w[0];x.values[a]=u}else if("bilinear"===l){const n=Math.floor(c),a=Math.ceil(c),i=c-n;for(let l=0;l<g;l++){const c=g>1?s*(d-1)+l*f:.5*(s+r)*(d-1);if(c<0||c>d-1){for(let n=0;n<p;n++){const s=n+l*w[2]+t*w[1]+e*w[0];x.values[s]=u}continue}const h=Math.floor(c),m=Math.ceil(c),b=c-h;for(let s=0;s<p;s++){let r=s+h*k[2]+n*k[1]+o*k[0];const u=v[r];r=s+m*k[2]+n*k[1]+o*k[0];const c=v[r];r=s+h*k[2]+a*k[1]+o*k[0];const d=v[r];r=s+m*k[2]+a*k[1]+o*k[0];const p=u+(c-u)*b,f=d+(v[r]-d)*b;r=s+l*w[2]+t*w[1]+e*w[0],x.values[r]=p+(f-p)*i}}}else for(let n=0;n<g;++n){const a=g>1?s*(d-1)+n*f:.5*(s+r)*(d-1);if(a<0||a>d-1){for(let s=0;s<p;s++){const a=s+n*w[2]+t*w[1]+e*w[0];x.values[a]=u}continue}const i=Math.round(a),l=Math.round(c);for(let s=0;s<p;s++){const a=s+i*k[2]+l*k[1]+o*k[0],r=s+n*w[2]+t*w[1]+e*w[0];x.values[r]=v[a]}}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}};const Jc={kernelName:Ce,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,exclusive:o,reverse:i}=s;ji(a,"cumprod");const l=ro([r],a.shape.length);let u=a;null!=l&&(u=ru({inputs:{x:a},backend:n,attrs:{perm:l}}));const c=io(1,a.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const d=ha(u.dtype,"int32"),p=_(h(u.shape),d),f=n.data.get(u.dataId).values,m=u.shape[u.shape.length-1],g=i?(e,t)=>e+m-t-1:(e,t)=>e+t;for(let e=0;e<f.length;e+=m)for(let t=0;t<m;t++){const n=g(e,t);if(0===t)p[n]=o?1:f[n];else{const s=g(e,t-1);p[n]=o?f[s]*p[s]:f[n]*p[s]}}const x=n.makeTensorInfo(u.shape,d,p);if(null!=l){const e=ru({inputs:{x:x},backend:n,attrs:{perm:oo(l)}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(u),e}return x}};const Qc={kernelName:$e,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,exclusive:o,reverse:i}=s;ji(a,"cumsum");const l=ro([r],a.shape.length);let u=a;null!=l&&(u=ru({inputs:{x:a},backend:n,attrs:{perm:l}}));const c=io(1,a.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const d=ha(u.dtype,"int32"),p=F(h(u.shape),d),f=n.data.get(u.dataId).values,m=u.shape[u.shape.length-1],g=i?(e,t)=>e+m-t-1:(e,t)=>e+t;for(let e=0;e<f.length;e+=m)for(let t=0;t<m;t++){const n=g(e,t);if(0===t)p[n]=o?0:f[n];else{const s=g(e,t-1);p[n]=o?f[s]+p[s]:f[n]+p[s]}}const x=n.makeTensorInfo(u.shape,d,p);if(null!=l){const e=ru({inputs:{x:x},backend:n,attrs:{perm:oo(l)}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(u),e}return x}};const eh={kernelName:Ee,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:o,binaryOutput:i}=s;if(1===a.shape.length){const e=fl(n.data.get(a.dataId).values,n.data.get(r.dataId).values,r.dtype,r.shape,o);return n.makeTensorInfo([o],r.dtype,e)}if(2===a.shape.length){const e=ml(n.bufferSync(a),n.bufferSync(r),o,i);return n.makeTensorInfo(e.shape,r.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}};const th={kernelName:Re,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockSize:r,dataFormat:o}=s;l("NHWC"===o,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`));const i=a.shape[0],u=a.shape[1],c=a.shape[2],h=a.shape[3],d=u*r,p=c*r,f=h/(r*r),m=n.data.get(a.dataId).values,g=new Float32Array(i*d*p*f);let x=0;for(let e=0;e<i;++e)for(let t=0;t<d;++t){const n=Math.floor(t/r),s=t%r;for(let t=0;t<p;++t){const a=Math.floor(t/r),o=(s*r+t%r)*f;for(let t=0;t<f;++t){const s=t+o+h*(a+c*(n+u*e));g[x++]=m[s]}}}return n.makeTensorInfo([i,d,p,f],a.dtype,g)}};function nh(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:o,pad:i,dilations:u,dimRoundingMode:c}=s;ji([a,r],"depthwiseConv2DNative");const h=E(a.shape),d=E(r.shape);let p=u;null==p&&(p=[1,1]),l(Kr(o,p),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${p}'`));const f=zr(a.shape,r.shape,o,p,i,c,!0),{filterHeight:m,filterWidth:g,dilationHeight:x,dilationWidth:b,padInfo:y}=f,v=y.left,k=y.top,w=f.outChannels/f.inChannels,I=new ea(f.outShape,a.dtype),N=n.data.get(a.dataId).values,S=n.data.get(r.dataId).values,C=I.values;for(let e=0;e<f.batchSize;++e){const t=e*h[0],n=e*I.strides[0];for(let e=0;e<f.outHeight;++e){const s=n+e*I.strides[1],a=e*f.strideHeight-k;for(let e=0;e<m;++e){const n=a+e*x;if(n<0||n>=f.inHeight)continue;const r=e*d[0],o=t+n*h[1];for(let e=0;e<f.outWidth;++e){const t=s+e*I.strides[2],n=e*f.strideWidth-v;for(let e=0;e<g;++e){const s=n+e*b;if(s<0||s>=f.inWidth)continue;const a=r+e*d[1],i=o+s*f.inChannels;let l=t,u=a;for(let e=0;e<f.inChannels;++e){const t=N[i+e];for(let e=0;e<w;++e)C[l+e]+=t*S[u+e];l+=w,u+=w}}}}}}return n.makeTensorInfo(I.shape,I.dtype,I.values)}const sh={kernelName:Ae,backendName:"cpu",kernelFunc:nh};const ah={kernelName:_e,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s;ji([a,r],"depthwiseConv2dNativeBackpropFilter");const h=zr(a.shape,c,o,i,l,u,!0),{strideHeight:d,strideWidth:p,filterHeight:f,filterWidth:m}=h,g=new ea(h.filterShape,"float32"),x=h.padInfo.left,b=h.padInfo.top,y=h.outChannels/h.inChannels,v=n.data.get(a.dataId).values,k=new ea(a.shape,a.dtype,v),w=n.data.get(r.dataId).values,I=new ea(r.shape,r.dtype,w);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/d)),n=Math.min(h.outHeight,(h.inHeight+b-e)/d);for(let s=0;s<m;++s){const a=Math.max(0,Math.ceil((x-s)/p)),r=Math.min(h.outWidth,(h.inWidth+x-s)/p);for(let o=0;o<h.outChannels;++o){const i=Math.trunc(o/y),l=o%y;let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*d-b;for(let e=a;e<r;++e){const n=s+e*p-x;u+=k.get(l,t,n,i)*I.get(l,c,e,o)}}g.set(u,e,s,i,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const rh={kernelName:Fe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s;ji([a,r],"depthwiseConv2DNativeBackpropInput");const h=E(a.shape),d=E(r.shape),p=zr(c,r.shape,o,i,l,u,!0),f=new ea(p.inShape,"float32"),m=f.values,[g,x,b]=f.strides,y=n.data.get(a.dataId).values,[v,k,w]=h,I=n.data.get(r.dataId).values,[N,S,C]=d,{batchSize:$,filterHeight:T,filterWidth:R,inChannels:A,inHeight:_,inWidth:F,outChannels:O,outHeight:D,outWidth:M,strideHeight:L,strideWidth:B}=p,P=T-1-p.padInfo.top,z=R-1-p.padInfo.left,W=O/A;for(let e=0;e<$;++e)for(let t=0;t<A;++t)for(let n=0;n<_;++n){const s=n-P,a=Math.max(0,Math.ceil(s/L)),r=Math.min(D,(T+s)/L);for(let o=0;o<F;++o){const i=o-z,l=Math.max(0,Math.ceil(i/B)),u=Math.min(M,(R+i)/B);let c=0;for(let n=a;n<r;++n){const a=n*L-s;for(let s=l;s<u;++s){const r=v*e+k*n+w*s,o=N*(T-1-a)+S*(R-1-(s*B-i))+C*t;for(let e=0;e<W;++e){c+=y[r+(t*W+e)]*I[o+e]}}}m[g*e+x*n+b*o+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const oh={kernelName:Oe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=h(s.shape),r=n.data.get(s.dataId).values,o=or([a,a],s.dtype),i=o.values;for(let e=0;e<r.length;e++)i[e*a+e]=r[e];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,o.dtype,o.values)}},ih={kernelName:De,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a}=e,{strides:r,pad:o,dilations:i}=n,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,d=l.data.get(a.dataId).values,p=a.shape.length,{batchSize:f,inHeight:m,inWidth:g,inChannels:x,outHeight:b,outWidth:y,padInfo:v,strideHeight:w,strideWidth:I,filterHeight:N,filterWidth:S,dilationHeight:C,dilationWidth:$,outShape:T}=Lr(s.shape,a.shape,r,o,"NHWC",i),R=h(T),A=T.length,_=k(s.dtype,R);for(let e=0;e<f;++e)for(let t=0;t<b;++t){const n=t*w-v.top;for(let r=0;r<y;++r){const o=r*I-v.left;for(let i=0;i<x;++i){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<N;++t){const r=n+t*C;if(r>=0&&r<m)for(let n=0;n<S;++n){const h=o+n*$;if(h>=0&&h<g){const o=M([e,r,h,i],c,E(s.shape)),f=M([t,n,i],p,E(a.shape)),m=u[o]+d[f];m>l&&(l=m)}}}_[M([e,t,r,i],A,E(T))]=l}}}return{dataId:l.write(Ps(_,s.dtype),T,s.dtype),shape:T,dtype:s.dtype}}},lh={kernelName:Le,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a,dy:r}=e,{strides:o,pad:i,dilations:u}=n,c=t,h=A(s.shape,c.data.get(s.dataId).values),d=A(a.shape,c.data.get(a.dataId).values),{batchSize:p,inHeight:f,inWidth:m,inChannels:g,outHeight:x,outWidth:b,padInfo:y,strideHeight:v,strideWidth:k,filterHeight:w,filterWidth:I,dilationHeight:N,dilationWidth:S,outShape:C}=Lr(s.shape,a.shape,o,i,"NHWC",u);l(r.rank===C.length,(()=>`Error in ${Le}, dy must have the same rank as output ${C.length}, but got ${r.rank}`));const $=A(C,c.data.get(r.dataId).values),T=O(a.shape,a.dtype);for(let e=0;e<p;++e)for(let t=0;t<x;++t){const n=t*v-y.top;for(let s=0;s<b;++s){const a=s*k-y.left;for(let r=0;r<g;++r){let o=Number.MIN_SAFE_INTEGER,i=0,l=0;for(let t=0;t<w;++t){const s=n+t*N;if(s>=0&&s<f)for(let n=0;n<I;++n){const u=a+n*S;if(u>=0&&u<m){const a=h[e][s][u][r]+d[t][n][r];a>o&&(o=a,i=t,l=n)}}}T[i][l][r]+=$[e][t][s][r]}}}return{dataId:c.write(Ps(T,s.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},uh={kernelName:Me,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a,dy:r}=e,{strides:o,pad:i,dilations:u}=n,c=t,h=A(s.shape,c.data.get(s.dataId).values),d=A(a.shape,c.data.get(a.dataId).values),{batchSize:p,inHeight:f,inWidth:m,inChannels:g,outHeight:x,outWidth:b,padInfo:y,strideHeight:v,strideWidth:k,filterHeight:w,filterWidth:I,dilationHeight:N,dilationWidth:S,outShape:C}=Lr(s.shape,a.shape,o,i,"NHWC",u);l(r.rank===C.length,(()=>`Error in ${Me}, dy must have the same rank as output ${C.length}, but got ${r.rank}`));const $=A(C,c.data.get(r.dataId).values),T=O(s.shape,s.dtype);for(let e=0;e<p;++e)for(let t=0;t<x;++t){const n=t*v-y.top;for(let s=0;s<b;++s){const a=s*k-y.left;for(let r=0;r<g;++r){let o=Number.MIN_SAFE_INTEGER,i=n<0?0:n,l=a<0?0:a;for(let t=0;t<w;++t){const s=n+t*N;if(s>=0&&s<f)for(let n=0;n<I;++n){const u=a+n*S;if(u>=0&&u<m){const a=h[e][s][u][r]+d[t][n][r];a>o&&(o=a,i=s,l=u)}}}T[e][i][l][r]+=$[e][t][s][r]}}}return{dataId:c.write(Ps(T,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}};function ch(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s;let i;ji(a,"sum"),i="bool"===a.dtype?ol({inputs:{x:a},backend:n,attrs:{dtype:"int32"}}):tl({inputs:{x:a},backend:n});const l=i.shape.length,u=b(r,i.shape),c=ro(u,l);let d=u,p=i;null!=c&&(p=ru({inputs:{x:i},backend:n,attrs:{perm:c}}),d=io(d.length,l)),ao("sum",d,p.shape.length);const[f,m]=no(p.shape,d);let g=el(n,f,ha(p.dtype,"int32"));const x=h(m),y=n.data.get(g.dataId).values,v=n.data.get(p.dataId).values;for(let e=0;e<y.length;++e){const t=e*x;let n=0;for(let e=0;e<x;++e)n+=v[t+e];y[e]=n}if(o){const e=g;g=lc({inputs:{x:g},backend:n,attrs:{shape:so(g.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(i),null!=c&&n.disposeIntermediateTensorInfo(p),g}const hh={kernelName:fn,backendName:"cpu",kernelFunc:ch};const dh={kernelName:Pe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:a}=s,r=t,{allDims:o,summedDims:i,idDims:l}=vi(a,r.length);wi(o.length,l,r);const{path:u,steps:c}=Ii(i,l),h=c.length;let p=null,f=o.length;const m=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=ki(f,l[t]);let a;Ni(e)?a=r[t]:(a=ru({inputs:{x:r[t]},backend:n,attrs:{perm:e}}),m.push(a));const o=a.shape.slice();for(let e=0;e<s.length;++e)o.splice(s[e],0,1);d(a.shape,o)||(a=lc({inputs:{x:a},backend:n,attrs:{shape:o}}),m.push(a)),null===p?p=a:(p=Jl({inputs:{a:a,b:p},backend:n}),m.push(p))}e<h-1&&(u[e]>=0&&(p=ch({inputs:{x:p},backend:n,attrs:{axis:u[e]-(o.length-f),keepDims:!1}}),m.push(p)),f--)}for(const e of m)e!==p&&n.disposeIntermediateTensorInfo(e);return p}};const ph={kernelName:We,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:a}=t;ji([s,a],"eluGrad");const r=new Float32Array(h(a.shape)),o=n.data.get(a.dataId).values,i=n.data.get(s.dataId).values;for(let e=0;e<o.length;++e){const t=o[e];r[e]=t>=1?i[e]:i[e]*(t+1)}return n.makeTensorInfo(a.shape,"float32",r)}},fh=xl(Ve,(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+.3275911*n);return t*(1-((((1.061405429*s-1.453152027)*s+1.421413741)*s-.284496736)*s+.254829592)*s*Math.exp(-n*n))})),mh={kernelName:Ve,backendName:"cpu",kernelFunc:fh};function gh(e){const{inputs:t,backend:n,attrs:s}=e,{input:a}=t,{dim:r}=s,o=a.shape.length,i=a.shape.slice();let u=r;return r<0&&(l(-(o+1)<=r,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),u=o+r+1),i.splice(u,0,1),lc({inputs:{x:a},backend:n,attrs:{shape:i}})}const xh={kernelName:He,backendName:"cpu",kernelFunc:gh},bh=ll(Be,Zi(((e,t)=>e/t))),yh={kernelName:Be,backendName:"cpu",kernelFunc:bh};function vh(e,t,n){const s=e.shape,a=s[0],r=s[1],o=n.data.get(e.dataId),i=o.complexTensorInfos.real,l=o.complexTensorInfos.imag,u=[a,r],c=h(u),d=v("float32",c),p=v("float32",c);for(let e=0;e<a;e++){const s=Cu({inputs:{x:i},backend:n,attrs:{begin:[e,0],size:[1,r]}}),a=Cu({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,r]}}),o=Ji({inputs:{real:s,imag:a},backend:n}),{real:u,imag:c}=kh(o,t,n),h=li(u,c);for(let t=0;t<r;t++){const n=di(h,t);d[e*r+t]=n.real,p[e*r+t]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o)}const f=n.makeTensorInfo(u,"float32",d),m=n.makeTensorInfo(u,"float32",p),g=Ji({inputs:{real:f,imag:m},backend:n});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}function kh(e,t,n){const s=h(e.shape),a=n.data.get(e.dataId),r=n.data.get(a.complexTensorInfos.real.dataId).values,o=n.data.get(a.complexTensorInfos.imag.dataId).values;if(0==((i=s)&i-1)){const a=wh(r,o,s,t,n),i=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(i,"float32",a.real),t=n.makeTensorInfo(i,"float32",a.imag),r=n.makeTensorInfo([],"float32",Bs(s,"float32")),o=tl({inputs:{x:r},backend:n}),l=yh.kernelFunc({inputs:{a:e,b:r},backend:n}),u=yh.kernelFunc({inputs:{a:t,b:o},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return a}{const e=function(e,t,n){const s=new Float32Array(2*t);for(let a=0;a<t;a++){let r=0,o=0;for(let s=0;s<t;s++){const i=mi(a*s,t,n),l=di(e,s);r+=l.real*i.real-l.imag*i.imag,o+=l.real*i.imag+l.imag*i.real}n&&(r/=t,o/=t),pi(s,r,o,a)}return s}(li(r,o),s,t);return ui(e)}var i}function wh(e,t,n,s,a){if(1===n)return{real:e,imag:t};const r=li(e,t),o=n/2,i=ci(r),l=i.real,u=i.imag,c=[l.length],h=a.makeTensorInfo(c,"float32",l),d=a.makeTensorInfo(c,"float32",u),p=Ji({inputs:{real:h,imag:d},backend:a}),f=hi(r),m=f.real,g=f.imag,x=[m.length],b=a.makeTensorInfo(x,"float32",m),y=a.makeTensorInfo(x,"float32",g),v=Ji({inputs:{real:b,imag:y},backend:a}),k=wh(l,u,o,s,a),w=k.real,I=k.imag,N=[w.length],S=a.makeTensorInfo(N,"float32",w),C=a.makeTensorInfo(N,"float32",I),$=Ji({inputs:{real:S,imag:C},backend:a}),T=wh(m,g,o,s,a),E=T.real,R=T.imag,A=[E.length],_=a.makeTensorInfo(A,"float32",E),F=a.makeTensorInfo(A,"float32",R),O=Ji({inputs:{real:_,imag:F},backend:a}),D=fi(n,s),M=[D.real.length],L=a.makeTensorInfo(M,"float32",D.real),B=a.makeTensorInfo(M,"float32",D.imag),P=Ji({inputs:{real:L,imag:B},backend:a}),z=Jl({inputs:{a:P,b:O},backend:a}),W=dl({inputs:{a:$,b:z},backend:a}),V=Vu({inputs:{a:$,b:z},backend:a}),U=sl({inputs:{input:W},backend:a}),G=sl({inputs:{input:V},backend:a}),H=Bc({inputs:{input:W},backend:a}),j=Bc({inputs:{input:V},backend:a}),X=zc({inputs:[U,G],backend:a,attrs:{axis:0}}),K=zc({inputs:[H,j],backend:a,attrs:{axis:0}}),q=a.data.get(X.dataId).values,Y=a.data.get(K.dataId).values;return a.disposeIntermediateTensorInfo(h),a.disposeIntermediateTensorInfo(d),a.disposeIntermediateTensorInfo(p),a.disposeIntermediateTensorInfo(b),a.disposeIntermediateTensorInfo(y),a.disposeIntermediateTensorInfo(v),a.disposeIntermediateTensorInfo(S),a.disposeIntermediateTensorInfo(C),a.disposeIntermediateTensorInfo($),a.disposeIntermediateTensorInfo(_),a.disposeIntermediateTensorInfo(F),a.disposeIntermediateTensorInfo(O),a.disposeIntermediateTensorInfo(L),a.disposeIntermediateTensorInfo(B),a.disposeIntermediateTensorInfo(P),a.disposeIntermediateTensorInfo(z),a.disposeIntermediateTensorInfo(W),a.disposeIntermediateTensorInfo(V),a.disposeIntermediateTensorInfo(U),a.disposeIntermediateTensorInfo(H),a.disposeIntermediateTensorInfo(G),a.disposeIntermediateTensorInfo(j),a.disposeIntermediateTensorInfo(X),a.disposeIntermediateTensorInfo(K),{real:q,imag:Y}}const Ih={kernelName:"FFT",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,a=h(s.shape),r=s.shape[s.shape.length-1],o=lc({inputs:{x:s},backend:n,attrs:{shape:[a/r,r]}}),i=vh(o,!1,n),l=lc({inputs:{x:i},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),l}};function Nh(e){const{backend:t,attrs:n}=e,{shape:s,value:a,dtype:r}=n,o=r||C(a),i=k(o,h(s));return function(e,t,n){e.fill(t)}(i,a),t.makeTensorInfo(s,o,i)}const Sh={kernelName:Xe,backendName:"cpu",kernelFunc:Nh};const Ch={kernelName:Ke,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,a=n,r=v(s.dtype,h(s.shape)),[o,i,l,u]=s.shape,c=a.data.get(s.dataId).values;for(let e=0;e<o;e++){const t=e*l*i*u;for(let e=0;e<i;e++){const n=e*(l*u);for(let e=0;e<l;e++){const s=e*u;for(let a=0;a<u;a++){const o=Math.round(l-e-1),i=t+n+s+a;let h=c[i];if(o>=0&&o<l){h=c[t+n+o*u+a]}r[i]=h}}}}return{dataId:a.write(r,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},$h={kernelName:Ye,backendName:"cpu",kernelFunc:ll(Ye,Zi(((e,t)=>Math.floor(e/t))),null,"int32")};const Th={kernelName:Un,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let m=Vc({inputs:{x:a,filter:r},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(o){const e=m;if("NCHW"===c&&1===o.shape.length&&1!==o.shape[0]){const e=lc({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=dl({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=dl({inputs:{a:m,b:o},backend:n});n.disposeIntermediateTensorInfo(e)}if(p){const e=m;if("NCHW"===c&&"prelu"===p&&1===i.shape.length&&1!==i.shape[0]){const e=lc({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=ic(n,m,p,e,f),n.disposeIntermediateTensorInfo(e)}else m=ic(n,m,p,i,f);n.disposeIntermediateTensorInfo(e)}return m}};const Eh={kernelName:Gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let m=nh({inputs:{x:a,filter:r},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(o){const e=m;m=dl({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(p){const e=m;m=ic(n,m,p,i,f),n.disposeIntermediateTensorInfo(e)}return m}};const Rh={kernelName:Qe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:a}=t,r=h(s.shape),o=a.shape,i=o[o.length-1],[l,u,c,d]=mr(s,a);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const p=_l(n.data.get(a.dataId).values,n.bufferSync(s),s.dtype,u,i,c,d,s.shape,r);return n.makeTensorInfo(l,s.dtype,p.values)}};const Ah={kernelName:Je,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,indices:r}=t,{axis:o,batchDims:i}=s;ji([a,r],"gatherV2");const u=b(o,a.shape)[0],c=n.data.get(r.dataId).values,d=a.shape[u];for(let e=0;e<c.length;++e){const t=c[e];l(t<=d-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${d-1}]`))}let p=i;null==i&&(p=0);const f=h(r.shape),m=Wi(a,r,u,p),g=lc({inputs:{x:a},backend:n,attrs:{shape:[m.batchSize,m.outerSize,m.dimSize,m.sliceSize]}}),x=lc({inputs:{x:r},backend:n,attrs:{shape:[m.batchSize,f/m.batchSize]}}),y=[m.batchSize,m.outerSize,f/m.batchSize,m.sliceSize],v=n.bufferSync(x),k=Fl(n.bufferSync(g),v,y);return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(x),n.makeTensorInfo(m.outputShape,k.dtype,k.values)}};const _h={kernelName:st,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,a=h(s.shape),r=s.shape[s.shape.length-1],o=lc({inputs:{x:s},backend:n,attrs:{shape:[a/r,r]}}),i=vh(o,!0,n),l=lc({inputs:{x:i},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),l}},Fh={kernelName:rt,backendName:"cpu",kernelFunc:xl(rt,(e=>Number.isFinite(e)?1:0),"bool")},Oh={kernelName:ot,backendName:"cpu",kernelFunc:xl(ot,(e=>Math.abs(e)===1/0?1:0),"bool")},Dh={kernelName:it,backendName:"cpu",kernelFunc:xl(it,(e=>Number.isNaN(e)?1:0),"bool")};const Mh={kernelName:ht,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,num:r}=n,o=Vl(s,a,r);return t.makeTensorInfo([o.length],"float32",o)}},Lh={kernelName:pt,backendName:"cpu",kernelFunc:xl(pt,(e=>Math.log1p(e)))},Bh={kernelName:ft,backendName:"cpu",kernelFunc:ll(ft,Zi(((e,t)=>e&&t)),null,"bool")},Ph={kernelName:mt,backendName:"cpu",kernelFunc:xl(mt,(e=>e?0:1),"bool")},zh={kernelName:gt,backendName:"cpu",kernelFunc:ll(gt,Zi(((e,t)=>e||t)),null,"bool")};const Wh={kernelName:"LRN",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{depthRadius:r,bias:o,alpha:i,beta:l}=s;ji(a,"LRN");const u=a.shape[3],c=u-1,d=n.data.get(a.dataId).values,p=h(a.shape),f=new Float32Array(p);function m(e){const t=e%u;let n=e-t+Math.max(0,t-r);const s=e-t+Math.min(t+r,c);let a=0;for(;n<=s;n++){const e=d[n];a+=e*e}return a}for(let e=0;e<p;e++){const t=m(e),n=d[e]*Math.pow(o+i*t,-l);f[e]=n}return n.makeTensorInfo(a.shape,a.dtype,f)}};const Vh={kernelName:xt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,y:r,dy:o}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s;ji(o,"LRNGrad");const d=h(o.shape),p=o.shape[3],f=n.data.get(o.dataId).values,m=n.data.get(a.dataId).values,g=n.data.get(r.dataId).values,x=new Float32Array(d),b=d;for(let e=0;e<b;e++){const t=e%p,n=e-t+Math.max(0,t-i),s=e-t+Math.min(p,t+i+1);let a=0;for(let e=n;e<s;e++)a+=Math.pow(m[e],2);a=u*a+l;for(let t=n;t<s;t++){let n=-2*u*c*m[t]*g[e]/a;e===t&&(n+=Math.pow(a,-c)),n*=f[e],x[t]+=n}}return n.makeTensorInfo(o.shape,a.dtype,x)}};function Uh(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reductionIndices:r,keepDims:o}=s,i=n;let l=a.shape;const u=l.length,c=b(r,l);let d=c;const p=ro(d,u);let f=i.data.get(a.dataId).values;if(null!=p){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[p[t]];f=au(f,l,a.dtype,p,e),d=io(d.length,u),l=e}ji(a,"max"),ao("max",d,u);const[m,g]=no(l,d),x=Hl(f,h(g),m,a.dtype),y=i.write(x,m,a.dtype);let v=m;if(o){v=so(m,c)}return{dataId:y,shape:v,dtype:a.dtype}}const Gh={kernelName:"Max",backendName:"cpu",kernelFunc:Uh};const Hh={kernelName:yt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;ji(a,"maxPool");const{filterSize:r,strides:o,pad:i,dimRoundingMode:u}=s;l(Kr(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=Br(a.shape,r,o,1,i,u);let h;if(1===c.filterWidth&&1===c.filterHeight&&d(c.inShape,c.outShape))h=tl({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=E(a.shape),s=Sc(e,a.shape,a.dtype,t,c,"max");h=n.makeTensorInfo(c.outShape,a.dtype,s.values)}return h}};const jh={kernelName:kt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:r,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=s;ji(a,"maxPool3d");const c=Pr(a.shape,r,o,1,i,l,u),h=$c(n.data.get(a.dataId).values,a.shape,a.dtype,E(a.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}};const Xh={kernelName:wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=s;ji([a,r],"maxPool3DGrad");const c=Pr(r.shape,o,i,1,l,u),h=function(e,t){const n=or(t.outShape,"int32"),s=t.strideDepth,a=t.strideHeight,r=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.front,p=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let x=0;x<t.outDepth;++x){const b=x*s-d;let y=b;for(;y<0;)y+=o;const v=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*a-p;let d=u;for(;d<0;)d+=i;const k=Math.min(t.inHeight,c+u);for(let a=0;a<t.outWidth;++a){const p=a*r-f;let w=p;for(;w<0;)w+=l;const I=Math.min(t.inWidth,h+p);let N=Number.NEGATIVE_INFINITY,S=-1;for(let t=y;t<v;t+=o){const n=t-b;for(let s=d;s<k;s+=i){const a=s-u;for(let r=w;r<I;r+=l){const o=r-p,i=e.get(m,t,s,r,g);i>=N&&(N=i,S=n*c*h+a*c+o)}}}n.set(S,m,x,s,a,g)}}}return n}(n.bufferSync(r),c),d=c.strideDepth,p=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,x=c.dilationWidth,b=c.effectiveFilterDepth,y=c.effectiveFilterHeight,v=c.effectiveFilterWidth,k=b-1-c.padInfo.front,w=v-1-c.padInfo.left,I=y-1-c.padInfo.top,N=or(r.shape,"float32"),S=n.bufferSync(a);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let a=0;a<c.inWidth;++a){const r=n-k,o=s-I,i=a-w;let l=0;for(let n=0;n<b;n+=m){const s=(r+n)/d;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let a=0;a<y;a+=g){const r=(o+a)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let o=0;o<v;o+=x){const u=(i+o)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const d=b*y*v-1-h.get(e,s,r,u,t)===n*y*v+a*v+o?1:0;if(0===d)continue;l+=S.get(e,s,r,u,t)*d}}}N.set(l,e,n,s,a,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};const Kh={kernelName:vt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r,output:o}=t,i=r;ji([r,o],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=Br(i.shape,l,u,1,c,h),p=n.data.get(i.dataId).values,f=or(d.outShape,i.dtype,Cc(p,i.shape,i.dtype,d).values),m=d.strideHeight,g=d.strideWidth,x=d.dilationHeight,b=d.dilationWidth,y=d.effectiveFilterHeight,v=d.effectiveFilterWidth,k=v-1-d.padInfo.left,w=y-1-d.padInfo.top,I=or(i.shape,"float32"),N=n.data.get(a.dataId).values,S=or(a.shape,"float32",N);for(let e=0;e<d.batchSize;++e)for(let t=0;t<d.inChannels;++t)for(let n=0;n<d.inHeight;++n)for(let s=0;s<d.inWidth;++s){const a=n-w,r=s-k;let o=0;for(let n=0;n<y;n+=x){const s=(a+n)/m;if(!(s<0||s>=d.outHeight||Math.floor(s)!==s))for(let a=0;a<v;a+=b){const i=(r+a)/g;if(i<0||i>=d.outWidth||Math.floor(i)!==i)continue;const l=y*v-1-f.get(e,s,i,t)===n*v+a?1:0;if(0===l)continue;o+=S.get(e,s,i,t)*l}}I.set(o,e,n,s,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}};const qh={kernelName:It,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:a,strides:r,pad:o,includeBatchInIndex:i}=t,l=n;ji(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=Br(s.shape,a,r,[1,1],o),[h,d]=function(e,t,n,s,a){const r=Sc(e,0,n,E(t),a,"max"),o=Cc(e,t,n,a,!0,s);return[r.values,o.values]}(u,s.shape,s.dtype,i,c),p=l.write(h,c.outShape,s.dtype),f=l.write(d,c.outShape,s.dtype);return[{dataId:p,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};const Yh={kernelName:Nt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s,i=b(r,a.shape),l=h(no(a.shape,i)[1]),u=[],c=n.makeTensorInfo([],"float32",new Float32Array([l]));u.push(c);const d=ol({inputs:{x:a},backend:n,attrs:{dtype:"float32"}});u.push(d);const p=bh({inputs:{a:d,b:c},backend:n});u.push(p);const f=ch({inputs:{x:p},backend:n,attrs:{axis:r,keepDims:o}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};const Zh={kernelName:"Min",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s;ji(a,"min");const i=b(r,a.shape);let l=i;const u=ro(l,a.shape.length);let c=a;null!=u&&(c=ru({inputs:{x:a},backend:n,attrs:{perm:u}}),l=io(l.length,a.shape.length)),ao("min",l,c.shape.length);const[d,p]=no(c.shape,l),f=h(p),m=F(h(d),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];(Number.isNaN(s)||s<n)&&(n=s)}m[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const x=n.makeTensorInfo(d,c.dtype,m);if(o){const e=lc({inputs:{x:x},backend:n,attrs:{shape:so(d,i)}});return n.disposeIntermediateTensorInfo(x),e}return x}};const Jh={kernelName:Ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:r,mode:o}=s;ji(a,"mirrorPad");const i=r.map(((e,t)=>e[0]+a.shape[t]+e[1])),l=r.map((e=>e[0])),u=r.map(((e,t)=>e[0]+a.shape[t])),c="reflect"===o?0:1,d=n.data.get(a.dataId).values,p=a.shape.length,f=E(a.shape),m=h(i),g=i.length,x=E(i),b=v(a.dtype,m);for(let e=0;e<m;e++){let t=L(e,g,x);for(let e=0;e<g;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map(((e,t)=>e-l[t]));const n=M(t,p,f);b[e]=d[n]}return{dataId:n.write(b,i,a.dtype),shape:i,dtype:a.dtype}}},Qh={kernelName:$t,backendName:"cpu",kernelFunc:ll($t,Zi(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})))};function ed(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{dim:r}=s,o=a.shape.length;let i=r;if(-1===i&&(i=o-1),i!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${i}`);const l=b([i],a.shape),u=Uh({inputs:{x:a},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=so(u.shape,l),h=lc({inputs:{x:u},backend:n,attrs:{shape:c}}),d=Vu({inputs:{a:a,b:h},backend:n}),p=Cl({inputs:{x:d},backend:n}),f=ch({inputs:{x:p},backend:n,attrs:{axis:l,keepDims:!1}}),m=lc({inputs:{x:f},backend:n,attrs:{shape:c}}),g=bh({inputs:{a:p,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const td={kernelName:xn,backendName:"cpu",kernelFunc:ed};const nd={kernelName:Tt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{numSamples:r,seed:o,normalized:i}=s;ji(a,"multinomial");const l=i?a:ed({inputs:{logits:a},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],d=n.data.get(l.dataId).values,p=[u,r],f=F(h(p),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=d[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+d[t+e];const s=No.alea(o.toString()),a=e*r;for(let e=0;e<r;++e){const t=s();f[a+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){f[a+e]=s;break}}}return i||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(p,"int32",f)}},sd=Ao;const ad={kernelName:At,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=s;ji(a,"NonMaxSuppression");const u=n.data.get(a.dataId).values,c=n.data.get(r.dataId).values,{selectedIndices:h}=sd(u,c,o,i,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},rd=_o;const od={kernelName:_t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s;ji(a,"NonMaxSuppressionPadded");const c=n.data.get(a.dataId).values,h=n.data.get(r.dataId).values,{selectedIndices:d,validOutputs:p}=rd(c,h,o,i,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},id=Fo;const ld={kernelName:Ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s;ji(a,"NonMaxSuppressionWithScore");const c=n.data.get(a.dataId).values,h=n.data.get(r.dataId).values,d=o,p=i,f=l,m=u,{selectedIndices:g,selectedScores:x}=id(c,h,d,p,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([x.length],"float32",new Float32Array(x))]}};const ud={kernelName:Dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a}=t,{dtype:r,depth:o,onValue:i,offValue:l}=s;ji(a,"oneHot");const u=h(a.shape),c=new Float32Array(u*o);c.fill(l);const d=n.data.get(a.dataId).values;for(let e=0;e<u;++e)d[e]>=0&&d[e]<o&&(c[e*o+d[e]]=i);return n.makeTensorInfo([...a.shape,o],r,c)}};function cd(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=sl({inputs:{input:s},backend:n}),t=cd({inputs:{x:e},backend:n}),a=Bc({inputs:{input:s},backend:n}),r=cd({inputs:{x:a},backend:n}),o=Ji({inputs:{real:t,imag:r},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),o}return Nh({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const hd={kernelName:Pn,backendName:"cpu",kernelFunc:cd};const dd={kernelName:Ot,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===a.dtype){const t=sl({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s}),r=Bc({inputs:{input:a},backend:s}),o=cd({inputs:{x:r},backend:s}),i=Ji({inputs:{real:n,imag:o},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(o),i}return Nh({backend:s,attrs:{shape:a.shape,value:1,dtype:a.dtype}})}};function pd(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s;if(1===t.length)return gh({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const r=t[0].shape,o=t[0].dtype;t.forEach((e=>{u(r,e.shape,"All tensors passed to stack must have matching shapes"),l(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],c=zc({inputs:t.map((e=>{const t=gh({inputs:{input:e},backend:n,attrs:{dim:a}});return i.push(t),t})),backend:n,attrs:{axis:a}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const fd={kernelName:Mt,backendName:"cpu",kernelFunc:pd};const md={kernelName:Lt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:r,constantValue:o}=s;ji(a,"pad");const i=r.map(((e,t)=>e[0]+a.shape[t]+e[1])),l=r.map((e=>e[0])),u=n.data.get(a.dataId).values,c=h(a.shape),d=a.shape.length,p=E(a.shape),f=h(i),m=i.length,g=E(i),x=v(a.dtype,f);0!==o&&x.fill(o);for(let e=0;e<c;e++){x[M(L(e,d,p).map(((e,t)=>e+l[t])),m,g)]=u[e]}return{dataId:n.write(x,i,a.dtype),shape:i,dtype:a.dtype}}},gd={kernelName:Bt,backendName:"cpu",kernelFunc:ll(Bt,Zi(((e,t)=>Math.pow(e,t))))};const xd={kernelName:Wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:a,paramsDenseValues:r,indices:o}=t,i=a.map((e=>n.data.get(e.dataId).values)),l=a.map((e=>e.shape)),u=n.data.get(r.dataId).values,c=n.data.get(o.dataId).values,[h,d,p]=du(i,l,u,r.shape,r.dtype,c,o.shape),f=h.map((e=>n.makeTensorInfo([e.length],"int32",e))),m=n.makeTensorInfo(p,r.dtype,d);return f.concat([m])}};const bd={kernelName:Vt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:a,values:r,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=s,u=n.data.get(a.dataId).values,c=n.data.get(r.dataId).values,h=n.data.get(o.dataId).values,d=i.map((e=>n.data.get(e.dataId).values)),p=i.map((e=>e.shape)),[f,m]=xu(u,a.shape,c,r.shape,r.dtype,h,o.shape,d,p,l);return n.makeTensorInfo(f,r.dtype,m)}};const yd={kernelName:Ut,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,dtype:r,step:o}=n,i=bu(s,a,o,r);return t.makeTensorInfo([i.length],r,i)}},vd={kernelName:Ht,backendName:"cpu",kernelFunc:xl(Ht,(e=>1/e))};const kd={kernelName:Yt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:o,size:i}=s;ji(a,"resizeBilinear");const l=E(a.shape),[u,c]=i,[d,p,f,m]=a.shape,g=n.data.get(a.dataId).values,x=new Float32Array(h([d,u,c,m])),b=[r&&u>1?p-1:p,r&&c>1?f-1:f],y=[r&&u>1?u-1:u,r&&c>1?c-1:c];let v=0;const k=b[0]/y[0],w=b[1]/y[1];for(let e=0;e<d;e++)for(let t=0;t<u;t++){let n;n=o?k*(t+.5)-.5:k*t;const s=Math.max(0,Math.floor(n)),a=n-s,r=Math.min(p-1,Math.ceil(n)),i=e*l[0]+s*l[1],u=e*l[0]+r*l[1];for(let e=0;e<c;e++){let t;t=o?w*(e+.5)-.5:w*e;const n=Math.max(0,Math.floor(t)),s=t-n,r=Math.min(f-1,Math.ceil(t)),c=i+n*l[2],h=u+n*l[2],d=i+r*l[2],p=u+r*l[2];for(let e=0;e<m;e++){const t=g[c+e],n=g[h+e],r=t+(g[d+e]-t)*s,o=r+(n+(g[p+e]-n)*s-r)*a;x[v++]=o}}}return n.makeTensorInfo([d,u,c,m],"float32",x)}};const wd={kernelName:Zt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:o}=s;ji([r,a],"resizeBilinearGrad");const i=E(a.shape),[l,u,c,h]=a.shape,[,d,p]=r.shape,f=new Float32Array(l*u*c*h),m=[o&&d>1?u-1:u,o&&p>1?c-1:c],g=[o&&d>1?d-1:d,o&&p>1?p-1:p],x=m[0]/g[0],b=m[1]/g[1],y=n.data.get(r.dataId).values;let v=0;for(let e=0;e<l;e++){const t=e*i[0];for(let e=0;e<d;e++){const n=e*x,s=Math.floor(n),a=Math.min(Math.ceil(n),u-1),r=t+s*i[1],o=t+a*i[1],l=n-s,d=1-l;for(let e=0;e<p;e++){const t=e*b,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),a=t-n,u=1-a,p=r+n*i[2],m=r+s*i[2],g=o+n*i[2],x=o+s*i[2],k=d*u,w=d*a,I=l*u,N=l*a;for(let e=0;e<h;e++){const t=y[v++];f[p+e]+=t*k,f[m+e]+=t*w,f[g+e]+=t*I,f[x+e]+=t*N}}}}return n.makeTensorInfo([l,c,u,h],"float32",f)}};const Id={kernelName:Kt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:o,size:i}=s;ji(a,"resizeNearestNeighbor");const l=E(a.shape),[u,c]=i,[h,d,p,f]=a.shape,m=n.data.get(a.dataId).values,g=new Float32Array(h*u*c*f),x=[r&&u>1?d-1:d,r&&c>1?p-1:p],b=[r&&u>1?u-1:u,r&&c>1?c-1:c],y=x[0]/b[0],v=x[1]/b[1];let k=0;for(let e=0;e<h;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=o?y*(e+.5):y*e;let s=Math.min(d-1,r?Math.round(n):Math.floor(n));o&&(s=Math.max(0,s));const a=t+s*l[1];for(let e=0;e<c;e++){const t=o?v*(e+.5):v*e;let n=Math.min(p-1,r?Math.round(t):Math.floor(t));o&&(n=Math.max(0,n));const s=a+n*l[2];for(let e=0;e<f;e++){const t=m[s+e];g[k++]=t}}}}return n.makeTensorInfo([h,u,c,f],a.dtype,g)}};const Nd={kernelName:qt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:o}=s;ji([r,a],"resizeNearestNeighborGrad");const i=E(a.shape),l=E(r.shape),[u,c,h,d]=a.shape,[,p,f]=r.shape,m=new Float32Array(u*c*h*d),g=n.data.get(r.dataId).values,x=[o&&p>1?c-1:c,o&&f>1?h-1:h],b=[o&&p>1?p-1:p,o&&f>1?f-1:f],y=x[0]/b[0],v=x[1]/b[1],k=1/y,w=1/v,I=2*Math.ceil(k)+2,N=2*Math.ceil(w)+2;for(let e=0;e<u;e++){const t=e*i[0];for(let e=0;e<c;e++){const n=t+e*i[1],s=Math.floor(e*k),a=Math.floor(s-I/2);for(let s=0;s<h;s++){const r=n+s*i[2],u=Math.floor(s*w),x=Math.floor(u-N/2);for(let n=0;n<d;n++){let i=0;for(let r=0;r<I;r++){const u=r+a;if(u<0||u>=p)continue;const d=t+u*l[1],m=u*y;if(e===Math.min(c-1,o?Math.round(m):Math.floor(m)))for(let e=0;e<N;e++){const t=e+x;if(t<0||t>=f)continue;const a=d+t*l[2],r=t*v;s===Math.min(h-1,o?Math.round(r):Math.floor(r))&&(i+=g[a+n])}}m[r+n]=i}}}}return n.makeTensorInfo(a.shape,a.dtype,m)}};const Sd={kernelName:Qt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dims:r}=s;ji(a,"reverse");const o=a.shape.length,i=b(r,a.shape);if(0===o)return tl({inputs:{x:a},backend:n});const l=new ea(a.shape,a.dtype),u=n.bufferSync(a);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();i.forEach((e=>n[e]=a.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},Cd={kernelName:Wn,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:a,fillValue:r,center:o}=t,i=n,l=v(s.dtype,h(s.shape)),[u,c,d,p]=s.shape,[f,m]=Ko(o,c,d),g=Math.sin(a),x=Math.cos(a),b=i.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=e*d*c*p;for(let e=0;e<c;e++){const n=e*(d*p);for(let s=0;s<d;s++){const a=s*p;for(let o=0;o<p;o++){const i=[u,e,s,o],h=i[2],y=i[1];let v=(h-f)*x-(y-m)*g,k=(h-f)*g+(y-m)*x;v=Math.round(v+f),k=Math.round(k+m);let w=r;if("number"!=typeof r&&(w=3===o?255:r[o]),v>=0&&v<d&&k>=0&&k<c){w=b[t+k*(d*p)+v*p+o]}l[t+n+a+o]=w}}}}return{dataId:i.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},$d={kernelName:en,backendName:"cpu",kernelFunc:xl(en,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1}))};const Td={kernelName:nn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a,updates:r}=t,{shape:o}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=xr(0,a,o),d=ku(n.bufferSync(a),n.bufferSync(r),o,h,u,l,i,c,0,!0);return n.makeTensorInfo(o,d.dtype,d.values)}};function Ed(e,t){let n=0,s=e.length,a=0;for(;n<s;)a=Math.floor((n+s)/2),e[a]<t?n=a+1:s=a;return s}function Rd(e,t){let n=0,s=e.length,a=0;for(;n<s;)a=Math.floor((n+s)/2),e[a]<=t?n=a+1:s=a;return s}const Ad={kernelName:sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:a,values:r}=t,{side:o}=s,i=function(e,t,n,s,a,r){const o=k("int32",n*a);for(let i=0;i<n;++i){const n=e.slice(i*s,(i+1)*s),l=i*a;for(let e=0;e<a;++e)o[l+e]="left"===r?Ed(n,t[e+l]):Rd(n,t[e+l])}return o}(n.data.get(a.dataId).values,n.data.get(r.dataId).values,a.shape[0],a.shape[1],r.shape[1],o);return n.makeTensorInfo(r.shape,"int32",i)}};const _d={kernelName:an,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:a,e:r}=t;ji([s,a,r],"select");const o=s.shape.length,i=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,u=n.data.get(r.dataId).values,c=ha(a.dtype,r.dtype),d=F(h(a.shape),c);let p=0;const f=0===o||o>1||1===a.shape.length?1:h(a.shape.slice(1));for(let e=0;e<i.length;e++)for(let t=0;t<f;t++)1===i[e]?d[p++]=l[e]:d[p++]=u[e];return n.makeTensorInfo(a.shape,c,d)}},Fd={kernelName:rn,backendName:"cpu",kernelFunc:xl(rn,(e=>e>=0?1.0507009873554805*e:1.7580993408473768*(Math.exp(e)-1)))},Od={kernelName:cn,backendName:"cpu",kernelFunc:xl(cn,(e=>e<0?-1:e>0?1:0))},Dd={kernelName:ln,backendName:"cpu",kernelFunc:xl(ln,(e=>Math.sin(e)))},Md={kernelName:un,backendName:"cpu",kernelFunc:xl(un,(e=>Math.sinh(e)))},Ld=Math.log(1.1920928955078125e-7)+2,Bd={kernelName:dn,backendName:"cpu",kernelFunc:xl(dn,(e=>{const t=e>-Ld,n=e<Ld,s=Math.exp(e);let a;return a=n?s:t?e:Math.log(1+s),a}))};const Pd={kernelName:mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:r,paddings:o}=s;ji([a],"spaceToBatchND");const i=h(r),l=[[0,0]];l.push(...o);for(let e=1+r.length;e<a.shape.length;++e)l.push([0,0]);const u=md.kernelFunc({inputs:{x:a},backend:n,attrs:{paddings:l,constantValue:0}}),c=qo(u.shape,r,i,!1),d=Yo(c.length,r.length,!1),p=Zo(u.shape,r,i,!1),f=lc({inputs:{x:u},backend:n,attrs:{shape:c}}),m=ru({inputs:{x:f},backend:n,attrs:{perm:d}}),g=lc({inputs:{x:m},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};const zd={kernelName:bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:a,denseShape:r,defaultValue:o}=t;if(1!==r.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${r.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==a.shape.length)throw new Error(`Values must be a vector, saw:\n        ${a.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,u=n.data.get(r.dataId).values,c=n.data.get(o.dataId).values[0],[h,d,p,f,m]=Tu(i,s.shape,s.dtype,l,a.dtype,u,c);return[n.makeTensorInfo(d,s.dtype,h),n.makeTensorInfo([d[0]],a.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};const Wd={kernelName:yn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:a,newShape:r}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==a.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${a.shape}`);if(1!==r.shape.length)throw new Error(`Target shape should be a vector but received shape ${r.shape}`);const o=Array.from(n.data.get(a.dataId).values),i=n.data.get(s.dataId).values,l=Array.from(n.data.get(r.dataId).values),[u,c,h]=Eu(i,s.shape,s.dtype,o,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],r.dtype,new Int32Array(h))]}};const Vd={kernelName:vn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:a,segmentIds:r}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${a.shape}`);if(1!==r.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${r.shape}`);if(a.shape[0]!==r.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(s.dataId).values,i=n.data.get(a.dataId).values,l=n.data.get(r.dataId).values,[u,c]=Ru(o,s.shape,s.dtype,i,l,!0);return n.makeTensorInfo(c,s.dtype,u)}};const Ud={kernelName:kn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:a,segmentIds:r}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${a.shape}`);if(1!==r.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${r.shape}`);if(a.shape[0]!==r.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(s.dataId).values,i=n.data.get(a.dataId).values,l=n.data.get(r.dataId).values,[u,c]=Ru(o,s.shape,s.dtype,i,l);return n.makeTensorInfo(c,s.dtype,u)}};const Gd={kernelName:wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:a,sparseValues:r,defaultValue:o}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=xr(0,a,i),p=!1,f=n.bufferSync(a);let m;switch(r.dtype){case"bool":m=ku(f,n.bufferSync(r),i,d,c,u,l,h,Boolean(n.data.get(o.dataId).values[0]),p);break;case"float32":m=ku(f,n.bufferSync(r),i,d,c,u,l,h,n.data.get(o.dataId).values[0],p);break;case"int32":m=ku(f,n.bufferSync(r),i,d,c,u,l,h,n.data.get(o.dataId).values[0],p);break;case"string":m=ku(f,n.bufferSync(r),i,d,c,u,l,h,Vs(n.data.get(o.dataId).values[0]),p);break;default:throw new Error(`Unsupported type ${r.dtype}`)}return n.makeTensorInfo(i,m.dtype,m.values)}};const Hd={kernelName:gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{numOrSizeSplits:r,axis:o}=s,i=b(o,a.shape)[0],l=Ci(a,r,i),u=new Array(a.shape.length).fill(0),c=a.shape.slice();return l.map((e=>{const t=[...c];t[i]=e;const s=Cu({inputs:{x:a},backend:n,attrs:{begin:u,size:t}});return u[i]+=e,s}))}},jd={kernelName:Nn,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;ji(n,"square");const a=s.data.get(n.dataId).values,r=new Float32Array(a.length);for(let e=0;e<a.length;++e){const t=a[e];r[e]=t*t}return{dataId:s.write(r,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Xd=xl(zn,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),Kd={kernelName:zn,backendName:"cpu",kernelFunc:Xd};const qd={kernelName:Sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:r,end:o,strides:i,beginMask:u,endMask:c,ellipsisMask:h,newAxisMask:d,shrinkAxisMask:p}=s;ji(a,"stridedSlice");const{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:x,isSimpleSlice:b,begin:y,end:v,strides:k}=Fr(a.shape,r,o,i,u,c,h,d,p);let w;if(g)w=lc({inputs:{x:a},backend:n,attrs:{shape:m}});else if(x||b){l(a.shape.length>=1,(()=>`Input must have rank at least 1, got: ${a.shape.length}`));const e=kr(y,v,k),t=Cu({inputs:{x:a},backend:n,attrs:{begin:y,size:e}});w=lc({inputs:{x:t},backend:n,attrs:{shape:m}}),n.disposeIntermediateTensorInfo(t)}else{const e=Du(f,n.bufferSync(a),k,y);w=n.makeTensorInfo(m,e.dtype,e.values)}return w}};const Yd={kernelName:Cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:a,nGramWidths:r,leftPad:o,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=n.data.get(c.dataId).values,p=n.data.get(h.dataId).values,[f,m]=Lu(d,p,a,r,o,i,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};const Zd={kernelName:$n,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:a}=s,{input:r,delimiter:o}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(1!==r.shape.length)throw new Error(`Input must be a vector, got shape: ${r.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.data.get(r.dataId).values,l=n.data.get(o.dataId).values[0],[u,c,h]=Pu(i,l,a),d=c.length;return[n.makeTensorInfo([d,2],"int32",u),n.makeTensorInfo([d],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};const Jd={kernelName:Tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:a}=s,{input:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const o=zu(n.data.get(r.dataId).values,a);return n.makeTensorInfo(r.shape,"int32",o)}},Qd={kernelName:Rn,backendName:"cpu",kernelFunc:xl(Rn,(e=>Math.tan(e)))},ep=xl(An,(e=>Math.tanh(e)));const tp={kernelName:_n,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reps:r}=s;ji(a,"tile");const o=Gu(n.bufferSync(a),r);return n.makeTensorInfo(o.shape,o.dtype,o.values)}};const np={kernelName:Fn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{k:r,sorted:o}=s;ji(a,"topk");const i=n.data.get(a.dataId).values,[l,u]=Xu(i,a.shape,a.dtype,r,o);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}};const sp={kernelName:On,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{image:a,transforms:r}=t,{interpolation:o,fillMode:i,fillValue:l,outputShape:u}=n,[c,d,p,f]=a.shape,[m,g]=null!=u?u:[d,p],x=[c,m,g,f],b=E(a.shape),y=b[0],k=b[1],w=b[2],I=E(x),N=I[0],S=I[1],C=I[2],$=v(a.dtype,h(x));$.fill(l);const T=s.data.get(a.dataId).values,R=s.data.get(r.dataId).values;for(let e=0;e<c;++e){const t=1===r.shape[0]?R:R.subarray(8*e,8*e+8);for(let n=0;n<m;++n)for(let s=0;s<g;++s)for(let a=0;a<f;++a){let r;const u=t[6]*s+t[7]*n+1;if(0===u)continue;const c=(t[0]*s+t[1]*n+t[2])/u,h=(t[3]*s+t[4]*n+t[5])/u,f=ap(c,p,i),m=ap(h,d,i);switch(o){case"nearest":r=op(T,d,p,y,k,w,e,m,f,a,l);break;case"bilinear":r=ip(T,d,p,y,k,w,e,m,f,a,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`)}$[e*N+n*S+s*C+a]=r}return s.makeTensorInfo(x,a.dtype,$)}return{dataId:s.write($,x,a.dtype),shape:a.shape,dtype:a.dtype}}};function ap(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return r(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return r(0,n,t-1)}(e,t);case"nearest":return function(e,t){return r(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function rp(e,t,n,s,a,r,o,i,l,u,c){return 0<=i&&i<t&&0<=l&&l<n?e[o*s+i*a+l*r+u]:c}function op(e,t,n,s,a,r,o,i,l,u,c){return rp(e,t,n,s,a,r,o,Math.round(i),Math.round(l),u,c)}function ip(e,t,n,s,a,r,o,i,l,u,c){const h=Math.floor(i),d=Math.floor(l),p=h+1,f=d+1;return(p-i)*((f-l)*rp(e,t,n,s,a,r,o,h,d,u,c)+(l-d)*rp(e,t,n,s,a,r,o,h,f,u,c))+(i-h)*((f-l)*rp(e,t,n,s,a,r,o,p,d,u,c)+(l-d)*rp(e,t,n,s,a,r,o,p,f,u,c))}const lp={kernelName:Mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:a}=n,{x:r}=t;ji(r,"unique");const o=s.data.get(r.dataId).values,{outputValues:i,outputShape:l,indices:u}=Ku(o,a,r.shape,r.dtype);return[s.makeTensorInfo(l,r.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}};const up={kernelName:Ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:a}=t;let{axis:r}=s;r<0&&(r+=a.shape.length);const o=a.shape.length,i=a.shape[r],l=new Array(o-1);let u=0;for(let e=0;e<o;e++)e!==r&&(l[u++]=a.shape[e]);const c=new Array(o).fill(0),h=a.shape.slice();h[r]=1;const d=new Array(i);for(let e=0;e<d.length;e++){c[r]=e;const t=Cu({inputs:{x:a},backend:n,attrs:{begin:c,size:h}});d[e]=lc({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return d}};const cp={kernelName:Bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,segmentIds:r}=t,{numSegments:o}=s;ji(a,"unsortedSegmentSum");const i=[],l=[],u=a.shape.length-r.shape.length;let c=r;for(let e=0;e<u;++e){const t=gh({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<o;++e){const t=Bs(e,"int32"),s=n.makeTensorInfo([],"int32",t),r=Il({inputs:{a:s,b:c},backend:n}),o=ol({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),u=Jl({inputs:{a:o,b:a},backend:n}),h=ch({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});i.push(h),l.push(s),l.push(r),l.push(o),l.push(u),l.push(h)}const h=pd({inputs:i,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},hp=[dc,Yi,pc,fc,pl,mc,gc,xc,bc,yc,vc,kc,wc,Ic,Nc,Tc,Ec,Rc,Ac,hc,_c,Fc,Oc,Dc,il,vl,Mc,Qi,Lc,Wc,Uc,Gc,Hc,jc,Xc,Kc,qc,Yc,Zc,Jc,Qc,eh,th,sh,ah,rh,oh,ih,lh,uh,dh,Zu,ph,Nl,mh,$l,xh,El,Ih,Sh,Ch,Al,$h,Th,Eh,Rh,Ah,Dl,Ll,nl,_h,Pc,Fh,Oh,Dh,Qu,Pl,Wl,Mh,Gl,Lh,Bh,Ph,zh,Wh,Vh,Gh,Xl,Hh,jh,Xh,Kh,qh,Yh,Zh,ql,Jh,Qh,nd,Ql,tu,ad,od,ld,su,ud,dd,fd,md,gd,nc,lu,xd,bd,yd,al,yh,vd,ac,oc,uc,kd,wd,Id,Nd,Sd,Cd,$d,vu,Td,Ad,_d,Fd,Nu,Od,Dd,Md,$u,td,Bd,Pd,zd,Wd,Vd,Ud,Gd,Hd,_u,jd,Ou,Kd,qd,Yd,Zd,Jd,Uu,hh,Qd,{kernelName:An,backendName:"cpu",kernelFunc:ep},tp,np,sp,ou,lp,up,cp,hd];for(const e of hp)Zn(e);const dp={},pp={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function fp(e,t){if(!(e in dp)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete dp[e]}),!1),V().getBool("SOFTWARE_WEBGL_ENABLED")&&(pp.failIfMajorPerformanceCaveat=!1);if(1===e)return n.getContext("webgl",pp)||n.getContext("experimental-webgl",pp);return n.getContext("webgl2",pp)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;dp[e]=n}const n=dp[e];return null==n||n.isContextLost()?(delete dp[e],fp(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),dp[e])}var mp,gp,xp;function bp(e,t){return[t,e]}function yp(e){const t=h(e);return f(Math.ceil(t/4))}function vp(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function kp(e,t){const n=e;let s,a,r,o,i,l,u,c,h,d;return 2===V().getNumber("WEBGL_VERSION")?(s=n.R32F,a=n.R16F,r=n.RGBA16F,o=n.RGBA32F,i=n.RED,u=4,c=1,h=n.HALF_FLOAT,d=n.FLOAT,l=n.RGBA8):(s=e.RGBA,a=e.RGBA,r=e.RGBA,o=n.RGBA,i=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,d=e.FLOAT,l=e.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:a,internalFormatPackedHalfFloat:r,internalFormatPackedFloat:o,textureFormatFloat:i,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:d}}function wp(e,t){const n=t();return V().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(mp||(mp={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(gp||(gp={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(xp||(xp={}));function Ip(e){return!!(V().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function Np(e,t){return Fp(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}const Sp=/ERROR: [0-9]+:([0-9]+):/g;function Cp(e,t){const n=Sp.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],a=e.split("\n"),r=a.length.toString().length+2,o=a.map(((e,t)=>m((t+1).toString(),r)+e));let i=0;for(let e=0;e<o.length;e++)i=Math.max(o[e].length,i);const l=o.slice(0,s-1),u=o.slice(s-1,s),c=o.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${m(u[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function $p(e,t){if(wp(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function Tp(e,t,n,s,a,r,o){const i=e.getAttribLocation(t,n);return-1!==i&&(wp(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),wp(e,(()=>e.vertexAttribPointer(i,a,e.FLOAT,!1,r,o))),wp(e,(()=>e.enableVertexAttribArray(i))),!0)}function Ep(e,t,n){!function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}(e,n),wp(e,(()=>e.activeTexture(e.TEXTURE0+n))),wp(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}function Rp(e,t,n){wp(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),wp(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function Ap(e,t){wp(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),wp(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function _p(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function Fp(e,t,n){const s=wp(e,(()=>t()));if(null==s)throw new Error(n);return s}function Op(e,t=2){return h(e.slice(0,e.length-t))}function Dp(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function Mp(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[Op(e),...Dp(e)]),t}function Lp(e){return e%2==0}function Bp(e,t){if(d(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],s=t.slice(-1)[0];if(n===s)return!0;if(Lp(n)&&Lp(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&Lp(e[0])&&Lp(t[0])}let Pp,zp;function Wp(e,t){return null!=e.getExtension(t)}function Vp(e){try{if(null!=fp(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function Up(e){if(0===e)return!1;const t=fp(e);if(1!==e){if(Wp(t,"EXT_color_buffer_float"))return Gp(t);const e="EXT_color_buffer_half_float";if(Wp(t,e)){const n=t.getExtension(e);return function(e,t){const n=kp(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s);const a=1,r=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,a,r,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const o=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,o),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const i=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(o),i}(t,n)}return!1}if(!Wp(t,"OES_texture_float"))return!1;if(!Wp(t,"WEBGL_color_buffer_float"))return!1;return Gp(t)}function Gp(e){const t=kp(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),a}function Hp(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&l("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const jp=V();function Xp(){let e,t,n,s,a,r,o,i,l,u;return 2===V().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",a="texture",r="outputColor",o="out vec4 outputColor;",i=V().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",a="texture2D",r="gl_FragColor",o="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:a,output:r,defineOutput:o,defineSpecialNaN:i,defineSpecialInf:l,defineRound:u}}function Kp(e,t,n="index"){const s=E(t);return s.map(((t,a)=>`${`int ${e[a]} = ${n} / ${t}`}; ${a===s.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${t}`:`index -= ${e[a]} * ${t}`};`)).join("")}function qp(e,t,n="index"){const s=E(t);return s.map(((t,a)=>`${`int ${e[a]} = ${n} / outShapeStrides[${a}]`}; ${a===s.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * outShapeStrides[${a}]`:`index -= ${e[a]} * outShapeStrides[${a}]`};`)).join("")}function Yp(e,t,n="index"){const s=function(e,t){const n=e.length,s=e.map((e=>`${t}[${e}]`)),a=new Array(n-1);a[n-2]=s[n-1];for(let e=n-3;e>=0;--e)a[e]=`(${a[e+1]} * ${s[e+1]})`;return a}(e.map(((e,t)=>t)),t);return s.map(((t,a)=>`${`int ${e[a]} = ${n} / ${s[a]}`}; ${a===s.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${s[a]}`:`index -= ${e[a]} * ${s[a]}`};`)).join("")}function Zp(e){const t=E(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}jp.registerFlag("HAS_WEBGL",(()=>jp.getNumber("WEBGL_VERSION")>0)),jp.registerFlag("WEBGL_VERSION",(()=>Vp(2)?2:Vp(1)?1:0)),jp.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),jp.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===jp.get("WEBGL_VERSION"))),jp.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),jp.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),jp.registerFlag("WEBGL_PACK",(()=>jp.getBool("HAS_WEBGL"))),jp.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>jp.getBool("WEBGL_PACK"))),jp.registerFlag("WEBGL_PACK_CLIP",(()=>jp.getBool("WEBGL_PACK"))),jp.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>jp.getBool("WEBGL_PACK"))),jp.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>jp.getBool("WEBGL_PACK"))),jp.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>jp.getBool("WEBGL_PACK"))),jp.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>jp.getBool("WEBGL_PACK"))),jp.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>jp.getBool("WEBGL_PACK"))),jp.registerFlag("WEBGL_PACK_REDUCE",(()=>jp.getBool("WEBGL_PACK"))),jp.registerFlag("WEBGL_LAZILY_UNPACK",(()=>jp.getBool("WEBGL_PACK"))),jp.registerFlag("WEBGL_CONV_IM2COL",(()=>jp.getBool("WEBGL_PACK"))),jp.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==Pp){const t=fp(e);Pp=t.getParameter(t.MAX_TEXTURE_SIZE)}return Pp}(jp.getNumber("WEBGL_VERSION")))),jp.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==zp){const t=fp(e);zp=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,zp)}(jp.getNumber("WEBGL_VERSION")))),jp.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=jp.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=fp(e);return t=Wp(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:Wp(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),jp.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>jp.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!ka())),jp.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=fp(e);if(1===e){if(!Wp(t,"OES_texture_float"))return!1}else if(!Wp(t,"EXT_color_buffer_float"))return!1;return Gp(t)}(jp.getNumber("WEBGL_VERSION")))),jp.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!jp.getBool("WEBGL_FORCE_F16_TEXTURES")&&jp.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),jp.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>Up(jp.getNumber("WEBGL_VERSION")))),jp.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=jp.getNumber("WEBGL_VERSION"))&&null!=fp(e).fenceSync;var e})),jp.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>jp.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),jp.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),jp.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>ka()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),jp.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),jp.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),jp.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),jp.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),jp.registerFlag("WEBGL_EXP_CONV",(()=>!1)),jp.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>jp.getBool("IS_TEST"))),jp.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",(()=>1/0)),jp.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",(()=>!1)),jp.registerFlag("WEBGL2_ISNAN_CUSTOM",(()=>!1));const Jp="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:Qp}=Hi;function ef(e,t,n){const s=[];if(e.forEach((e=>{const t=h(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=df(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:s.push(`uniform int ${e.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${e.name}Shape;`)}s.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{s.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const a=s.join("\n"),r=e.map((e=>function(e,t,n=!1,s){let a="";a+=n?nf(e,s):tf(e,s);const r=e.shapeInfo.logicalShape,o=t.logicalShape;r.length<=o.length&&(a+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",r=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,i=Qp(e.shapeInfo.logicalShape,t.logicalShape),l=hf(o),u=o-r;let c;const d=["x","y","z","w","u","v"];c=0===r?"":o<2&&i.length>=1?"coords = 0;":i.map((e=>`coords.${d[e+u]} = 0;`)).join("\n");let p="";p=o<2&&r>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+u]}`)).join(", ");let f="return outputValue;";const m=1===h(e.shapeInfo.logicalShape),g=h(t.logicalShape),x=1===g;if(1!==r||m||x){if(m&&!x)f=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const e=r-2,t=r-1;i.indexOf(e)>-1&&i.indexOf(t)>-1?f="return vec4(outputValue.x);":i.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${a}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${p});\n      ${f}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",r=t.texShape,o=e.shapeInfo.texShape,i=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&i===l&&null==e.shapeInfo.flatOffset&&d(o,r))return`\n      float ${a}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=hf(l),c=Qp(e.shapeInfo.logicalShape,t.logicalShape),h=l-i;let p;const f=["x","y","z","w","u","v"];p=0===i?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${f[e+h]} = 0;`)).join("\n");let m="";m=l<2&&i>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${f[t+h]}`)).join(", ");return`\n    float ${a}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${s}(${m});\n    }\n  `}(e,t));return a}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),o=t.texShape,i=Xp(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(i);let u,c,p=function(e){const t=`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${sf}\n    ${af}\n    ${rf}\n  `;return t}(i);t.isPacked?(u=function(e,t,n){switch(e.length){case 0:return lf();case 1:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===s[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `;if(1===s[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `;if(n)return"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ";return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(d(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const a=Math.ceil(e[1]/2);if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ";return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[2]/2),r=a*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[e.length-1]/2),r=a*Math.ceil(e[e.length-2]/2);let o=r,i="",l="b, r, c";for(let t=2;t<e.length-1;t++)o*=e[e.length-t-1],i=`\n      int b${t} = index / ${o};\n      index -= b${t} * ${o};\n    `+i,l=`b${t}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(i)):(u=function(e,t,n){switch(e.length){case 0:return lf();case 1:return function(e,t,n){if(1===t[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;if(n)return"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ";return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){if(d(e,t))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ";return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n){return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${qp(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`}const s=Kp(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n){return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${qp(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `}const s=Kp(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=Kp(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=Kp(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(i)),n.packedInputs&&(p+=of);return[p,l,c,a,u,r,n.userCode].join("\n")}function tf(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${s}() {return ${n};}`;const[a,r]=e.shapeInfo.texShape;if(1===a&&1===r)return`\n      float ${s}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=uf(n);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[i,l]=e.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${i}, ${l}, ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${cf(e)}\n      }\n    `;const a=e.shapeInfo.texShape,r=a[0],o=a[1];if(1===o&&1===r)return`\n      float ${s}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=uf(n);if(1===o)return t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${r}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(1===r)return t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${o}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(t)return`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${r}, ${o}, index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=e.shapeInfo.texShape;if(null!=r&&d(n,r)){if(t)return`\n      float ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `;const e=r[0];return`\n    float ${a}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${r[1]}.0, ${e}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `}const{newShape:o,keptDims:i}=y(n),l=o;if(l.length<n.length){const n=["row","col"];return`\n      ${tf(pf(e,l),t)}\n      float ${a}(int row, int col) {\n        return ${a}(${ff(n,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${cf(e)}\n      }\n    `;const u=r[0],c=r[1],h=uf(s);if(1===c)return t?`\n      float ${a}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;if(1===u)return t?`\n      float ${a}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `;if(t)return`\n      float ${a}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `;return`\n  float ${a}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=n[1]*n[2],o=n[2],{newShape:i,keptDims:l}=y(n),u=i;if(u.length<n.length){const n=["row","col","depth"];return`\n        ${tf(pf(e,u),t)}\n        float ${a}(int row, int col, int depth) {\n          return ${a}(${ff(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${r}, ${o}, 1)));\n        ${cf(e)}\n      }\n    `;const c=e.shapeInfo.texShape,h=c[0],d=c[1],p=e.shapeInfo.flatOffset;if(d===r&&null==p)return t?`\n      float ${a}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${a}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${o}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(d===o&&null==p)return t?`\n      float ${a}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const f=uf(s);if(t)return`\n    float ${a}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `;return`\n      float ${a}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r} + col * ${o} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${d}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=n[3],o=n[2]*r,i=n[1]*o,{newShape:l,keptDims:u}=y(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${tf(pf(e,l),t)}\n      float ${a}(int row, int col, int depth, int depth2) {\n        return ${a}(${ff(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${o}, ${r}, 1)));\n        ${cf(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],p=h[1],f=`int stride2 = ${s}Shape[3];`,m=`int stride1 = ${s}Shape[2] * stride2;`,g=`int stride0 = ${s}Shape[1] * stride1;`;if(p===i&&null==c)return t?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${o}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(p===r&&null==c)return t?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const x=uf(s);if(t)return`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${x});\n      return sampleTexture(${s}, uv);\n    }\n  `;return`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} +\n          depth * ${r} + depth2;\n      vec2 uv = uvFromFlat(${d}, ${p}, index + ${x});\n      return sampleTexture(${s}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[4],r=t[3]*a,o=t[2]*r,i=t[1]*o,{newShape:l,keptDims:u}=y(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${tf(pf(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${ff(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${o}, ${r}, ${a})) +\n          depth3;\n        ${cf(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],p=h[1];if(p===i&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${r}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===a&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=uf(n);return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} + depth * ${r} +\n          depth2 * ${a} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:a,keptDims:r}=y(t);if(a.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${tf(pf(e,a))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${ff(t,r)});\n      }\n    `}const o=t[5],i=t[4]*o,l=t[3]*i,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${cf(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${i}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===o&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=uf(n);return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${i} + depth3 * ${o} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function nf(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),s=Xp();return`\n    vec4 ${n}() {\n      return ${s.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,r=Xp();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${r.texture2D}(${n}, uv);\n    }\n  `;const o=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${o[0]}, ${o[1]}, index);\n      return ${r.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=e.shapeInfo.texShape,o=r[0],i=r[1],l=Xp();if(null!=r&&d(n,r))return t?`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${o}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${a}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],c=Math.ceil(n[1]/2);return`\n    vec4 ${a}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=e.shapeInfo.texShape,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];if(1===n[0]){const s=[1,2],r=["b","row","col"];return`\n        ${nf(pf(e,n.slice(1)),t)}\n        vec4 ${a}(int b, int row, int col) {\n          return ${a}(${ff(r,s)});\n        }\n      `}const i=Xp();if(t)return`\n    vec4 ${a}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `;const l=o[0],u=o[1],c=Math.ceil(n[2]/2),h=c*Math.ceil(n[1]/2);return`\n    vec4 ${a}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${h}, ${c}, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=Xp();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${a.texture2D}(${n}, uv);\n    }\n  `;const r=e.shapeInfo.logicalShape,o=r.length,i=e.shapeInfo.texShape,l=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],u=l[0],c=l[1],h=Math.ceil(r[o-1]/2);let d=h*Math.ceil(r[o-2]/2),p="int b, int row, int col",f=`b * ${d} + (row / 2) * ${h} + (col / 2)`;for(let e=2;e<o-1;e++)p=`int b${e}, `+p,d*=r[o-e-1],f=`b${e} * ${d} + `+f;return`\n    vec4 ${s}(${p}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const sf="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",af="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",rf="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",of="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function lf(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function uf(e){return`offset${e}`}function cf(e){const t=e.name,n=h(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function hf(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function df(e,t,n){const{newShape:s,keptDims:a}=y(t),r=t.length,o=e&&3===r&&1===t[0],i=o?t.slice(1):s,l=!e&&r>1&&!d(t,n)&&s.length<r||o;return{useSqueezeShape:l,uniformShape:l?i:t,keptDims:a}}function pf(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function ff(e,t){return t.map((t=>e[t])).join(", ")}function mf(e,t,n,s){const a=n.map(((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}})),r=a.map((e=>e.shapeInfo)),o={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},i=ef(a,o,t),l=function(e,t){const n=Fp(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(wp(e,(()=>e.shaderSource(n,t))),wp(e,(()=>e.compileShader(n))),V().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw Cp(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(e.gl,i),u=e.createProgram(l);return V().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:r,outShapeInfo:o,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:r,outShapeInfo:o},gf(e,t,u))}function gf(e,t,n){const s={},a={},r={},o=[];let i,l,u,c=null,h=null;h=e.getUniformLocation(n,"NAN",!1),1===V().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(n,"INFINITY",!1));const d=!1;for(let o=0;o<t.variableNames.length;o++){const i=t.variableNames[o];s[i]=e.getUniformLocation(n,i,d),s[`offset${i}`]=e.getUniformLocation(n,`offset${i}`,d),t.enableShapeUniforms&&(a[`${i}Shape`]=e.getUniformLocation(n,`${i}Shape`,d),r[`${i}TexShape`]=e.getUniformLocation(n,`${i}TexShape`,d))}return t.enableShapeUniforms&&(i=e.getUniformLocation(n,"outShape",d),u=e.getUniformLocation(n,"outShapeStrides",d),l=e.getUniformLocation(n,"outTexShape",d)),t.customUniforms&&t.customUniforms.forEach(((t,s)=>{o[s]=e.getUniformLocation(n,t.name,d)})),{uniformLocations:s,customUniformLocations:o,infLoc:c,nanLoc:h,inShapesLocations:a,inTexShapesLocations:r,outShapeLocation:i,outShapeStridesLocation:u,outTexShapeLocation:l}}function xf(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,a=t[n],r=a.shape;if(!d(s,r))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${r} must match`);if(e.isUniform&&a.isUniform)return;const o=e.texShape,i=a.isUniform?null:a.texData.texShape;if(!d(o,i))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${i} must match`)}))}function bf(e){return V().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class yf{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=mp.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=Xp();this.outputShape=e,this.enableShapeUniforms=bf(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?qp(["r","c","d"],e):Kp(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class vf{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=mp.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=Xp();this.outputShape=e,this.enableShapeUniforms=bf(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?qp(["r","c","d"],e):Kp(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class kf{constructor(e){this.variableNames=["A"],this.outTexUsage=gp.DOWNLOAD;const t=Xp();this.outputShape=e,this.userCode=`\n      ${Jp}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class wf{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=gp.DOWNLOAD;const t=Xp();this.outputShape=e,this.userCode=`\n      ${Jp}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class If{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=Xp();this.outputShape=e,this.enableShapeUniforms=bf(this.outputShape.length);let s="result";t&&(s="floor(result * 255. + 0.5)"),this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Zp(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${n.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${n.output} = vec4(${s}, 0., 0., 0.);\n      }\n    `}}class Nf{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=Xp();this.outputShape=e,this.enableShapeUniforms=bf(this.outputShape.length);let s="",a="result";t&&(a="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let a=0;a<=1;a++){const r=2*t+a;s+=`\n          localCoords = coords;\n          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${a};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${r}] = values[0];\n            } else if (offset == 1) {\n              result[${r}] = values[1];\n            } else if (offset == 2) {\n              result[${r}] = values[2];\n            } else {\n              result[${r}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Zp(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${s}\n\n          ${n.output} = ${a};\n        }\n    `}}function Sf(e){const t=Xp();return function(e,t){const n=Fp(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(wp(e,(()=>e.shaderSource(n,t))),wp(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function Cf(e){return function(e,t){const n=Fp(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return wp(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),wp(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function $f(e){return function(e,t){const n=Fp(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return wp(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),wp(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function Tf(e,t,n,s,a,r){!function(e,t){const n=V().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const o=function(e){return Fp(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),i=e.TEXTURE_2D;return wp(e,(()=>e.bindTexture(i,o))),wp(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),wp(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),wp(e,(()=>e.texParameteri(i,e.TEXTURE_MIN_FILTER,e.NEAREST))),wp(e,(()=>e.texParameteri(i,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===V().getNumber("WEBGL_VERSION")?wp(e,(()=>e.texImage2D(i,0,s,t,n,0,a,r,null))):wp(e,(()=>e.texStorage2D(i,1,s,t,n))),wp(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:o,texShape:[n,t]}}function Ef(e){return e.internalFormatFloat}function Rf(e){return e.internalFormatHalfFloat}function Af(e){return e.downloadTextureFormat}function _f(e){return e.internalFormatPackedFloat}function Ff(e){return e.internalFormatPackedHalfFloat}function Of(e,t,n,s,a,r,o,i){const l=e,u=new Float32Array(function(e,t){const[n,s]=vp(e,t);return n*s*4}(r,o));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}class Df{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=V().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){dp[e]=t}(t,e)):this.gl=fp(t);let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===V().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=Np(this.gl,e),Wp(this.gl,t))this.textureHalfFloatExtension=Np(this.gl,t);else if(V().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),Wp(this.gl,s))this.colorBufferHalfFloatExtension=Np(this.gl,s);else if(V().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",Wp(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!Wp(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=Cf(this.gl),this.indexBuffer=$f(this.gl),this.framebuffer=function(e){return Fp(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=kp(this.gl,this.textureHalfFloatExtension)}get debug(){return V().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;wp(e,(()=>e.finish())),wp(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),wp(e,(()=>e.deleteFramebuffer(this.framebuffer))),wp(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),wp(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),wp(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=bp(t,n);return Tf(e,a,r,Ef(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=bp(t,n);return Tf(e,a,r,Rf(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=bp(t,n);return Tf(e,a,r,Af(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){wp(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===V().getNumber("WEBGL_VERSION")?wp(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):wp(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===V().getNumber("WEBGL_VERSION")?wp(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):wp(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),wp(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,a,r){let o,i,l;wp(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),a instanceof Uint8Array?(o=new Uint8Array(n*s*4),i=e.UNSIGNED_BYTE,l=e.RGBA):(o=new Float32Array(n*s*4),i=e.FLOAT,l=r.internalFormatPackedFloat),o.set(a),2===V().getNumber("WEBGL_VERSION")?wp(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,s,e.RGBA,i,o))):wp(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,i,o))),wp(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=vp(t,n);return Tf(e,a,r,Ff(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=vp(t,n);return Tf(e,a,r,_f(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(Ap(this.gl,this.framebuffer),this.outputTexture=null),wp(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,s){const[a,r]=bp(t,n),o=new Uint8Array(t*n*4);return wp(e,(()=>e.readPixels(0,0,a,r,s.downloadTextureFormat,e.UNSIGNED_BYTE,o))),new Float32Array(o.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,a,r){return Of(this.gl,e,0,0,0,a,r,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,a=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,a),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),a}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const a=e.createBuffer();wp(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,a)));const r=16*t*n;return wp(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,r,e.STREAM_READ))),wp(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),wp(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),a}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(V().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,a=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(a,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=a}else V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const s=new Float32Array(t*n*4);return wp(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=Sf(t));const n=function(e){return Fp(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return wp(t,(()=>t.attachShader(n,this.vertexShader))),wp(t,(()=>t.attachShader(n,e))),function(e,t){if(wp(e,(()=>e.linkProgram(t))),!V().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n),this.debug&&$p(t,n),this.vertexAttrsAreBound||(this.setProgram(n),this.vertexAttrsAreBound=function(e,t,n){return wp(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),Tp(e,t,"clipSpacePos",n,3,20,0)&&Tp(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),n}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&wp(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&$p(this.gl,this.program),wp(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return Fp(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),wp(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(e,t,n,s){wp(e,(()=>Ep(e,t,s))),wp(e,(()=>e.uniform1i(n,s)))}(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,a]=vp(t,n);this.setOutputMatrixTextureDriver(e,s,a)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&$p(this.gl,this.program),_p(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),wp(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),wp(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Np(this.gl,2===V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await g((()=>this.disposed||this.isQueryAvailable(e,V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in V().platform&&(n=V().platform.setTimeoutCustom.bind(V().platform)),g((()=>(this.pollItems(),0===this.itemsToPoll.length)),(()=>0),null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),Rp(this.gl,e,this.framebuffer),this.debug&&_p(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(Rp(this.gl,this.outputTexture,this.framebuffer),this.debug&&_p(this.gl)):Ap(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;Rp(s,e,this.framebuffer),this.debug&&_p(s),this.outputTexture=e,wp(s,(()=>s.viewport(0,0,t,n))),wp(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),wp(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:Mf,bincountImpl:Lf,bincountReduceImpl:Bf,castImpl:Pf,ceilImpl:zf,concatImpl:Wf,equalImpl:Vf,expImpl:Uf,expm1Impl:Gf,floorImpl:Hf,gatherNdImpl:jf,gatherV2Impl:Xf,greaterImpl:Kf,greaterEqualImpl:qf,lessImpl:Yf,lessEqualImpl:Zf,linSpaceImpl:Jf,logImpl:Qf,maxImpl:em,maximumImpl:tm,minimumImpl:nm,multiplyImpl:sm,negImpl:am,notEqualImpl:rm,prodImpl:om,raggedGatherImpl:im,raggedTensorToTensorImpl:lm,rangeImpl:um,rsqrtImpl:cm,scatterImpl:hm,sigmoidImpl:dm,simpleAbsImpl:pm,sliceImpl:fm,sparseFillEmptyRowsImpl:mm,sparseReshapeImpl:gm,sparseSegmentReductionImpl:xm,sqrtImpl:bm,stridedSliceImpl:ym,stringNGramsImpl:vm,stringSplitImpl:km,stringToHashBucketFastImpl:wm,subImpl:Im,tileImpl:Nm,topKImpl:Sm,transposeImpl:Cm,uniqueImpl:$m}=qu;function Tm(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function Em(e,t){return 1===t?[e]:Tm(e,t)}class Rm{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=bf(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=Em("rc",this.rank),t=hf(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),a=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${s}\n\n            setOutput(vec4(${a}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let s=0;s<=1;s++){let a=`${0===n?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let t=2;t<this.rank;t++)a=`${e[e.length-1-t]},`+a;t.push(a)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],s=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${s};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);if(1===this.rank){return`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class Am{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=bf(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s,a;this.userCode=`\n      ${s=t,a=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${a?Yp(["r","c","d"],"inputShape"):Kp(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Zp(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class _m{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const s=Om(t,n),a=Dm(e,s,n);a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]);const r=Fm(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=r,this.log();const e=this.freeTextures[a].shift();return this.usedTextures[a].push(e),e}let o;return s===xp.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===xp.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===xp.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===xp.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===xp.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[a].push(o),this.numUsedTextures++,this._numBytesAllocated+=r,this.log(),o}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const a=Om(n,s),r=Dm(t,a,s);r in this.freeTextures||(this.freeTextures[r]=[]);const o=Fm(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,s),i=V().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==i&&this._numBytesAllocated>i?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=o):(this.freeTextures[r].push(e),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const l=this.usedTextures[r],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function Fm(e,t,n,s,a){const r=function(e,t){switch(e){case xp.PACKED_2X2_FLOAT32:return _f(t);case xp.PACKED_2X2_FLOAT16:return Ff(t);case xp.UNPACKED_FLOAT32:return Ef(t);case xp.UNPACKED_FLOAT16:return Rf(t);case xp.PACKED_4X1_UNSIGNED_BYTE:return Af(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let o;if(a){const[t,n]=vp(e[0],e[1]);o=t*n}else{const[t,n]=bp(e[0],e[1]);o=t*n}const i=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,r);return o*i}function Om(e,t){if(e===gp.UPLOAD)return xp.PACKED_2X2_FLOAT32;if(e===gp.RENDER||null==e)return function(e){return V().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?xp.PACKED_2X2_FLOAT32:xp.UNPACKED_FLOAT32:e?xp.PACKED_2X2_FLOAT16:xp.UNPACKED_FLOAT16}(t);if(e===gp.DOWNLOAD||e===gp.PIXELS)return xp.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function Dm(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class Mm{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=bf(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Lm="if (isnan(x)) return x;",Bm="return x;",Pm="return abs(x);",zm="return (x >= 0.0) ? x : (exp(x) - 1.0);",Wm=Lm+"\n  return (x < 0.0) ? 0.0 : x;\n",Vm=Lm+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",Um="return x;",Gm="return 1.0 / (1.0 + exp(-1.0 * x));",Hm="return x;",jm="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",Xm="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Km="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",qm="return 1.0 / (1.0 + exp(-1.0 * x));";class Ym{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=bf(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class Zm{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=bf(this.outputShape.length);const t=e.length,n=Em("rc",t),s=hf(t),a=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),r=n.slice(-2),o=t<=1?"rc":`vec2(${r.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${a});\n\n        setOutput(getChannel(packedInput, ${o}));\n      }\n    `}}const Jm=To,Qm={};const eg=V().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class tg extends s{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!V().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof Df)t=e;else{const n=fp(V().getNumber("WEBGL_VERSION"),e);t=new Df(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=fp(V().getNumber("WEBGL_VERSION"));t=new Df(e),this.binaryCache=((s=V().getNumber("WEBGL_VERSION"))in Qm||(Qm[s]={}),Qm[s]),this.gpgpuCreatedLocally=!0}var s;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new _m(this.gpgpu),this.numMBBeforeWarning=null==V().global.screen?1024:V().global.screen.height*V().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new n(this,ur())}nextDataId(){return tg.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if((V().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||V().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:gp.UPLOAD,refCount:1}),s}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,s,a){if(V().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:gp.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:a,slice:r,shape:o,isPacked:i}=t;if(null!=r){let t;t=i?new Ym(o,Um):new Mm(o,Um);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:s}],s),a=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=zs()),"complex64"===s){c=li(this.readSync(a.real.dataId),this.readSync(a.imag.dataId))}else c=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=zs()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:s,slice:a,dtype:r,complexTensorInfos:o,isPacked:i}=t;if(null!=a){let t;t=i?new Ym(s,Um):new Mm(s,Um);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:r}],r),a=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if(V().getBool("DEBUG")&&!V().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===V().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==r&&V().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...yp(s))}if(this.pendingRead.set(e,[]),"complex64"!==r&&await this.gpgpu.createAndWaitForFence(),"complex64"===r){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]);u=li(e[0],e[1])}else if(null==c)u=this.getValuesFromTexture(e);else{const e=h(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=c){const e=this.gpgpu.gl;wp(e,(()=>e.deleteBuffer(c)))}const d=this.convertAndCacheOnCPU(e,u),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach((e=>e(d))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&ur().removeDataId(e,this),this.pendingDeletes--),d}readToGPU(e,t={}){const n=this.texData.get(e),{values:s,shape:a,slice:r,dtype:o,isPacked:i,texture:l}=n;if("complex64"===o)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=r){let n;n=i?new Ym(a,Um):new Mm(a,Um);const s=this.runWebGLProgram(n,[{dataId:e,shape:a,dtype:o}],o),r=this.readToGPU(s,t);return this.disposeIntermediateTensorInfo(s),r}if(null==l)throw null!=s?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const u=this.decode(e,t.customTexShape),c=ur().makeTensorFromTensorInfo(u),h=this.texData.get(u.dataId);return Object.assign({tensorRef:c},h.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>Vs(e)));return or(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return or(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!Ip(n)){if(V().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),a=h(t);if(V().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),r=this.gpgpu.downloadMatrixFromPackedTexture(s.texture.texture,...yp(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(n),r}const r=V().getBool("WEBGL_PACK")&&!0===s,o=r?Mp(t):t,i=r?new wf(o):new kf(o),l=this.runWebGLProgram(i,[{shape:o,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const a=c(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),r=c(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,s&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(a);o.kernelMs=function(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}(e),o.getExtraProfileInfo=()=>e.map(((e,t)=>({name:r[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:zs(),endMs:null}}endTimer(e){return V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=zs(),e)}async getQueryTime(e){if(V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:a,isPacked:r,slice:o}=this.texData.get(e),i=o&&o.origDataId||e,l=this.dataRefCount.get(i);l>1?this.dataRefCount.set(i,l-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,a,r)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=eg){return V().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&h(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){Hn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return Jm(e.shape,t)}packedUnaryOp(e,t,n){const s=new Ym(e.shape,t),a=this.compileAndRun(s,[e],n);return ur().makeTensorFromTensorInfo(a)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=pm(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(V().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Pm,e.dtype);const t=new Mm(e.shape,Pm),n=this.compileAndRun(t,[e]);return ur().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&S(n[0])){const a=n.map((e=>Ws(e)));s=this.write(a,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){return ur().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new Zm(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new Rm(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[Op(e.shape),...Dp(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},a=[Op(t),...Dp(t)],r=new Am(a,n),o=[n],i=this.runWebGLProgram(r,[s],e.dtype,o,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:s,shape:a,dtype:r}=n;if(null!=t){l(h(a)<=t[0]*t[1]*4,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const o=Mp(a);let i;i=s?new vf(o):new yf(o);const u=[null!=t?t:yp(o)];return{dtype:r,shape:a,dataId:this.runWebGLProgram(i,[{shape:o,dtype:r,dataId:e}],r,u,!0,t).dataId}}runWebGLProgram(e,t,n,s,a=!1,r){const o=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(o.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===mp.DENSE){const t=null!=r?r:yp(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===h(o.shape))return i.values=v(o.dtype,0),o;const l=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&h(t.shape)<=V().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!Bp(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),l.push(t),n=this.texData.get(t.dataId),e.shape=s}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(o.dataId);const c={shape:o.shape,texData:i,isUniform:!1},p=function(e,t,n){let s="";t.concat(n).forEach((t=>{const a=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const r=t.texData.texShape,{useSqueezeShape:o,uniformShape:i,keptDims:l}=df(e.packedInputs,t.shape,r);let u="",c="",p="";if(1===i.length&&e.packedInputs){const e=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==i.length||e.packedInputs){if(i.length>2&&!e.packedInputs){const e=E(i);p=`${e[0]===r[1]}_${e[e.length-1]===r[1]}`}}else c=`${i[0]>1}_${i[1]>1}`;const f=t.shape.length,m=2===i.length&&d(t.shape,r),g=1===h(t.shape),x=dr(t.shape,n.shape),b=!e.packedInputs&&f===n.shape.length&&d(r,n.texData.texShape),y=e.packedInputs||i.length>2?"":`${r[0]>1}_${r[1]>1}`;s+=`${f}_${b}_${o?l:""}_${i.length}_${g}_${x}_${m}_${u}_${c}_${p}_${y}_${a}`}else{const e=t.isUniform?"uniform":t.texData.texShape;s+=`${t.shape}_${e}_${a}`}}));const a=e.userCode;let r=e.constructor.name;return r+="_"+s+"_"+a+`${V().getNumber("WEBGL_VERSION")}`,r}(e,u,c),f=this.getAndSaveBinary(p,(()=>mf(this.gpgpu,e,u,c))),m=null!=this.activeTimers;let g;m&&(g=this.startTimer()),V().get("ENGINE_COMPILE_ONLY")||function(e,t,n,s,a){t.program.enableShapeUniforms||(xf(t.inShapeInfos,n),xf([t.outShapeInfo],[s]));const r=s.texData.texture,o=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(r.texture,o[0],o[1]):e.setOutputMatrixTexture(r.texture,o[0],o[1]),e.setProgram(t.webGLProgram),1===V().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,s)=>{const a=t.program.variableNames[s],r=t.uniformLocations[a],o=t.uniformLocations[`offset${a}`],i=t.inShapesLocations[`${a}Shape`],l=t.inTexShapesLocations[`${a}TexShape`];if(i){const{uniformShape:s}=df(t.program.packedInputs,n.shape,n.texData.texShape);switch(s.length){case 1:e.gl.uniform1iv(i,new Int32Array(s));break;case 2:e.gl.uniform2iv(i,new Int32Array(s));break;case 3:e.gl.uniform3iv(i,new Int32Array(s));break;case 4:e.gl.uniform4iv(i,new Int32Array(s))}}if(l&&e.gl.uniform2i(l,n.texData.texShape[0],n.texData.texShape[1]),null!=r)if(n.isUniform)if(h(n.shape)<2)e.gl.uniform1f(r,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(r,t)}else null!=n.texData.slice&&null!=o&&e.gl.uniform1i(o,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,r,s)}));const i=t.outShapeLocation;if(i)switch(s.shape.length){case 1:e.gl.uniform1iv(i,new Int32Array(s.shape));break;case 2:e.gl.uniform2iv(i,new Int32Array(s.shape));break;case 3:e.gl.uniform3iv(i,new Int32Array(s.shape));break;case 4:e.gl.uniform4iv(i,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const n=E(s.shape);switch(s.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&a&&t.program.customUniforms.forEach(((n,s)=>{const r=t.customUniformLocations[s],o=a[s];if("float"===n.type)e.gl.uniform1fv(r,o);else if("vec2"===n.type)e.gl.uniform2fv(r,o);else if("vec3"===n.type)e.gl.uniform3fv(r,o);else if("vec4"===n.type)e.gl.uniform4fv(r,o);else if("int"===n.type)e.gl.uniform1iv(r,o);else if("ivec2"===n.type)e.gl.uniform2iv(r,o);else if("ivec3"===n.type)e.gl.uniform3iv(r,o);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(r,o)}})),e.executeProgram()}(this.gpgpu,f,u,c,s),l.forEach((e=>this.disposeIntermediateTensorInfo(e))),m&&(g=this.endTimer(g),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(g)}));const x=V().get("WEBGL_FLUSH_THRESHOLD");if(x>0){const e=zs();e-this.lastGlFlushTime>x&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!V().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===a){const e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,n,s,a=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,s,a)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!V().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=cr((()=>{if(!V().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=V().getBool("DEBUG");V().set("DEBUG",!1);const t=this.abs(lo(1e-8)).dataSync()[0];if(V().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:a,texture:r,usage:i,isPacked:l}=t;if(null!=r)return;const u=null!=this.activeTimers;let c;u&&(c=zs());let d=t.texShape;if(null==d&&(d=function(e,t=!1){let n=V().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=V().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(s===1/0&&V().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=n/2),t&&(n*=2,s*=2,1===(e=e.map(((t,n)=>n>=e.length-2?o(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=y(e);e=t.newShape}let a=h(e),r=null;e.length<=1&&a<=n?r=[1,a]:2===e.length&&e[0]<=n&&e[1]<=n?r=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?r=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?r=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?r=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(r=[e[0],e[1]*e[2]*e[3]]);const i=null!=r&&Math.max(...r)>s&&Math.min(...r)<=(t?2:1)&&Math.min(...r)>0;if(null==r||i)if(t){const t=Op(e);let n=2,s=2;e.length&&([n,s]=Dp(e)),a=t*(n/2)*(s/2),r=f(a).map((e=>2*e))}else r=f(a);return r}(n,l),t.texShape=d),null!=a){const e=Mp(n);let r,o=d[1],i=d[0];const h=a instanceof Uint8Array||a instanceof Uint8ClampedArray;!l&&h||([o,i]=vp(d[0],d[1])),r=l?new Nf(e,h):new If(e,h);const p=h?[i,o]:d,f=this.makeTensorInfo(p,s),m=this.texData.get(f.dataId);m.usage=h?gp.PIXELS:gp.UPLOAD,m.texShape=p,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,i,a);const g=[[i,o]],x=!0,b=this.runWebGLProgram(r,[f],s,g,x),y=this.texData.get(b.dataId);t.texShape=y.texShape,t.isPacked=y.isPacked,t.usage=y.usage,V().get("ENGINE_COMPILE_ONLY")?this.disposeData(b.dataId):(t.texture=y.texture,t.values=null,this.texData.delete(b.dataId)),this.disposeIntermediateTensorInfo(f),u&&(this.uploadWaitMs+=zs()-c)}else{const e=this.acquireTexture(d,i,s,l);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*N(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await new Promise((e=>Bo((()=>e())))),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw Cp(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const[,e]of Object.entries(this.binaryCache)){const{uniformLocations:t,customUniformLocations:n,infLoc:s,nanLoc:a,inShapesLocations:r,inTexShapesLocations:o,outShapeLocation:i,outShapeStridesLocation:l,outTexShapeLocation:u}=gf(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=n,e.infLoc=s,e.nanLoc=a,e.inShapesLocations=r,e.inTexShapesLocations=o,e.outShapeLocation=i,e.outShapeStridesLocation=l,e.outTexShapeLocation=u}}}tg.nextDataId=0,wa()&&hr("webgl",(()=>new tg),2);const ng="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class sg{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=fr(t,n),this.enableShapeUniforms=bf(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const ag="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class rg{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=fr(t,n);const a=this.outputShape.length;this.enableShapeUniforms=bf(a);let r="";if(s)if(0===a||1===h(this.outputShape))r="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(r=`\n          ${hf(a)} coords = getOutputCoords();\n        `,1===a)this.enableShapeUniforms?r+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":r+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=Em("coords",a);this.enableShapeUniforms?r+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= outShape[${a} - 2];\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= outShape[${a} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:r+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${r}\n\n        setOutput(result);\n      }\n    `}}function og(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const ig={kernelName:nt,backendName:"webgl",kernelFunc:og};function lg(e){const{inputs:t,backend:n}=e,{real:s,imag:a}=t,r=n.makeTensorInfo(s.shape,"complex64"),o=n.texData.get(r.dataId),i=og({inputs:{x:s},backend:n}),l=og({inputs:{x:a},backend:n});return o.complexTensorInfos={real:i,imag:l},r}const ug={kernelName:me,backendName:"webgl",kernelFunc:lg},cg="return (a < 0.) ? b * a : a;",hg="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const dg={kernelName:lt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{alpha:r}=s,o=n.makeTensorInfo([],"float32",Bs(r,"float32")),i=V().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new rg(hg,a.shape,o.shape):new sg(cg,a.shape,o.shape),l=n.runWebGLProgram(i,[a,o],"float32");return n.disposeIntermediateTensorInfo(o),l}},pg="return (a < 0.) ? b * a : a;",fg="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const mg={kernelName:Pt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:a}=t,r=V().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new rg(fg,s.shape,a.shape):new sg(pg,s.shape,a.shape);return n.runWebGLProgram(r,[s,a],"float32")}},gg="if (isnan(x)) return x;";function xg({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:a,backend:r})=>{const{x:o}=a,i=r,l=s||o.dtype;if(i.shouldExecuteOnCPU([o])&&null!=n){const e=i.texData.get(o.dataId),t=n(e.values,l);return i.makeTensorInfo(o.shape,l,t)}let u;return u=V().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new Ym(o.shape,t):new Mm(o.shape,e),i.runWebGLProgram(u,[o],l)}}function bg({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:a,dtype:r}){return({inputs:o,backend:i})=>{const{a:l,b:u}=o,c=i;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,a]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,s]=t,a={dataId:n.dataId,dtype:n.dtype,shape:l.shape},r={dataId:s.dataId,dtype:s.dtype,shape:u.shape},o=new sg(e,l.shape,u.shape);return c.runWebGLProgram(o,[a,r],ha(n.dtype,s.dtype))})),r=lg({inputs:{real:s,imag:a},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(a),r}const h=r||ha(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=a){const e=c.texData.get(l.dataId).values,t=c.texData.get(u.dataId).values,n="string"===l.dtype?Ui(e):e,s="string"===l.dtype?Ui(t):t,[r,o]=a(l.shape,u.shape,n,s,h),i=c.makeTensorInfo(o,h);return c.texData.get(i.dataId).values=r,i}let d;return d=V().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new rg(t,l.shape,u.shape,n):new sg(e,l.shape,u.shape),c.runWebGLProgram(d,[l,u],h)}}function yg(e,t=!1){if("linear"===e)return t?Hm:Bm;if("relu"===e)return t?Xm:Wm;if("elu"===e)return t?jm:zm;if("relu6"===e)return t?Km:Vm;if("prelu"===e)return t?fg:pg;if("leakyrelu"===e)return t?hg:cg;if("sigmoid"===e)return t?qm:Gm;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class vg{constructor(e,t,n,s=!1,a=!1,r=!1,o=null,i=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=bf(this.outputShape.length);const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",d=a?"rc.z, i * 2":"i * 2, rc.z",p=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";o&&(m=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${o}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${o}\n        }`:`vec4 activation(vec4 x) {\n          ${o}\n        }`,g="result = activation(result);");const x=r?"result += getBiasAtOutCoords();":"";r&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",y="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(y=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${y};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${d});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${p[0]} * ${f[0]});\n          result += (${p[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${x}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const kg={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class wg{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=fr(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const Ig="return a * b;";function Ng(e){const{inputs:t,backend:n}=e,{a:s,b:a}=t,r=ha(s.dtype,a.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(a.dataId),r=new wg(kg.REAL,s.shape,a.shape),o=new wg(kg.IMAG,s.shape,a.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:a.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:a.shape}],l=n.runWebGLProgram(r,i,"float32"),u=n.runWebGLProgram(o,i,"float32"),c=lg({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,a])){const e=n.texData.get(s.dataId),t=n.texData.get(a.dataId),[o,i]=sm(s.shape,a.shape,e.values,t.values,r),l=n.makeTensorInfo(i,r);return n.texData.get(l.dataId).values=o,l}let o;return o=V().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new rg(Ig,s.shape,a.shape):new sg(Ig,s.shape,a.shape),n.runWebGLProgram(o,[s,a],r)}const Sg={kernelName:Et,backendName:"webgl",kernelFunc:Ng};function Cg(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{shape:r}=s,o=n,i=h(a.shape),u=x(r,i),c=h(u);l(i===c,(()=>`The new shape (${u}) has ${c} elements and the old shape (${a.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`));const d=o.texData.get(a.dataId);return!d.isPacked||Bp(a.shape,u)||null!==d.texture&&Bp(d.shape,u)?(o.incRef(a.dataId),{dataId:a.dataId,shape:u,dtype:a.dtype}):function(e,t,n){const s=[Op(e.shape),...Dp(e.shape)],a={dtype:e.dtype,shape:s,dataId:e.dataId},r=[Op(t),...Dp(t)],o=new Am(r,s),i=[s],l=n.runWebGLProgram(o,[a],e.dtype,i,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(a,u,o)}const $g={kernelName:Xt,backendName:"webgl",kernelFunc:Cg};class Tg{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:a,outSize:r}=e;this.outputShape=[s,r];const o=4*Math.floor(n/4),i=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${p(e)?e.toPrecision(2):e}, ones);`}let u="";a%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===i}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class Eg{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:a,outSize:r}=e;this.outputShape=[s,r];let o="0.0",i="";"prod"===t?o="1.0":"min"===t?(o="1.0 / 1e-20",i="min"):"max"===t&&(o="-1.0 / 1e-20",i="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${i}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,d="vec4";"all"===t?(o="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===t&&(o="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let p="";a%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${o};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${o});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function Rg(e,t,n,s){const a=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=Xo(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let r=e;for(let o=0;o<a.length;o++){const{inSize:i,windowSize:l,outSize:u}=a[o];let c,h;c="mean"===n?0===o?new Tg({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u},i):new Tg({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u}):new Eg({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u},n),h=r,r=s.runWebGLProgram(c,[r],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return r}class Ag{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=hf(this.rank),a=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${a}));\n    }\n    `}}class _g{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=hf(this.rank),a=Tm("rc",this.rank),r=new Array(this.rank);for(let e=0;e<t.length;e++)r[t[e]]=a[e];const o=`vec2(${r.slice(-2).join()})`,i=`++${a[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${r.join()}), ${o})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${i}) {\n        result[1] = ${l};\n      }\n      --${a[this.rank-1]};\n      if(++${a[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${i}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function Fg(e,t,n){const s=V().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new _g(e.shape,t):new Ag(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function Og(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s;return function(e,t,n,s){const a=t,r=e.shape.length,o=b(a,e.shape);let i=o;const l=ro(i,r),u=null!=l;let c=e;u&&(c=Fg(e,l,s),i=io(i.length,r)),ao("sum",i,r);const[d,p]=no(c.shape,i);let f=d;n&&(f=so(d,o));const m=h(p),g=Cg({inputs:{x:c},attrs:{shape:[h(e.shape)/m,m]},backend:s}),x=Rg(g,da(e.dtype),"sum",s),y=Cg({inputs:{x:x},attrs:{shape:f},backend:s});return s.disposeIntermediateTensorInfo(g),s.disposeIntermediateTensorInfo(x),u&&s.disposeIntermediateTensorInfo(c),y}(a,r,o,n)}const Dg={kernelName:fn,backendName:"webgl",kernelFunc:Og};function Mg(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{perm:r}=s,o=n,i=a.shape.length,l=new Array(i);for(let e=0;e<l.length;e++)l[e]=a.shape[r[e]];let u;if(o.shouldExecuteOnCPU([a])){const e=o.texData.get(a.dataId).values,t=Cm(e,a.shape,a.dtype,r,l);u=o.makeTensorInfo(l,a.dtype);o.texData.get(u.dataId).values=t}else u=Fg(a,r,o);return u}const Lg={kernelName:Dn,backendName:"webgl",kernelFunc:Mg},Bg=1e3;function Pg({a:e,b:t,transposeA:n,transposeB:s,backend:a,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:u=null}){const c=e.shape.length,d=t.shape.length,p=n?e.shape[c-2]:e.shape[c-1],f=s?t.shape[d-1]:t.shape[d-2],m=n?e.shape[c-1]:e.shape[c-2],g=s?t.shape[d-2]:t.shape[d-1],x=e.shape.slice(0,-2),b=t.shape.slice(0,-2),y=h(x),v=h(b),k=fr(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([m,g]);l(p===f,(()=>`Error in matMul: inner shapes (${p}) and (${f}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`));const w=n?[y,p,m]:[y,m,p],I=s?[v,g,f]:[v,f,g],N=Cg({inputs:{x:e},backend:a,attrs:{shape:w}}),S=Cg({inputs:{x:t},backend:a,attrs:{shape:I}}),C=[N,S],$=Math.max(y,v),T=n?N.shape[1]:N.shape[2],E=null!=r,R=null!=o,A="leakyrelu"===u,_=null!=u?yg(u,!0):null;let F;if((1===m||1===g)&&T>Bg&&!1===(E||R||A||null!=_)){let e=N,t=S;n&&(e=Mg({inputs:{x:N},backend:a,attrs:{perm:[0,2,1]}}),C.push(e)),s&&(t=Mg({inputs:{x:S},backend:a,attrs:{perm:[0,2,1]}}),C.push(t));const r=1===g;let o=e;1!==g&&(o=Cg({inputs:{x:e},backend:a,attrs:{shape:[$,T,1]}}),C.push(o));const i=1===g?2:1;let l=t;r&&(l=Cg({inputs:{x:t},backend:a,attrs:{shape:[$,1,T]}}),C.push(l));const u=Ng({inputs:{a:o,b:l},backend:a});F=Og({inputs:{x:u},backend:a,attrs:{axis:i,keepDims:!0}}),C.push(u)}else{const l=ha(e.dtype,t.dtype),u=new vg(w,I,[$,m,g],n,s,E,_,R,A),c=[N,S];if(null!=r&&c.push(r),R&&c.push(o),A){const e=a.makeTensorInfo([],"float32",Bs(i,"float32"));c.push(e),C.push(e)}F=a.runWebGLProgram(u,c,l)}const O=Cg({inputs:{x:F},backend:a,attrs:{shape:k}});C.push(F);for(const e of C)a.disposeIntermediateTensorInfo(e);return O}const zg={kernelName:Vn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:a,b:r,bias:o,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return Pg({a:a,b:r,transposeA:l,transposeB:u,backend:n,bias:o,preluActivationWeights:i,leakyreluAlpha:h,activation:c})}},Wg="return abs(x);";const Vg={kernelName:"Abs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=pm(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let a;return a=V().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Ym(s.shape,Wg):new Mm(s.shape,Wg),n.runWebGLProgram(a,[s],s.dtype)}},Ug={kernelName:X,backendName:"webgl",kernelFunc:xg({opSnippet:Lm+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"})},Gg={kernelName:K,backendName:"webgl",kernelFunc:xg({opSnippet:Lm+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"})},Hg="return a + b;",jg=bg({opSnippet:Hg,packedOpSnippet:Hg,supportsComplex:!0,cpuKernelImpl:Mf}),Xg={kernelName:q,backendName:"webgl",kernelFunc:jg};class Kg{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class qg{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const Yg={kernelName:Y,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,a=n;if(1===a.length)return og({inputs:{x:a[0]},backend:s});if(a.length>V().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(a.length/2),n=e({inputs:a.slice(0,t),backend:s}),r=e({inputs:a.slice(t),backend:s});return e({inputs:[n,r],backend:s})}const r=a.map((e=>e.dtype)).reduce(((e,t)=>ha(e,t))),o=a.map((e=>e.shape)),i=V().getBool("WEBGL_PACK")?new qg(a[0].shape,o):new Kg(a[0].shape,o);return s.runWebGLProgram(i,a,r)}};const Zg={kernelName:"All",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s,i=a.shape.length,l=b(r,a.shape);let u=l;const c=ro(u,i);let d=a;null!=c&&(d=Mg({inputs:{x:a},backend:n,attrs:{perm:c}}),u=io(u.length,i)),ao("all",u,i);const[p,f]=no(d.shape,u),m=Cg({inputs:{x:d},backend:n,attrs:{shape:[-1,h(f)]}}),g=Rg(m,m.dtype,"all",n);let x;if(o){x=Cg({inputs:{x:g},backend:n,attrs:{shape:so(p,l)}})}else x=Cg({inputs:{x:g},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(d),x}};const Jg={kernelName:"Any",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s,i=a.shape.length,l=b(r,a.shape);let u=l;const c=ro(u,i);let d=a;null!=c&&(d=Mg({inputs:{x:a},backend:n,attrs:{perm:c}}),u=io(u.length,i)),ao("any",u,i);const[p,f]=no(d.shape,u),m=Cg({inputs:{x:d},backend:n,attrs:{shape:[-1,h(f)]}}),g=Rg(m,m.dtype,"any",n);let x;if(o){x=Cg({inputs:{x:g},backend:n,attrs:{shape:so(p,l)}})}else x=Cg({inputs:{x:g},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(d),x}};class Qg{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:a,outSize:r}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[a,r];const o="max"===t?">":"<",i=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${i};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class ex{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,l(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const a=e[e.length-1],r=Math.ceil(a/t);this.outputShape=e.slice(0,-1),r>1&&this.outputShape.push(r),s||this.variableNames.push("bestIndicesA");const o=this.outputShape,i=o.length,u=hf(i),c=Em("coords",i);let h,d;if(1===r){d=i+1;const e=hf(d);h=`\n        ${e} sourceLocR = ${e}(${c.join()}, 0);\n        ++${c[i-1]};\n        ${e} sourceLocG = ${e}(${c.join()}, 0);\n        ++${c[i-2]};\n        ${e} sourceLocA = ${e}(${c.join()}, 0);\n        --${c[i-1]};\n        ${e} sourceLocB = ${e}(${c.join()}, 0);\n        --${c[i-2]};`}else d=i,h=`\n        ${u} sourceLocR = coords;\n        ++${c[i-1]};\n        ${u} sourceLocG = coords;\n        ++${c[i-2]};\n        ${u} sourceLocA = coords;\n        --${c[i-1]};\n        ${u} sourceLocB = coords;\n        --${c[i-2]};`;const p=["x","y","z","w","u","v"].slice(0,d),f="."+p[d-1],m=p.map((e=>"int "+e)),g=Em("sourceLocR",d-1).concat("inIdx.r"),x=Em("sourceLocG",d-1).concat("inIdx.g"),b=Em("sourceLocB",d-1).concat("inIdx.b"),y=Em("sourceLocA",d-1).concat("inIdx.a"),v="max"===n?"greaterThan":"lessThan",k=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${y.join()})));`,w=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${x.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${y.join()}) : 0.)`,I=s?"":`\n      float getBestIndicesAChannel(${m.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${m.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${I}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${c[i-1]} < ${o[i-1]-1};\n        bool hasNextRow = ${c[i-2]} < ${o[i-2]-1};\n        ${h}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${w};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${k}\n          vec4 candidate = ${w};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${v}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function tx(e,t,n,s=null){let a=t.shape[0],r=t.shape[1];null!=s&&(a=s.shape[0],r=s.shape[1]);const o=Xo(r),i={windowSize:o,inSize:r,batchSize:a,outSize:Math.ceil(r/o)},l=new Qg(i,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=tx(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function nx(e,t,n,s=null){const a=null!=s?s.shape:t.shape,r=Xo(a[a.length-1]),o=new ex(a,r,n,null==s),i=null==s?[t]:[t,s],l=e.runWebGLProgram(o,i,"int32");if(l.shape.length===t.shape.length){const s=nx(e,t,n,l);return e.disposeIntermediateTensorInfo(l),s}return l}function sx(e,t,n,s){const a=[n];if(ao("arg"+s.charAt(0).toUpperCase()+s.slice(1),a,t.shape.length),!V().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],r=e.texData.get(t.dataId);let o=t;null!==r&&r.isPacked&&(o=e.unpackTensor(t),n.push(o));const[i,l]=no(o.shape,a),u=h(l),c=Cg({inputs:{x:o},backend:e,attrs:{shape:[-1,u]}});n.push(c);const d=tx(e,c,s);n.push(d);const p=Cg({inputs:{x:d},backend:e,attrs:{shape:i}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),p}return nx(e,t,s)}const ax={kernelName:Z,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r}=s;let o=b(r,a.shape);const i=ro(o,a.shape.length);let l=a;const u=[];null!=i&&(l=Mg({inputs:{x:a},backend:n,attrs:{perm:i}}),u.push(l),o=io(o.length,l.shape.length)),ao("argMax",[o[0]],l.shape.length);const c=sx(n,l,o[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};const rx={kernelName:J,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r}=s;let o=b(r,a.shape);const i=ro(o,a.shape.length);let l=a;const u=[];null!=i&&(l=Mg({inputs:{x:a},backend:n,attrs:{perm:i}}),u.push(l),o=io(o.length,l.shape.length)),ao("argMin",[o[0]],l.shape.length);const c=sx(n,l,o[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},ox={kernelName:Q,backendName:"webgl",kernelFunc:xg({opSnippet:Lm+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"})},ix={kernelName:ee,backendName:"webgl",kernelFunc:xg({opSnippet:Lm+"return log(x + sqrt(x * x + 1.0));"})},lx={kernelName:te,backendName:"webgl",kernelFunc:xg({opSnippet:Lm+"\n  return atan(x);\n"})},ux={kernelName:se,backendName:"webgl",kernelFunc:bg({opSnippet:ng+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+ag+"\n  return result;\n"})},cx={kernelName:ne,backendName:"webgl",kernelFunc:xg({opSnippet:Lm+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"})};class hx{constructor(e,t,n,s=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const r=e.filterWidth,o=e.strideHeight,i=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.top,p=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let x="0.0";if(f||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${o}, ${i});\n        const ivec2 pads = ivec2(${d}, ${p});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?a?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const y=4*Math.floor(r/4),v=r%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${d}, ${p});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${y}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${y};\n          if (${1===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class dx{constructor(e,t,n,s=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const r=e.filterWidth,o=e.strideDepth,i=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,d=e.effectiveFilterDepth,p=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,x=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let y="0.0";if(b||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${o}, ${i}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${x});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${p};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?a?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${p} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let v=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(v="avgValue / count");const k=4*Math.floor(r/4),w=r%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${o}, ${i}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${x});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${v});\n        }\n      }\n    `}}const px={kernelName:ae,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;Hp(a,"avgPool");const{filterSize:r,strides:o,pad:i,dimRoundingMode:u}=s;l(Kr(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=Br(a.shape,r,o,1,i,u);if(1===c.filterWidth&&1===c.filterHeight&&d(c.inShape,c.outShape))return og({inputs:{x:a},backend:n});const h=new hx(c,"avg",!1);return n.runWebGLProgram(h,[a],"float32")}};const fx={kernelName:oe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:r,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=s,c=Pr(a.shape,r,o,[1,1,1],i,l,u),h=new dx(c,"avg",!1);return n.runWebGLProgram(h,[a],"float32")}};class mx{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=i-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${i};\n            wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${o}) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class gx{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,a=e.strideDepth,r=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,d=e.effectiveFilterWidth,p=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=d-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${p}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${i}) {\n          float dyD = float(dyDCorner + wD) / ${a}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${r}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${d};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const xx={kernelName:ie,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,o=r,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,h=Pr(o.shape,i,l,[1,1,1],u,c),d=new gx(h);return n.runWebGLProgram(d,[a],o.dtype)}};const bx={kernelName:re,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,o=r;Hp([a,r],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=Br(o.shape,i,l,1,u),h=new mx(c);return n.runWebGLProgram(h,[a],o.dtype)}};const yx={kernelName:le,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:a,b:r}=t,{transposeA:o,transposeB:i}=s;return Pg({a:a,b:r,transposeA:o,transposeB:i,backend:n})}};class vx{constructor(e,t,n,s,a,r){this.outputShape=[],this.variableNames=["x","mean","variance"],fr(e,t),fr(e,n);let o="0.0";null!=s&&(fr(e,s),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="1.0";null!=a&&(fr(e,a),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${o};\n        float scale = ${i};\n        float inv = scale * inversesqrt(variance + float(${r}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class kx{constructor(e,t,n,s,a,r){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],fr(e,t),fr(e,n);let o="vec4(0.0)";null!=s&&(fr(e,s),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="vec4(1.0)";null!=a&&(fr(e,a),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${o};\n        vec4 scale = ${i};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${r}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const wx={kernelName:Ze,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:a,variance:r,offset:o,scale:i}=e;l(a.shape.length===r.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),l(null==o||a.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),l(null==i||a.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:u}=n;null==u&&(u=.001);const c=[s,a,r];let h=null;null!=o&&(h=o.shape,c.push(o));let d=null;null!=i&&(d=i.shape,c.push(i));const p=V().getBool("WEBGL_PACK_NORMALIZATION")?new kx(s.shape,a.shape,r.shape,h,d,u):new vx(s.shape,a.shape,r.shape,h,d,u);return t.runWebGLProgram(p,c,c[0].dtype)}};class Ix{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=hf(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return Nx.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${Nx[t]} = start[${t}] + coords.${Nx[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${s}\n        setOutput(getSource(${n}));\n      }\n    `}}const Nx=["x","y","z","w","u","v"];class Sx{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=hf(this.rank),n=Em("coords",this.rank),s=Em("sourceLoc",this.rank),a=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,r=`getChannel(getSource(${s.join()}), ${a})`,o=`\n      result.x = ${r};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${r};\n        --${s[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${r};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${r};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${o}\n        ${i}\n        setOutput(result);\n      }\n    `}}function Cx(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:r,size:o}=s,[i,l]=_r(a,r,o);if(vr(a,i,l),0===h(l))return n.makeTensorInfo(l,a.dtype,[]);if(n.shouldExecuteOnCPU([a])||"string"===a.dtype){const e=n.texData.get(a.dataId),t=fm(e.values,i,l,a.shape,a.dtype);return n.makeTensorInfo(l,a.dtype,t)}const{isPacked:u}=n.texData.get(a.dataId),c=Rr(a.shape,i,l);if(u||!c){const e=V().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Sx(l):new Ix(l),t=[i];return n.runWebGLProgram(e,[a],a.dtype,t)}return n.uploadToGPU(a.dataId),function(e,t,n,s){const a=s.texData.get(e.dataId),r=s.makeTensorInfo(n,e.dtype),o=s.texData.get(r.dataId);Object.assign(o,a),o.refCount=1,o.shape=n,o.dtype=e.dtype;let i=Ar(t,E(e.shape));a.slice&&(i+=a.slice.flatOffset),o.slice={flatOffset:i,origDataId:a.slice&&a.slice.origDataId||e.dataId};const l=s.dataRefCount.get(o.slice.origDataId)||1;return s.dataRefCount.set(o.slice.origDataId,l+1),r}(a,i,l,n)}const $x={kernelName:on,backendName:"webgl",kernelFunc:Cx},Tx={kernelName:ue,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:r,crops:o}=s;l(a.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const i=r.reduce(((e,t)=>e*t)),u=qo(a.shape,r,i),c=Yo(u.length,r.length),h=Zo(a.shape,r,i),d=Jo(o,r.length),p=Qo(h,o,r.length),f=[],m=Cg({inputs:{x:a},backend:n,attrs:{shape:u}}),g=Mg({inputs:{x:m},backend:n,attrs:{perm:c}}),x=Cg({inputs:{x:g},backend:n,attrs:{shape:h}}),b=Cx({inputs:{x:x},backend:n,attrs:{begin:d,size:p}});return f.push(m),f.push(g),f.push(x),f.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}};const Ex={kernelName:ce,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:o}=s,i=n.readSync(a.dataId),l=n.readSync(r.dataId),u=Lf(i,l,r.dtype,r.shape,o);return n.makeTensorInfo([o],r.dtype,u)}};const Rx={kernelName:he,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:a}=t,r=n.readSync(s.dataId),o=n.readSync(a.dataId),i=fr(Array.from(r),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},Ax=bg({opSnippet:"return float(a != b);",cpuKernelImpl:rm,dtype:"bool"}),_x={kernelName:Rt,backendName:"webgl",kernelFunc:Ax};function Fx(e){const{inputs:t,backend:n}=e,{input:s}=t;return og({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const Ox={kernelName:Gt,backendName:"webgl",kernelFunc:Fx},Dx="return float(int(x));";const Mx={kernelName:de,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:a}=t,{x:r}=n,{dtype:o}=a;if("complex64"===o){if("complex64"===r.dtype)return og({inputs:{x:r},backend:s});const t=ho(r.shape),n=e({inputs:{x:r},backend:s,attrs:{dtype:"float32"}}),a=lg({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),a}if("complex64"===r.dtype){const t=Fx({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:o}});return s.disposeIntermediateTensorInfo(t),n}if(!w(r.dtype,o)){const e=og({inputs:{x:r},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:o}}if(s.shouldExecuteOnCPU([r])){const e=s.texData.get(r.dataId).values,[t,n,a]=Pf(e,r.shape,r.dtype,o);return s.makeTensorInfo(t,n,a)}if("int32"===o)return function(e,t){const n=new Mm(e.shape,Dx),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(r,s);if("bool"===o){const e=s.makeTensorInfo([],"bool",v("bool",1)),t=Ax({inputs:{a:r,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${o}`)}},Lx="return ceil(x);",Bx={kernelName:pe,backendName:"webgl",kernelFunc:xg({opSnippet:Lx,packedOpSnippet:Lx,cpuKernelImpl:zf})};class Px{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class zx{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const Wx={kernelName:fe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{clipValueMin:r,clipValueMax:o}=s;let i;i=V().getBool("WEBGL_PACK_CLIP")?new zx(a.shape):new Px(a.shape);const l=[[r],[o]];return n.runWebGLProgram(i,[a],a.dtype,l)}};class Vx{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function Ux(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const Gx={kernelName:ge,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=n.texData.get(s.dataId),r=new Vx(s.shape),o=[Ux(s,a.complexTensorInfos.real),Ux(s,a.complexTensorInfos.imag)];return n.runWebGLProgram(r,o,o[0].dtype)}};class Hx{constructor(e){this.outputShape=[],this.outputShape=zo(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const s=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}const s=t.length,a=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${a}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class jx{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=zo(e,t);const n=this.outputShape,s=n.length,a=hf(s),r=Em("coords",s),o=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map(((e,t)=>`T${t}`));const i=new Array(e.length-1);i[0]=e[0][t];for(let n=1;n<i.length;n++)i[n]=i[n-1]+e[n][t];const l=o[t],u=o.slice(-2),c=o.join();let h=`if (${l} < ${i[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<i.length;e++){const t=i[e-1];h+=`\n        if (${l} < ${i[e]}  && ${l} >= ${i[e-1]}) {\n          return getChannel(\n            getT${e}(${Xx(o,l,t)}),\n            vec2(${Xx(u,l,t)}));\n        }`}const d=i.length,p=i[i.length-1];h+=`\n        return getChannel(\n          getT${d}(${Xx(o,l,p)}),\n          vec2(${Xx(u,l,p)}));`,this.userCode=`\n      float getValue(${o.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${r}), 0., 0., 0.);\n\n        ${r[s-1]} = ${r[s-1]} + 1;\n        if (${r[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${r});\n        }\n\n        ${r[s-2]} = ${r[s-2]} + 1;\n        if (${r[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${r});\n        }\n\n        ${r[s-1]} = ${r[s-1]} - 1;\n        if (${r[s-2]} < ${n[s-2]} &&\n            ${r[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${r});\n        }\n        setOutput(result);\n      }\n    `}}function Xx(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function Kx(e){const{inputs:t,backend:n}=e,{input:s}=t;return og({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const qx={kernelName:at,backendName:"webgl",kernelFunc:Kx};function Yx(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map((e=>Fx({inputs:{input:e},backend:n}))),a=e.map((e=>Kx({inputs:{input:e},backend:n}))),r=Yx(s,t,n),o=Yx(a,t,n),i=lg({inputs:{real:r,imag:o},backend:n});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),a.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(o),i}let a=n.shouldExecuteOnCPU(e);if("string"===s&&(a=!0),a){const a=e.map((e=>{const s=h(e.shape.slice(t));return Cg({inputs:{x:e},backend:n,attrs:{shape:[-1,s]}})})),r=a.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=zo(a.map((e=>e.shape)),1),i=1===a[0].shape[0],l=Wf(r,o,s,i),u=zo(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,s,l);return a.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const r=V().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(e.length>r){const s=[];for(let a=0;a<e.length;a+=r){const o=e.slice(a,a+r);s.push(Yx(o,t,n))}const a=Yx(s,t,n);for(const e of s)n.disposeIntermediateTensorInfo(e);return a}if(V().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const a=new jx(e.map((e=>e.shape)),t);return n.runWebGLProgram(a,e,s)}const{tensors2D:o,outShape:i}=function(e,t,n){const s=zo(e.map((e=>e.shape)),t),a=e.map((e=>Cg({inputs:{x:e},attrs:{shape:[-1,h(e.shape.slice(t))]},backend:n})));return{tensors2D:a,outShape:s}}(e,t,n),l=new Hx(o.map((e=>e.shape))),u=n.runWebGLProgram(l,o,s);o.forEach((e=>n.disposeIntermediateTensorInfo(e)));const c=Cg({inputs:{x:u},attrs:{shape:i},backend:n});return n.disposeIntermediateTensorInfo(u),c}function Zx(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s,r=b(a,t[0].shape)[0];Po(t.map((e=>e.shape)),r);const o=zo(t.map((e=>e.shape)),r);if(0===h(o))return n.makeTensorInfo(o,t[0].dtype,[]);const i=t.filter((e=>h(e.shape)>0));return 1===i.length?og({inputs:{x:i[0]},backend:n}):Yx(i,r,n)}const Jx={kernelName:xe,backendName:"webgl",kernelFunc:Zx};class Qx{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const r=e.padInfo.top,o=e.padInfo.left,i=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,x=m?2:3,b=m?3:1;let y="",v="";n&&(y=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,v="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${i}, ${l});\n      const ivec2 pads = ivec2(${r}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${x}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${p}) *\n                    getW(wR, wC, ${p}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${p}, xR, xC) *\n                    getW(wR, wC, ${p}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2),\n                getW(wR, wC, ${p} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1),\n                  getX(batch, xR, xC, ${p} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC),\n                  getX(batch, ${p} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${v}\n        setOutput(result);\n      }\n    `}}class eb{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,a=e.strideDepth,r=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${a}, ${r}, ${o});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${i};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${p}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${p}) *\n                  getW(wF, wR, wC, ${p}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1),\n                  getX(batch, xF, xR, xC, ${p} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2),\n                  getW(wF, wR, wC, ${p} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class tb{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=bf(this.outputShape.length);const r=e.padInfo.left,i=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,c=e.filterWidth,h=c;let d="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)d+=`\n           vec4 xTexelC${2*e};\n           int xTexelC${2*e}Ready;\n           vec4 xTexelC${2*e+1};\n           int xTexelC${2*e+1}Ready;\n           vec4 xC${e};`;d+=`\n     for (int r = 0; r < ${u}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let e=0;e<c;e++)d+=`\n           xTexelC${2*e} = vec4(0.0);\n           xTexelC${2*e}Ready = 0;\n           xTexelC${2*e+1} = vec4(0.0);\n           xTexelC${2*e+1}Ready = 0;\n           xC${e} = vec4(0.0);`;d+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let t=0;t<(h+1)/2;t++){const n=2*t;if(d+=`\n           xC = xCCorner + ${n*l};\n           `,1===i){if(n<c&&(r%2==1?(d+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n               `,d+=1===l&&n>0?`\n                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                   } else {\n                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                   }\n                   `):d+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xC${n} = xTexelC${n};\n                 `,n+1<c)){const e=r%2==0?o(l):l;l%2==0&&r%2==1||l%2!=0&&r%2!=1?(d+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${n+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${n+1}Ready = 1;\n                   }\n                   `,d+=l>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\n                     } else {\n                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\n                     }\n                     `:`\n                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                     `):d+=1===e?`\n                     xC${n+1} = xTexelC${n};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${n+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${n+1}Ready = 1;\n                     }\n\n                     xC${n+1} = xTexelC${n+1};\n                     `}}else n<c&&(r%2==1?(d+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n               `,n+1<c&&(d+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                 `)):(d+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(\n                   xTexelC${n}.xy, xTexelC${n+1}.xy);\n               `,n+1<c&&(d+=`\n                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                 `)));n<c&&(d+=`\n             wTexel = getW(r, ${n}, d1, d2);\n             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,n+1<c&&(d+=`\n               wTexel = getW(r, ${n+1}, d1, d2);\n               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}d+="\n     }\n   ",d+="\n     }\n   ",d+="\n     }\n   ";let p="",f="";n&&(p=s?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:a?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${p}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${d}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${m}\n         ${f}\n         setOutput(result);\n       }\n     `}}class nb{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=bf(this.outputShape.length);const{dataFormat:n}=t,s=Xp(),a="channelsLast"===n,r=a?1:2,o=a?2:3,i=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`\n          blockIndex = rc.z + ${t};\n          pos = rc.y + ${e};\n\n          ${i}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${r}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${o}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${a}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${s.output} = result;\n      }\n    `}}function sb(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function ab({x:e,filter:t,convInfo:n,backend:s,bias:a=null,preluActivationWeights:r=null,leakyreluAlpha:o=0,activation:i=null}){const u=e.shape,c=s.texData.get(e.dataId),h=n.inChannels,p=u[0]*u[1]*u[2],f=n.outChannels,m="channelsLast"===n.dataFormat;let g;const x=[];if(null!=r){const e=sb(r.shape,m);null!=e&&(r=Cg({inputs:{x:r},backend:s,attrs:{shape:e}}),x.push(r))}if(null!=a){const e=sb(a.shape,m);null!=e&&(a=Cg({inputs:{x:a},backend:s,attrs:{shape:e}}),x.push(a))}if(!((1===p||1===f)&&h>Bg)&&c.isPacked&&m&&null!=c.texture&&u[2]%2!=0&&d(c.shape.slice(-3),u.slice(-3))){const h=u[0]*u[1]*(u[2]+1),d={dataId:e.dataId,shape:[1,h,n.inChannels],dtype:e.dtype},p=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,l(Bp(c.shape,d.shape),(()=>`packed reshape ${c.shape} to ${d.shape} isn't free`));const f=Cg({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});x.push(f);const m=Pg({a:d,b:f,backend:s,transposeA:false,transposeB:false,bias:a,activation:i,preluActivationWeights:r,leakyreluAlpha:o}),b=s.texData.get(m.dataId);l(b.isPacked,(()=>"batchMatMul result is expected to be packed")),c.shape=p,b.shape=n.outShape,g=og({inputs:{x:m},backend:s}),g.shape=n.outShape,x.push(m)}else{const l=n.outHeight*n.outWidth,u=Cg({inputs:{x:e},backend:s,attrs:{shape:m?[n.batchSize,l,n.inChannels]:[n.batchSize,n.inChannels,l]}}),c=Cg({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=Pg({a:m?u:c,b:m?c:u,transposeA:!m,transposeB:false,backend:s,bias:a,activation:i,preluActivationWeights:r,leakyreluAlpha:o});g=Cg({inputs:{x:h},backend:s,attrs:{shape:n.outShape}}),x.push(u),x.push(c),x.push(h)}for(const e of x)s.disposeIntermediateTensorInfo(e);return g}function rb({x:e,filter:t,convInfo:n,backend:s,bias:a=null,preluActivationWeights:r=null,leakyreluAlpha:o=0,activation:i=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:d,outHeight:p,dataFormat:f}=n,m="channelsLast"===f,g=l*u*c,x=p*d,b=[n.batchSize,g,x],y=[];if(null!=r){const e=sb(r.shape,m);null!=e&&(r=Cg({inputs:{x:r},backend:s,attrs:{shape:e}}),y.push(r))}if(null!=a){const e=sb(a.shape,m);null!=e&&(a=Cg({inputs:{x:a},backend:s,attrs:{shape:e}}),y.push(a))}const v=Cg({inputs:{x:t},backend:s,attrs:{shape:[1,g,h(t.shape)/g]}});y.push(v);const k=new nb(b,n),w=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],I=s.runWebGLProgram(k,[e],"float32",w),N=Cg({inputs:{x:I},backend:s,attrs:{shape:b}});y.push(I),y.push(N);const S=null!=a,C=null!=r,$="leakyrelu"===i,T=i?yg(i,!0):null,E=new vg(m?N.shape:v.shape,m?v.shape:N.shape,m?[n.batchSize,x,n.outChannels]:[n.batchSize,n.outChannels,x],!0,!1,S,T,C,$),R=m?[N,v]:[v,N];if(a&&R.push(a),C&&R.push(r),$){const e=s.makeTensorInfo([],"float32",Bs(o,"float32"));R.push(e),y.push(e)}const A=s.runWebGLProgram(E,R,"float32"),_=Cg({inputs:{x:A},backend:s,attrs:{shape:n.outShape}});y.push(A);for(const e of y)s.disposeIntermediateTensorInfo(e);return _}const ob={kernelName:be,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:o,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=qr(l),d=zr(a.shape,r.shape,o,u,i,c,!1,h);let p;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(d.strideWidth<=2&&"channelsLast"===h&&V().getBool("WEBGL_EXP_CONV")){const e=new tb(d),t=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]];p=n.runWebGLProgram(e,[a,r],"float32",t)}else if(V().getBool("WEBGL_CONV_IM2COL"))p=rb({x:a,filter:r,convInfo:d,backend:n});else{const e=new Qx(d);p=n.runWebGLProgram(e,[a,r],"float32")}else p=ab({x:a,filter:r,convInfo:d,backend:n});const f=Cg({inputs:{x:p},backend:n,attrs:{shape:d.outShape}});return n.disposeIntermediateTensorInfo(p),f}};class ib{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,a=e.padInfo.left,r="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${r}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class lb{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r="channelsLast"===e.dataFormat,o=t-1-e.padInfo.top,i=n-1-e.padInfo.left,l=r?1:2,u=r?2:3,c=r?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${r}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ub{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,a=e.padInfo.front,r=e.padInfo.top,o=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${a};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${r};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${o};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class cb{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,a=e.strideDepth,r=e.strideHeight,o=e.strideWidth,i=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${i}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${a}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${r}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const hb={kernelName:ye,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=qr(l),d=zr(a.shape,c,o,1,i,u,!1,h),p=new ib(d);return n.runWebGLProgram(p,[a,r],"float32")}};const db={kernelName:ve,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{inputShape:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=qr(u),d=zr(o,r.shape,i,1,l,c,!1,h),p=new lb(d);return n.runWebGLProgram(p,[a,r],"float32")}};const pb={kernelName:ke,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:o,pad:i,dilations:l}=s,u=Wr(a.shape,r.shape,o,l,i),c=new eb(u);return n.runWebGLProgram(c,[a,r],"float32")}};const fb={kernelName:we,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:o,pad:i,filterShape:l}=s,u=Wr(a.shape,l,o,1,i),c=new ub(u);return n.runWebGLProgram(c,[a,r],"float32")}};const mb={kernelName:Ie,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{pad:o,strides:i,inputShape:l}=s,u=Wr(l,r.shape,i,1,o),c=new cb(u);return n.runWebGLProgram(c,[a,r],"float32")}},gb={kernelName:Ne,backendName:"webgl",kernelFunc:xg({opSnippet:gg+"\n  return cos(x);\n"})},xb={kernelName:Se,backendName:"webgl",kernelFunc:xg({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"})};class bb{constructor(e,t,n,s,a){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[r,o,i,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const d="bilinear"===s?1:0,[p,f]=[o-1+".0",i-1+".0"],[m,g,x]=c>1?[""+(o-1)/(c-1),"(y2-y1) * height_ratio",`y1*${p} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${p}`],[b,y,v]=h>1?[""+(i-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${r}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${y};\n\n        float in_y = ${x};\n        if( in_y < 0.0 || in_y > ${p} ) {\n          setOutput(float(${a}));\n          return;\n        }\n        float in_x = ${v};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${a}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const yb={kernelName:Te,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:a,boxes:r,boxInd:o}=t,{cropSize:i,method:l,extrapolationValue:u}=s,c=new bb(a.shape,r.shape,i,l,u);return n.runWebGLProgram(c,[a,r,o],"float32")}};var vb;!function(e){e.Prod="*",e.Sum="+"}(vb||(vb={}));class kb{constructor(e,t,n,s){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const a=this.outputShape.length,r=this.op===vb.Prod?"1.0":"0.0",o=n?r:`getX(${wb(a,"coords",this.op)})`,i=this.outputShape[this.outputShape.length-1];let l="",u="";n?(l=s?"end != "+(i-1):"end != 0",u=s?"end + 1":"end - 1"):(l=s?`end + pow2 < ${i}`:"end >= pow2",u=s?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${hf(a)} coords = getOutputCoords();\n        int end = ${Ib(a,"coords",this.op)};\n        float val = ${o};\n        int pow2 = int(pow(2.0, index));\n        if (${l}) {\n          int idx = ${u};\n          ${Ib(a,"coords",this.op)} = idx;\n          val ${this.op}= getX(${wb(a,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function wb(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function Ib(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function Nb(e,t,n,s,a,r){const o=t.shape.length,i=ro([s],o);let l=t;null!=i&&(l=Mg({inputs:{x:t},backend:n,attrs:{perm:i}}));const u=io(1,o)[0];if(u!==o-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${s}`);const c=l.shape[u];let h=og({inputs:{x:l},backend:n});for(let t=0;t<=Math.ceil(Math.log2(c))-1;t++){const s=new kb(e,l.shape,!1,r),a=[[t]],o=h;h=n.runWebGLProgram(s,[h],h.dtype,a),n.disposeIntermediateTensorInfo(o)}if(a){const t=new kb(e,l.shape,a,r),s=h;h=n.runWebGLProgram(t,[h],h.dtype),n.disposeIntermediateTensorInfo(s)}if(null!=i){const e=Mg({inputs:{x:h},backend:n,attrs:{perm:oo(i)}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(l),e}return h}const Sb={kernelName:Ce,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,exclusive:o,reverse:i}=s;return Nb(vb.Prod,a,n,r,o,i)}};const Cb={kernelName:$e,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,exclusive:o,reverse:i}=s;return Nb(vb.Sum,a,n,r,o,i)}};const $b={kernelName:Ee,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:o,binaryOutput:i}=s;if(1===a.shape.length){const e=n.readSync(a.dataId),t=n.readSync(r.dataId),s=Lf(e,t,r.dtype,r.shape,o);return n.makeTensorInfo([o],r.dtype,s)}if(2===a.shape.length){const e=n.bufferSync(a),t=n.bufferSync(r),s=Bf(e,t,o,i);return n.makeTensorInfo(s.shape,r.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}};class Tb{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const Eb={kernelName:Re,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockSize:r,dataFormat:o}=s,i=a.shape[0],l=("NHWC"===o?a.shape[1]:a.shape[2])*r,u=("NHWC"===o?a.shape[2]:a.shape[3])*r,c=("NHWC"===o?a.shape[3]:a.shape[1])/(r*r),h=new Tb("NHWC"===o?[i,l,u,c]:[i,c,l,u],r,o);return n.runWebGLProgram(h,[a],a.dtype)}};class Rb{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=bf(this.outputShape.length);const r=e.filterHeight,o=e.filterWidth,i=e.outChannels/e.inChannels;let l="",u="";n&&(l=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,u="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${r}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${o}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${u}\n        setOutput(result);\n      }\n    `}}class Ab{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=bf(this.outputShape.length);const r=e.outChannels/e.inChannels,i=e.padInfo.left,l=e.strideWidth,u=e.dilationWidth,c=e.filterHeight,h=e.filterWidth,d=h;let p="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<h;e++)p+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;p+=`\n    for (int r = 0; r < ${c}; r++) {\n      `;for(let e=0;e<h;e++)p+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;p+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(d+1)/2;e++){const t=2*e;if(p+=`\n          xC = xCCorner + ${t*u};\n          `,1===l){if(t<h&&(i%2==1?(p+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,p+=1===u&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):p+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<h)){const e=i%2==0?o(u):u;u%2==0&&i%2==1||u%2!=0&&i%2!=1?(p+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,p+=u>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                    } else {\n                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                    }\n                    `:`\n                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                    `):p+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<h&&(i%2==1?(p+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<h&&(p+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(p+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<h&&(p+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<h&&(p+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<h&&(p+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}p+="\n    }\n  ",p+="\n      }\n    ";let f="",m="";n&&(f=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,m="result = activation(result);");const g=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${f}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${r};\n        int q = d2 - d1 * ${r};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${p}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${g}\n        ${m}\n        setOutput(result);\n      }\n    `}}const _b={kernelName:Ae,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:o,pad:i,dilations:u,dimRoundingMode:c}=s;let h=u;null==h&&(h=[1,1]),l(Kr(o,h),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${h}'`));const d=zr(a.shape,r.shape,o,h,i,c,!0);let p;p=V().getBool("WEBGL_PACK_DEPTHWISECONV")&&d.strideWidth<=2&&d.outChannels/d.inChannels==1?new Ab(d):new Rb(d);const f=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]];return n.runWebGLProgram(p,[a,r],"float32",f)}};class Fb{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,a=e.padInfo.left,r=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${r} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ob{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r=t-1-e.padInfo.top,o=n-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${r}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${i}; dm++) {\n              int d2 = d1 * ${i} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Db={kernelName:_e,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s,h=zr(a.shape,c,o,i,l,u,!0),d=new Fb(h);return n.runWebGLProgram(d,[a,r],"float32")}};const Mb={kernelName:Fe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s,h=zr(c,r.shape,o,i,l,u,!0),d=new Ob(h);return n.runWebGLProgram(d,[a,r],"float32")}};class Lb{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const Bb={kernelName:Oe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=[...s.shape,...s.shape],r=h(s.shape),o=Cg({inputs:{x:s},backend:n,attrs:{shape:[r]}}),i=new Lb(r),l=n.runWebGLProgram(i,[o],o.dtype),u=Cg({inputs:{x:l},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),u}};class Pb{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:a,strideWidth:r,filterHeight:o,filterWidth:i,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${a}, ${r});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${o}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${i}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const zb={kernelName:De,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:o,pad:i,dilations:l}=s,u=Lr(a.shape,r.shape,o,i,"NHWC",l);let c;const h=new Pb(u);c=n.runWebGLProgram(h,[a,r],"float32");const d=Cg({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),d}};const Wb={kernelName:Pe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:a}=s,r=t,{allDims:o,summedDims:i,idDims:l}=vi(a,r.length);wi(o.length,l,r);const{path:u,steps:c}=Ii(i,l),h=c.length;let p=null,f=o.length;const m=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=ki(f,l[t]);let a;Ni(e)?a=r[t]:(a=Mg({inputs:{x:r[t]},backend:n,attrs:{perm:e}}),m.push(a));const o=a.shape.slice();for(let e=0;e<s.length;++e)o.splice(s[e],0,1);d(a.shape,o)||(a=Cg({inputs:{x:a},backend:n,attrs:{shape:o}}),m.push(a)),null===p?p=a:(p=Ng({inputs:{a:a,b:p},backend:n}),m.push(p))}e<h-1&&(u[e]>=0&&(p=Og({inputs:{x:p},backend:n,attrs:{axis:u[e]-(o.length-f),keepDims:!1}}),m.push(p)),f--)}for(const e of m)e!==p&&n.disposeIntermediateTensorInfo(e);return p}},Vb=xg({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),Ub={kernelName:ze,backendName:"webgl",kernelFunc:Vb},Gb={kernelName:We,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:a}=t,r=V().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new rg("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,a.shape):new sg("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,a.shape);return n.runWebGLProgram(r,[s,a],s.dtype)}},Hb={kernelName:Ue,backendName:"webgl",kernelFunc:bg({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:Vf})},jb={kernelName:Ve,backendName:"webgl",kernelFunc:xg({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = ${ai};\n  float a3 = 1.421413741;\n  float a4 = ${oi};\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`})},Xb=xg({opSnippet:gg+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:Uf,dtype:"float32"}),Kb={kernelName:Ge,backendName:"webgl",kernelFunc:Xb};function qb(e){const{inputs:t,attrs:n,backend:s}=e,{dim:a}=n,{input:r}=t,o=r.shape.length,i=r.shape.slice();let u=a;return a<0&&(l(-(o+1)<=a,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),u=o+a+1),i.splice(u,0,1),Cg({inputs:{x:r},backend:s,attrs:{shape:i}})}const Yb={kernelName:He,backendName:"webgl",kernelFunc:qb},Zb="return exp(x) - 1.0;",Jb={kernelName:je,backendName:"webgl",kernelFunc:xg({opSnippet:Zb,packedOpSnippet:Zb,cpuKernelImpl:Gf})};class Qb{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const a=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,r=n?`${s}.0`:"1.0";let o;if("real"===e)o="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);o="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${a};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${o}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${r};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function ey(e,t,n){const s=n.texData.get(e.dataId),a=h(e.shape),r=e.shape[e.shape.length-1],o=Cg({inputs:{x:e},backend:n,attrs:{shape:[a/r,r]}}),i=o.shape,l=new Qb("real",i,t),u=new Qb("imag",i,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:i},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:i}],d=n.runWebGLProgram(l,c,"float32"),p=n.runWebGLProgram(u,c,"float32"),f=lg({inputs:{real:d,imag:p},backend:n});n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p);const m=Cg({inputs:{x:f},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(f),m}const ty={kernelName:"FFT",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return ey(s,!1,n)}};class ny{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function sy(e){const{backend:t,attrs:n}=e,{shape:s,value:a}=n;let{dtype:r}=n;if(r=r||C(a),"string"===r){const e=k(r,h(s));return e.fill(a),t.makeTensorInfo(s,r,e)}{const e=new ny(s,a),n=[[a]];return t.runWebGLProgram(e,[],r,n)}}const ay={kernelName:Xe,backendName:"webgl",kernelFunc:sy};class ry{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const oy={kernelName:Ke,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,a=new ry(n.shape);return s.runWebGLProgram(a,[n],n.dtype)}},iy="return floor(x);",ly={kernelName:qe,backendName:"webgl",kernelFunc:xg({opSnippet:iy,packedOpSnippet:iy,cpuKernelImpl:Hf})},uy={kernelName:Ye,backendName:"webgl",kernelFunc:bg({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"})};class cy{constructor(e){this.variableNames=["A"];const t=Xp(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class hy{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=Xp(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const dy={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:a}=t;const{numChannels:r}=s,o="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,i="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,[l,u]=o?[a.videoWidth,a.videoHeight]:[a.width,a.height],c=[u,l],h=[u,l,r];if(i||o){const e=V().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=py&&e===fy||(fy=e,py=document.createElement("canvas").getContext("2d",{willReadFrequently:fy})),py.canvas.width=l,py.canvas.height=u,py.drawImage(a,0,0,l,u),a=py.canvas}const d=n.makeTensorInfo(c,"int32");n.texData.get(d.dataId).usage=gp.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),a);const p=V().getBool("WEBGL_PACK")?new hy(h):new cy(h),f=n.runWebGLProgram(p,[d],"int32");return n.disposeData(d.dataId),f}};let py,fy=V().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const my={kernelName:Un,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,m=qr(c),g=zr(a.shape,r.shape,l,h,u,d,!1,m);let x;const b=[],y=null!=o,v=null!=i,k="leakyrelu"===p,w=()=>{const e=[a,r],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=Cg({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return b.push(t),t}return e};if(y&&e.push(t(o,c)),v&&e.push(t(i,c)),k){const t=n.makeTensorInfo([],"float32",Bs(f,"float32"));e.push(t),b.push(t)}return e};if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(g.strideWidth<=2&&"channelsLast"===m&&V().getBool("WEBGL_EXP_CONV")){const e=p?yg(p,!0):null,t=new tb(g,y,e,v,k),s=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],a=w();x=n.runWebGLProgram(t,a,"float32",s)}else if(V().getBool("WEBGL_CONV_IM2COL"))x=rb({x:a,filter:r,convInfo:g,backend:n,bias:o,activation:p,preluActivationWeights:i,leakyreluAlpha:f});else{const e=p?yg(p,!1):null,t=new Qx(g,y,e,v,k),s=w();x=n.runWebGLProgram(t,s,"float32")}else x=ab({x:a,filter:r,convInfo:g,backend:n,bias:o,activation:p,preluActivationWeights:i,leakyreluAlpha:f});const I=Cg({inputs:{x:x},backend:n,attrs:{shape:g.outShape}});return b.push(x),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),I}};const gy={kernelName:Gn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:o,preluActivationWeights:i}=t,{strides:u,pad:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,m=[];let g=h;null==g&&(g=[1,1]),l(Kr(u,g),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${g}'`));const x=zr(a.shape,r.shape,u,g,c,d,!0),b=V().getBool("WEBGL_PACK_DEPTHWISECONV")&&x.strideWidth<=2&&x.outChannels/x.inChannels==1,y=p?yg(p,b):null,v=[a,r],k=null!=o,w=null!=i,I="leakyrelu"===p;if(k&&v.push(o),w&&v.push(i),I){const e=n.makeTensorInfo([],"float32",Bs(f,"float32"));v.push(e),m.push(e)}let N;N=b?new Ab(x,k,y,w,I):new Rb(x,k,y,w,I);const S=[[x.padInfo.top,x.padInfo.left],[x.strideHeight,x.strideWidth],[x.dilationHeight,x.dilationWidth],[x.inHeight,x.inWidth]],C=n.runWebGLProgram(N,v,"float32",S);return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),C}};class xy{constructor(e,t,n,s){this.sliceDim=e,this.strides=t,this.paramsShape=s,this.variableNames=["x","indices"],this.outputShape=n;const a=hf(n.length);let r="\n    int index;";for(let e=0;e<this.sliceDim;e++)r+=`\n          index = round(getIndices(coords[0], ${e}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};\n          flattenIndex += index * ${this.strides[e]};`;this.userCode=`\n         void main() {\n          ${a} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${r}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const by={kernelName:Qe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:a}=t,r=a.shape,o=r[r.length-1],i=h(s.shape),[l,u,c,d]=mr(s,a),p=Cg({inputs:{x:a},backend:n,attrs:{shape:[u,o]}}),f=Cg({inputs:{x:s},backend:n,attrs:{shape:[h(s.shape)/c,c]}});if(n.shouldExecuteOnCPU([s,a])||"string"===s.dtype){const e=n.readSync(a.dataId),t=n.bufferSync(s),r=jf(e,t,s.dtype,u,o,c,d,s.shape,i);return n.makeTensorInfo(l,s.dtype,r.values)}const m=new xy(o,d,[u,c],s.shape),g=n.runWebGLProgram(m,[f,p],f.dtype),x=Cg({inputs:{x:g},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),x}};class yy{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=hf(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)2===t?s.push("index"):s.push(`${n[t]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${s}));\n      }\n    `}}function vy(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,indices:r}=t,{axis:o,batchDims:i}=s,u=b(o,a.shape)[0];if(V().get("DEBUG")){const e=n.readSync(r.dataId),t=a.shape[u];for(let n=0;n<e.length;++n){const s=e[n];l(s<=t-1&&s>=0,(()=>`GatherV2: the index value ${s} is not in [0, ${t-1}]`))}}const c=Wi(a,r,u,i),d=h(r.shape),p=[],f=Cg({inputs:{x:a},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),m=Cg({inputs:{x:r},backend:n,attrs:{shape:[c.batchSize,d/c.batchSize]}});p.push(f),p.push(m);const g=[c.batchSize,c.outerSize,d/c.batchSize,c.sliceSize];if(n.shouldExecuteOnCPU([a,r])||"string"===a.dtype){const e=n.bufferSync(m),t=n.bufferSync(f),s=Xf(t,e,g);return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c.outputShape,s.dtype,s.values)}const x=new yy(f.shape,g),y=n.runWebGLProgram(x,[f,m],f.dtype);p.push(y);const v=Cg({inputs:{x:y},backend:n,attrs:{shape:c.outputShape}});return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),v}const ky={kernelName:Je,backendName:"webgl",kernelFunc:vy},wy={kernelName:et,backendName:"webgl",kernelFunc:bg({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:Kf,dtype:"bool"})},Iy={kernelName:tt,backendName:"webgl",kernelFunc:bg({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:qf})};const Ny={kernelName:st,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return ey(s,!0,n)}},Sy={kernelName:rt,backendName:"webgl",kernelFunc:xg({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"})},Cy={kernelName:ot,backendName:"webgl",kernelFunc:xg({opSnippet:"return float(isinf(x));",dtype:"bool"})},$y={kernelName:it,backendName:"webgl",kernelFunc:xg({opSnippet:"return float(isnan(x));",dtype:"bool"})},Ty={kernelName:ut,backendName:"webgl",kernelFunc:bg({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:Yf,dtype:"bool"})},Ey={kernelName:ct,backendName:"webgl",kernelFunc:bg({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:Zf,dtype:"bool"})};const Ry={kernelName:ht,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,num:r}=n,o=Jf(s,a,r);return t.makeTensorInfo([o.length],"float32",o)}},Ay={kernelName:dt,backendName:"webgl",kernelFunc:xg({opSnippet:gg+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:Qf})},_y={kernelName:pt,backendName:"webgl",kernelFunc:xg({opSnippet:gg+"\n  return log(1.0 + x);\n"})},Fy={kernelName:ft,backendName:"webgl",kernelFunc:bg({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"})},Oy={kernelName:mt,backendName:"webgl",kernelFunc:xg({opSnippet:"return float(!(x >= 1.0));"})},Dy={kernelName:gt,backendName:"webgl",kernelFunc:bg({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"})};class My{constructor(e,t,n,s,a){this.variableNames=["x"],this.outputShape=[];const r=t,o=e[3]-1;let i;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;i=.5===a?`inversesqrt(${l})`:1===a?`1.0/(${l})`:`exp(log(${l}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${r}; j <= ${r}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${o}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${i};\n        setOutput(val);\n      }\n    `}}class Ly{constructor(e,t,n,s,a){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const r=t,o=e[3]-1;let i;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;i=.5===a?`inversesqrt(${l})`:1===a?`1.0/(${l})`:`exp(log(${l}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${r};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${r}; j <= ${r}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${o}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${i};\n        setOutput(result);\n      }\n    `}}const By={kernelName:"LRN",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{depthRadius:r,bias:o,alpha:i,beta:l}=s,u=V().getBool("WEBGL_PACK_NORMALIZATION")?new Ly(a.shape,r,o,i,l):new My(a.shape,r,o,i,l);return n.runWebGLProgram(u,[a],a.dtype)}};class Py{constructor(e,t,n,s,a){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=a,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${a})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${a});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const zy={kernelName:xt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a,y:r,dy:o}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s,h=new Py(a.shape,i,l,u,c);return n.runWebGLProgram(h,[a,r,o],a.dtype)}};function Wy(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reductionIndices:r,keepDims:o}=s,i=a.shape.length,l=b(r,a.shape);let u=l;const c=ro(u,i),d=null!=c,p=n.shouldExecuteOnCPU([a]);let f=a;if(d){if(p){const e=n.texData.get(f.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=a.shape[c[e]];const s=Cm(e,a.shape,a.dtype,c,t);f=n.makeTensorInfo(t,a.dtype);n.texData.get(f.dataId).values=s}else f=Fg(a,c,n);u=io(u.length,i)}ao("max",u,i);const[m,g]=no(f.shape,u);let x,y=m;if(o&&(y=so(m,l)),p){const e=n.texData.get(f.dataId).values,t=em(e,h(g),y,a.dtype);x=n.makeTensorInfo(y,a.dtype);n.texData.get(x.dataId).values=t}else x=function(e,t,n,s){const a=h(t),r=Cg({inputs:{x:e},attrs:{shape:[h(e.shape)/a,a]},backend:s}),o=Rg(r,e.dtype,"max",s),i=Cg({inputs:{x:o},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(o),i}(f,g,y,n);return d&&n.disposeIntermediateTensorInfo(f),x}const Vy={kernelName:"Max",backendName:"webgl",kernelFunc:Wy},Uy={kernelName:bt,backendName:"webgl",kernelFunc:bg({opSnippet:ng+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+ag+"\n  return result;\n",cpuKernelImpl:tm})};const Gy={kernelName:yt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;Hp(a,"maxPool");const{filterSize:r,strides:o,pad:i,dimRoundingMode:u}=s;l(Kr(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=Br(a.shape,r,o,1,i,u);if(1===c.filterWidth&&1===c.filterHeight&&d(c.inShape,c.outShape))return og({inputs:{x:a},backend:n});const h=new hx(c,"max",!1);return n.runWebGLProgram(h,[a],a.dtype)}};const Hy={kernelName:kt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:r,strides:o,pad:i,dataFormat:l,dimRoundingMode:u}=s,c=Pr(a.shape,r,o,[1,1,1],i,u,l),h=new dx(c,"max",!1);return n.runWebGLProgram(h,[a],a.dtype)}};class jy{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,a=e.effectiveFilterHeight,r=e.effectiveFilterWidth,o=a-1-e.padInfo.top,i=r-1-e.padInfo.left,l=a*r-1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${a};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${r}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${r} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Xy{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,a=e.dilationDepth,r=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=i-1-e.padInfo.front,h=l-1-e.padInfo.top,d=u-1-e.padInfo.left,p=i*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${d});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${i};\n           wD += ${a}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${r}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${o}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${p} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Ky={kernelName:wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,o=r,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,h=Pr(o.shape,i,l,[1,1,1],u,c),d=new dx(h,"max",!0),p=n.runWebGLProgram(d,[o],o.dtype),f=new Xy(h),m=n.runWebGLProgram(f,[a,p],o.dtype);return n.disposeIntermediateTensorInfo(p),m}};const qy={kernelName:vt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r,output:o}=t,i=r;Hp([r,o],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=Br(i.shape,l,u,1,c,h),p=new hx(d,"max",!0),f=n.runWebGLProgram(p,[i],i.dtype),m=new jy(d),g=n.runWebGLProgram(m,[a,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}};const Yy={kernelName:It,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:a,strides:r,pad:o,includeBatchInIndex:i}=t,u=n;l(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const c=[1,1];l(Kr(r,c),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${r} and dilations '${c}'`));const h=Br(s.shape,a,r,c,o),[d,p]=function(e,t,n,s){let a=new hx(n,"max",!1);const r=s.runWebGLProgram(a,[e],"float32");return a=new hx(n,"max",!0,!0,t),[r,s.runWebGLProgram(a,[e],"float32")]}(s,i,h,u);return[d,p]}};const Zy={kernelName:Nt,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:a,axis:r}=t,o=n,i=s.shape.length,l=b(r,s.shape);let u=l;const c=ro(u,i),d=null!=c,p=o.shouldExecuteOnCPU([s]),f=[];let m=s;if(d){if(p){const e=o.texData.get(m.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const n=Cm(e,s.shape,s.dtype,c,t);m=o.makeTensorInfo(t,s.dtype);o.texData.get(m.dataId).values=n}else m=Fg(s,c,o);f.push(m),u=io(u.length,i)}ao("sum",u,i);const[g,x]=no(m.shape,u);let y=g;a&&(y=so(g,l));const v=function(e,t,n,s){const a=h(t),r=Cg({inputs:{x:e},attrs:{shape:[h(e.shape)/a,a]},backend:s}),o=Rg(r,"float32","mean",s),i=Cg({inputs:{x:o},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(o),i}(m,x,y,o);for(const e of f)o.disposeIntermediateTensorInfo(e);return v}};const Jy={kernelName:"Min",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s,i=a.shape.length,l=b(r,a.shape);let u=l;const c=ro(u,i);let d=a;null!=c&&(d=Mg({inputs:{x:a},backend:n,attrs:{perm:c}}),u=io(u.length,a.shape.length)),ao("min",u,i);const[p,f]=no(d.shape,u),m=Cg({inputs:{x:d},backend:n,attrs:{shape:[-1,h(f)]}}),g=Rg(m,m.dtype,"min",n);let x;if(o){x=Cg({inputs:{x:g},backend:n,attrs:{shape:so(p,l)}})}else x=Cg({inputs:{x:g},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(d),x}},Qy={kernelName:St,backendName:"webgl",kernelFunc:bg({opSnippet:ng+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+ag+"\n  return result;\n",cpuKernelImpl:nm})};class ev{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=hf(s),r=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${a} start = ${a}(${r});\n      ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${a} coords = outC - start;\n        setOutput(getX(${i}));\n      }\n    `:`\n        int start = ${r};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class tv{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=hf(s),r=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=Em("rc",s),l=Em("source",s),u=`${i[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let d="";if(1===s){const e=`\n        ${a} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;d=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${i[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${a} source = rc;\n        ${a} lt = ${a}(lessThan(source, start));\n        ${a} gte = ${a}(greaterThanEqual(source, end));\n        ${a} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;d=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${i[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${i[s-2]} += 1;\n        if(${i[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${i[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${a} start = ${a}(${r});\n      const ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const nv={kernelName:Ct,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:a,mode:r}=n,o=V().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new tv(s.shape,a,r):new ev(s.shape,a,r);return t.runWebGLProgram(o,[s],s.dtype)}},sv={kernelName:$t,backendName:"webgl",kernelFunc:bg({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+ag+"\n  return result;\n"})};class av{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const rv=bg({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),ov={kernelName:Be,backendName:"webgl",kernelFunc:rv},iv="return a - b;",lv=bg({opSnippet:iv,packedOpSnippet:iv,supportsComplex:!0,cpuKernelImpl:Im}),uv={kernelName:En,backendName:"webgl",kernelFunc:lv};function cv(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{dim:r}=s,o=b([r],a.shape),i=Wy({inputs:{x:a},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),l=so(i.shape,o),u=Cg({inputs:{x:i},backend:n,attrs:{shape:l}}),c=lv({inputs:{a:a,b:u},backend:n}),h=Xb({inputs:{x:c},backend:n}),d=Og({inputs:{x:h},backend:n,attrs:{axis:o,keepDims:!1}}),p=Cg({inputs:{x:d},backend:n,attrs:{shape:l}}),f=rv({inputs:{a:h,b:p},backend:n});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),f}const hv={kernelName:xn,backendName:"webgl",kernelFunc:cv};const dv={kernelName:Tt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{numSamples:r,seed:o,normalized:i}=s,l=i?a:cv({inputs:{logits:a},backend:n,attrs:{dim:a.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new av(u,c,r),d=[[o]],p=n.runWebGLProgram(h,[l],"int32",d);return i||n.disposeIntermediateTensorInfo(l),p}},pv=Lm+"\n  return -x;\n";const fv={kernelName:"Neg",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,a]=am(e.values,s.shape,s.dtype);return n.makeTensorInfo(a,s.dtype,t)}let a;return a=V().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Ym(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new Mm(s.shape,pv),n.runWebGLProgram(a,[s],s.dtype)}},mv=Ao;const gv={kernelName:At,backendName:"webgl",kernelFunc:function(e){Hn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=s,u=n.readSync(a.dataId),c=n.readSync(r.dataId),{selectedIndices:h}=mv(u,c,o,i,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},xv=_o;const bv={kernelName:_t,backendName:"webgl",kernelFunc:function(e){Hn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(a.dataId),h=n.readSync(r.dataId),{selectedIndices:d,validOutputs:p}=xv(c,h,o,i,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},yv=Fo;const vv={kernelName:Ft,backendName:"webgl",kernelFunc:function(e){Hn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(a.dataId),h=n.readSync(r.dataId),d=o,p=i,f=l,m=u,{selectedIndices:g,selectedScores:x}=yv(c,h,d,p,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([x.length],"float32",new Float32Array(x))]}};class kv{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const wv={kernelName:Dt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:a}=t,{dtype:r,depth:o,onValue:i,offValue:l}=s,u=h(a.shape),c=new kv(u,o,i,l),d=Cg({inputs:{x:a},backend:n,attrs:{shape:[u]}}),p=n.runWebGLProgram(c,[d],r);n.disposeIntermediateTensorInfo(d);const f=Cg({inputs:{x:p},backend:n,attrs:{shape:[...a.shape,o]}});return n.disposeIntermediateTensorInfo(p),f}};function Iv(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=Fx({inputs:{input:s},backend:n}),t=Iv({inputs:{x:e},backend:n}),a=Kx({inputs:{input:s},backend:n}),r=Iv({inputs:{x:a},backend:n}),o=lg({inputs:{real:t,imag:r},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),o}return sy({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const Nv={kernelName:Pn,backendName:"webgl",kernelFunc:Iv};const Sv={kernelName:Ot,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===a.dtype){const t=Fx({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s}),r=Kx({inputs:{input:a},backend:s}),o=Iv({inputs:{x:r},backend:s}),i=lg({inputs:{real:n,imag:o},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(o),i}return sy({attrs:{shape:a.shape,dtype:a.dtype,value:1},backend:s})}};const Cv={kernelName:Mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s;if(1===t.length)return qb({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const r=t[0].shape,o=t[0].dtype;t.forEach((e=>{u(r,e.shape,"All tensors passed to stack must have matching shapes"),l(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],c=Zx({inputs:t.map((e=>{const t=qb({inputs:{input:e},backend:n,attrs:{dim:a}});return i.push(t),t})),backend:n,attrs:{axis:a}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};class $v{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=hf(s),r=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${a} start = ${a}(${r});\n      ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${a} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${r};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class Tv{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=hf(s),r=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=Em("rc",s),l=Em("source",s),u=`${i[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${a} rc = outputLoc;`,`${i[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${i[s-2]} += 1;\n       if(${i[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${i[s-1]} += 1;\n         if(${u}) {`],d=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let p="";for(let e=0,t=1===s?2:4;e<t;e++)p+=`\n        ${h[e]}\n        if (${d}) {\n          result[${e}] = float(value);\n        } else {\n          ${a} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;p+=1===s?"} ":"}}",this.userCode=`\n      const ${a} start = ${a}(${r});\n      const ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const Ev=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:r,constantValue:o}=s;if(0===h(a.shape)){const e=r.map(((e,t)=>e[0]+a.shape[t]+e[1]));return sy({backend:n,attrs:{shape:e,value:o,dtype:a.dtype}})}const i=V().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Tv(a.shape,r,o):new $v(a.shape,r,o),l=[[o]];return n.runWebGLProgram(i,[a],a.dtype,l)},Rv={kernelName:Lt,backendName:"webgl",kernelFunc:Ev},Av={kernelName:Bt,backendName:"webgl",kernelFunc:bg({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+ag+"\n  return result;\n"})};const _v={kernelName:zt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s,i=a.shape.length,l=[],u=b(r,a.shape);let c=u;const d=ro(c,i);let p,f=a;if(null!=d&&(f=Mg({inputs:{x:a},backend:n,attrs:{perm:d}}),c=io(c.length,i),l.push(f)),ao("prod",c,i),n.shouldExecuteOnCPU([f])){const e=n.texData.get(f.dataId).values,{outVals:t,outShape:s,outDtype:a}=om(f.shape,f.dtype,e,c);p=n.makeTensorInfo(s,a,t)}else{const[e,t]=no(f.shape,c),s=h(t),r=Cg({inputs:{x:f},backend:n,attrs:{shape:[-1,s]}}),o=Rg(r,da(a.dtype),"prod",n);p=Cg({inputs:{x:o},backend:n,attrs:{shape:e}}),l.push(r),l.push(o)}if(o){l.push(p);const e=so(p.shape,u);p=Cg({inputs:{x:p},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}};const Fv={kernelName:Wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:a,paramsDenseValues:r,indices:o}=t,{outputRaggedRank:i}=s,l=a.map((e=>n.readSync(e.dataId))),u=a.map((e=>e.shape)),c=n.readSync(r.dataId),h=n.readSync(o.dataId),[d,p,f]=im(l,u,c,r.shape,r.dtype,h,o.shape,i),m=d.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,r.dtype,p);return m.concat([g])}};const Ov={kernelName:Vt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:a,values:r,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=s,u=n.readSync(a.dataId),c=n.readSync(r.dataId),h=n.readSync(o.dataId),d=i.map((e=>n.readSync(e.dataId))),p=i.map((e=>e.shape)),[f,m]=lm(u,a.shape,c,r.shape,r.dtype,h,o.shape,d,p,l);return n.makeTensorInfo(f,r.dtype,m)}},Dv=e=>{const{backend:t,attrs:n}=e,{start:s,stop:a,step:r,dtype:o}=n,i=um(s,a,r,o);return t.makeTensorInfo([i.length],o,i)},Mv={kernelName:Ut,backendName:"webgl",kernelFunc:Dv},Lv={kernelName:Ht,backendName:"webgl",kernelFunc:xg({opSnippet:"return 1.0 / x;"})},Bv=xg({opSnippet:Lm+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),Pv={kernelName:jt,backendName:"webgl",kernelFunc:Bv},zv=xg({opSnippet:Lm+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),Wv={kernelName:Jt,backendName:"webgl",kernelFunc:zv};class Vv{constructor(e,t,n,s,a){this.variableNames=["A"],this.outputShape=[];const[r,o,i,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?o-1:o,s&&n>1?i-1:i],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=a?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class Uv{constructor(e,t,n,s,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[r,o,i,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?o-1:o,s&&n>1?i-1:i],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=a?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const Gv={kernelName:Yt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:o,size:i}=s,[l,u]=i,c=V().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Uv(a.shape,l,u,r,o):new Vv(a.shape,l,u,r,o);return n.runWebGLProgram(c,[a],"float32")}};class Hv{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,a]=t,[,r,o]=e,i=[n&&r>1?s-1:s,n&&o>1?a-1:a],l=[n&&r>1?r-1:r,n&&o>1?o-1:o],u=i[0]/l[0],c=i[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${r}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${a-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const jv={kernelName:Zt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:o}=s,i=new Hv(r.shape,a.shape,o);return n.runWebGLProgram(i,[r],r.dtype)}};class Xv{constructor(e,t,n,s,a){this.variableNames=["A"],this.outputShape=[];const[r,o,i,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?o-1:o,s&&n>1?i-1:i],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let d;d=a?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class Kv{constructor(e,t,n,s,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[r,o,i,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?o-1:o,s&&n>1?i-1:i],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let d;d=a?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const qv={kernelName:Kt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:o,size:i}=s,[l,u]=i,c=V().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Kv(a.shape,l,u,r,o):new Xv(a.shape,l,u,r,o);return n.runWebGLProgram(c,[a],a.dtype)}};class Yv{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,a]=t,[,r,o]=e,i=[n&&r>1?s-1:s,n&&o>1?a-1:a],l=[n&&r>1?r-1:r,n&&o>1?o-1:o],u=i[0]/l[0],c=i[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${r}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${i[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${i[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${a}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const Zv={kernelName:qt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:o}=s,i=new Yv(r.shape,a.shape,o);return n.runWebGLProgram(i,[r],r.dtype)}};class Jv{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),a=hf(n);this.userCode=`\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class Qv{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=Em("rc",n),a=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,r=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,o=hf(n);function i(n){const s=e.map(((s,a)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(a,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${a}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${o} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return i(e)}(s.slice())};\n          if(${a}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",i(e)}(s.slice())};\n          }\n          if(${r}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",i(e)}(s.slice())};\n            if(${a}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",i(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const ek={kernelName:Qt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dims:r}=s,o=a.shape.length,i=b(r,a.shape);if(0===o)return og({inputs:{x:a},backend:n});const l=V().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Qv(a.shape,i):new Jv(a.shape,i);return n.runWebGLProgram(l,[a],a.dtype)}};class tk{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],s=e[2];this.outputShape=e;let a="";a="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${a}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const nk={kernelName:Wn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:a,fillValue:r,center:o}=t,i=n,l=new tk(s.shape,r),[u,c]=Ko(o,s.shape[1],s.shape[2]),h=[[u,c,Math.sin(a),Math.cos(a)]];return i.runWebGLProgram(l,[s],s.dtype,h)}},sk={kernelName:en,backendName:"webgl",kernelFunc:xg({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"})},ak={kernelName:tn,backendName:"webgl",kernelFunc:xg({opSnippet:"return inversesqrt(x);",cpuKernelImpl:cm})};class rk{constructor(e,t,n,s,a,r,o=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=r;const i=hf(a.length),l=hf(r.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const d=`getUpdates(${h})`,p=t>1?"strides[j]":"strides";this.userCode=`\n        ${i} strides = ${i}(${a});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${p};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${d};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const ok={kernelName:nn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a,updates:r}=t,{shape:o}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=xr(0,a,o),d=[h/u,u];if(0===h)return n.makeTensorInfo(o,a.dtype);const p=Cg({inputs:{x:a},backend:n,attrs:{shape:[l,i]}}),f=Cg({inputs:{x:r},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new rk(l,i,p.shape.length,f.shape.length,c,d),x=n.runWebGLProgram(g,[f,p,m],f.dtype),b=Cg({inputs:{x:x},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(m),b}};class ik{constructor(e,t,n,s){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const a=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,r=2===V().getNumber("WEBGL_VERSION")?"while (left < right) {":a,o="left"===s?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${r}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${o} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const lk={kernelName:sn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:a,values:r}=t,{side:o}=s,i=new ik(a.shape[0],a.shape[1],r.shape[1],o),l=[[a.shape[1]]];return n.runWebGLProgram(i,[a,r],"int32",l)}};class uk{constructor(e,t,n){let s,a;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)a="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[],o=[];for(let s=0;s<t.length;s++)o.push(`${n[s]}`),s<e&&r.push(`${n[s]}`);s=r.join(),a=o.join()}const r=hf(n);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${a}));\n        } else {\n          setOutput(getB(${a}));\n        }\n      }\n    `}}const ck={kernelName:an,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:a,e:r}=t,o=new uk(s.shape.length,a.shape,a.shape.length);return n.runWebGLProgram(o,[s,a,r],ha(a.dtype,r.dtype))}},hk={kernelName:rn,backendName:"webgl",kernelFunc:xg({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = ${ti};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`})},dk=xg({opSnippet:gg+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:dm}),pk={kernelName:hn,backendName:"webgl",kernelFunc:dk},fk={kernelName:cn,backendName:"webgl",kernelFunc:xg({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"})},mk={kernelName:ln,backendName:"webgl",kernelFunc:xg({opSnippet:gg+"\n  return sin(x);\n"})},gk={kernelName:un,backendName:"webgl",kernelFunc:xg({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"})},xk={kernelName:dn,backendName:"webgl",kernelFunc:xg({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"})},bk={kernelName:mn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:r,paddings:o}=s;l(a.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const i=r.reduce(((e,t)=>e*t)),u=[[0,0]];u.push(...o);for(let e=1+r.length;e<a.shape.length;++e)u.push([0,0]);const c=[],h=Ev({inputs:{x:a},backend:n,attrs:{paddings:u,constantValue:0}}),d=qo(h.shape,r,i,!1),p=Yo(d.length,r.length,!1),f=Zo(h.shape,r,i,!1),m=Cg({inputs:{x:h},backend:n,attrs:{shape:d}}),g=Mg({inputs:{x:m},backend:n,attrs:{perm:p}}),x=Cg({inputs:{x:g},backend:n,attrs:{shape:f}});return c.push(h),c.push(m),c.push(g),c.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}};const yk={kernelName:bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:a,denseShape:r,defaultValue:o}=t;if(1!==r.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${r.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==a.shape.length)throw new Error(`Values must be a vector, saw:\n         ${a.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.readSync(s.dataId),l=n.readSync(a.dataId),u=n.readSync(r.dataId),c=n.readSync(o.dataId)[0],[h,d,p,f,m]=mm(i,s.shape,s.dtype,l,a.dtype,u,c);return[n.makeTensorInfo(d,s.dtype,h),n.makeTensorInfo([d[0]],a.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};const vk={kernelName:yn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:a,newShape:r}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==a.shape.length)throw new Error(`Input shape should be a vector but received shape ${a.shape}`);if(1!==r.shape.length)throw new Error(`Target shape should be a vector but received shape ${r.shape}`);const o=Array.from(n.readSync(a.dataId)),i=n.readSync(s.dataId),l=Array.from(n.readSync(r.dataId)),[u,c,h]=gm(i,s.shape,s.dtype,o,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],r.dtype,new Int32Array(h))]}};const kk={kernelName:vn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:a,segmentIds:r}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${a.shape}`);if(1!==r.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${r.shape}`);const o=n.readSync(s.dataId),i=n.readSync(a.dataId),l=n.readSync(r.dataId),[u,c]=xm(o,s.shape,s.dtype,i,l,!0);return n.makeTensorInfo(c,s.dtype,u)}};const wk={kernelName:kn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:a,segmentIds:r}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${a.shape}`);if(1!==r.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${r.shape}`);const o=n.readSync(s.dataId),i=n.readSync(a.dataId),l=n.readSync(r.dataId),[u,c]=xm(o,s.shape,s.dtype,i,l);return n.makeTensorInfo(c,s.dtype,u)}};const Ik={kernelName:wn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:a,sparseValues:r,defaultValue:o}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=xr(0,a,i);if("string"===r.dtype){const e=n.bufferSync(a),t=n.bufferSync(r),s=Vs(n.readSync(o.dataId)[0]),p=hm(e,t,i,d,c,u,l,h,s,false);return n.makeTensorInfo(i,p.dtype,p.values)}const p=new rk(u,l,a.shape.length,r.shape.length,h,[d,1],false),f=n.runWebGLProgram(p,[r,a,o],r.dtype),m=Cg({inputs:{x:f},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(f),m}};const Nk={kernelName:gn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{numOrSizeSplits:r,axis:o}=s,i=b(o,a.shape)[0],l=Ci(a,r,i),u=a.shape.length,c=new Array(u).fill(0),h=a.shape.slice();return l.map((e=>{const t=[...h];t[i]=e;const s=Cx({inputs:{x:a},backend:n,attrs:{begin:c,size:t}});return c[i]+=e,s}))}},Sk="return sqrt(x);",Ck={kernelName:pn,backendName:"webgl",kernelFunc:xg({opSnippet:Sk,packedOpSnippet:Sk,cpuKernelImpl:bm})},$k={kernelName:Nn,backendName:"webgl",kernelFunc:xg({opSnippet:"return x * x;"})},Tk="return (a - b) * (a - b);",Ek={kernelName:In,backendName:"webgl",kernelFunc:bg({opSnippet:Tk,packedOpSnippet:Tk})};const Rk={kernelName:zn,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,a=Lm+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,r=new Mm(s.shape,a);return n.runWebGLProgram(r,[s],s.dtype)}};class Ak{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,a=hf(n.length),r=hf(n.length);let o="";if(1===s)o="coords * strides + begin";else{let e=0;o=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${a} begin = ${a}(${e});\n      ${a} strides = ${a}(${t});\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}const _k={kernelName:Sn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:r,end:o,strides:i,beginMask:u,endMask:c,ellipsisMask:h,newAxisMask:d,shrinkAxisMask:p}=s,{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:x,isSimpleSlice:b,begin:y,end:v,strides:k}=Fr(a.shape,r,o,i,u,c,h,d,p);let w;if(g)w=Cg({inputs:{x:a},backend:n,attrs:{shape:m}});else if(x||b){l(a.shape.length>=1,(()=>`Input must have rank at least 1, got: ${a.shape.length}`));const e=kr(y,v,k),t=Cx({inputs:{x:a},backend:n,attrs:{begin:y,size:e}});w=Cg({inputs:{x:t},backend:n,attrs:{shape:m}}),n.disposeIntermediateTensorInfo(t)}else{if(n.shouldExecuteOnCPU([a])){const e=n.readSync(a.dataId),t=or(a.shape,a.dtype,e),s=ym(f,t,k,y);w=n.makeTensorInfo(m,a.dtype,s.values)}else{const e=new Ak(y,k,f);w=n.runWebGLProgram(e,[a],a.dtype)}}const I=Cg({inputs:{x:w},backend:n,attrs:{shape:m}});return n.disposeIntermediateTensorInfo(w),I}};const Fk={kernelName:Cn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:a,nGramWidths:r,leftPad:o,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=n.readSync(c.dataId),p=n.readSync(h.dataId),[f,m]=vm(d,p,a,r,o,i,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};const Ok={kernelName:$n,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:a}=s,{input:r,delimiter:o}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(1!==r.shape.length)throw new Error(`Input must be a vector, got shape: ${r.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.readSync(r.dataId),l=n.readSync(o.dataId)[0],[u,c,h]=km(i,l,a),d=c.length;return[n.makeTensorInfo([d,2],"int32",u),n.makeTensorInfo([d],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};const Dk={kernelName:Tn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:a}=s,{input:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const o=n.readSync(r.dataId),i=wm(o,a);return n.makeTensorInfo(r.shape,"int32",i)}},Mk={kernelName:Rn,backendName:"webgl",kernelFunc:xg({opSnippet:"return tan(x);"})},Lk={kernelName:An,backendName:"webgl",kernelFunc:xg({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"})};class Bk{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=hf(this.rank),a=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}function Pk(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reps:r}=s;if("string"===a.dtype||a.shape.length>5){const e=n.readSync(a.dataId),t="string"===a.dtype?e.map((e=>Vs(e))):e,s=or(a.shape,a.dtype,t),o=Nm(s,r);return n.makeTensorInfo(o.shape,o.dtype,o.values)}const o=new Bk(a.shape,r);return n.runWebGLProgram(o,[a],a.dtype)}const zk={kernelName:_n,backendName:"webgl",kernelFunc:Pk};class Wk{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class Vk{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function Uk(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function Gk(e){let t=1;for(;t<e;)t*=2;return t}const Hk={kernelName:Fn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{k:r,sorted:o}=s,i=V().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=V().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=a.shape,c=u[u.length-1];if(n.shouldExecuteOnCPU([a])||c<i||r>l){const e=n.readSync(a.dataId),[t,s]=Sm(e,u,a.dtype,r,o);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(s.shape,s.dtype,s.values)]}if(0===r)return u[u.length-1]=0,[n.makeTensorInfo(u,a.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===c)return[a,sy({attrs:{shape:u,dtype:"int32",value:0},backend:n})];const d=n.texData.get(a.dataId),p=null!==d&&d.isPacked,f=p?n.unpackTensor(a):a,m=h(u)/c,g=Cg({inputs:{x:f},attrs:{shape:[m,c]},backend:n});p&&Uk(n,f);const x=Gk(r),b=Gk(c);let y=null;const v=()=>null===y?[g,g]:[g,y],k=(e,t,s)=>{const a=v(),r=new Wk(s),o=[[c],[null===y?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],i=y;y=n.runWebGLProgram(r,a,"int32",o),Uk(n,i)};for(let e=1;e<x;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)k(t,n,[m,b])}for(let e=b;e>x;e/=2){const t=v(),s=new Vk([m,e/2]),a=[[c],[null===y?1:0],[x]],r=y;y=n.runWebGLProgram(s,t,"int32",a),Uk(n,r);const o=x/2,i=2*o;for(let e=o;e>=1;e/=2)k(i,e,y.shape)}let w=y;y=Cx({inputs:{x:y},backend:n,attrs:{begin:0,size:[m,r]}}),Uk(n,w);let I=vy({inputs:{x:g,indices:y},backend:n,attrs:{axis:1,batchDims:1}});Uk(n,g);const N=u.slice(0,-1);N.push(r),w=y,y=Cg({inputs:{x:y},attrs:{shape:N},backend:n}),Uk(n,w);const S=I;return I=Cg({inputs:{x:I},attrs:{shape:N},backend:n}),Uk(n,S),[I,y]}};class jk{constructor(e,t,n,s,a,r){this.variableNames=["Image","Transforms"],this.outputShape=r;const o="nearest"===n?1:2;let i;switch(s){case"constant":default:i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${i} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${a});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${a});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${o} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const Xk={kernelName:On,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:a,transforms:r}=t,{interpolation:o,fillMode:i,fillValue:l,outputShape:u}=s,[c,h,d,p]=a.shape,[f,m]=null!=u?u:[h,d],g=new jk(h,d,o,i,l,[c,f,m,p]);return n.runWebGLProgram(g,[a,r],"float32")}};const Kk={kernelName:Mn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:a}=n,{x:r}=t;Hp(r,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=s.readSync(r.dataId),{outputValues:i,outputShape:l,indices:u}=$m(o,a,r.shape,r.dtype);return[s.makeTensorInfo(l,r.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}};const qk={kernelName:Ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:a}=t;let{axis:r}=s;r<0&&(r+=a.shape.length);const o=a,i=o.shape.length,l=a.shape[r],u=new Array(i-1);let c=0;for(let e=0;e<i;e++)e!==r&&(u[c++]=o.shape[e]);const h=[],d=new Array(i).fill(0),p=o.shape.slice();p[r]=1;const f=new Array(l);for(let e=0;e<f.length;e++){d[r]=e;const t=Cx({inputs:{x:o},backend:n,attrs:{begin:d,size:p}}),s=Cg({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class Yk{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,a=e.inSize,r=e.numSegments,o=r*Math.ceil(a/n);this.outputShape=[s,o];const i=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";a%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `);let h="";a%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${r})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${r})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const Zk={kernelName:Bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,segmentIds:r}=t,{numSegments:o}=s,i=a.shape.length,l=[];let u=0;const c=ro([u],i);let d=a;null!=c&&(d=Mg({inputs:{x:a},backend:n,attrs:{perm:c}}),l.push(d),u=io(1,i)[0]);const p=zi(d.shape,u,o),f=h([d.shape[u]]),m=Cg({inputs:{x:d},backend:n,attrs:{shape:[-1,f]}});l.push(m);const g=da(a.dtype),x=(e,t,s,a,r)=>{const o=e.shape[0],i=e.shape[1],u=Pi(i,r),c=new Yk({windowSize:u,inSize:i,batchSize:o,numSegments:r},t),h=n.compileAndRun(c,[e,s],a);if(l.push(h),h.shape[1]===r)return h;const d=Dv({backend:n,attrs:{start:0,stop:r,step:1,dtype:"float32"}}),p=Pk({inputs:{x:d},backend:n,attrs:{reps:[i/u]}});l.push(d),l.push(p);return x(h,t,p,a,r)},b=Cg({inputs:{x:x(m,"unsortedSegmentSum",r,g,o)},backend:n,attrs:{shape:p}});let y=b;if(null!=c){l.push(b);const e=oo(c);y=Mg({inputs:{x:y},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}},Jk=[zg,Vg,Ug,Gg,Xg,Yg,Zg,Jg,ax,rx,ox,ix,lx,ux,cx,px,fx,xx,bx,yx,wx,Tx,Ex,Rx,Mx,Bx,Wx,ug,Gx,Jx,ob,hb,db,pb,fb,mb,gb,xb,yb,Sb,Cb,$b,Eb,_b,Db,Mb,Bb,zb,Wb,Ub,Gb,Hb,jb,Kb,Yb,Jb,ty,ay,oy,ly,uy,dy,my,gy,by,ky,wy,Iy,ig,Ny,qx,Sy,Cy,$y,dg,Ty,Ey,Ry,Ay,_y,Fy,Oy,Dy,By,zy,Vy,Uy,Gy,Hy,Ky,qy,Yy,Zy,Jy,Qy,nv,sv,dv,Sg,fv,gv,bv,vv,_x,wv,Sv,Cv,Rv,Av,mg,_v,Fv,Ov,Mv,Ox,ov,Lv,Pv,Wv,$g,Gv,jv,qv,Zv,ek,nk,sk,ak,ok,lk,ck,hk,pk,fk,mk,gk,$x,hv,xk,bk,yk,vk,kk,wk,Ik,Nk,Ck,$k,Ek,Rk,_k,Fk,Ok,Dk,uv,Dg,Mk,Lk,zk,Hk,Xk,Lg,Kk,qk,Zk,Nv];for(const e of Jk)Zn(e);class Qk{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class ew{refCount(e){return tw("refCount")}incRef(e){return tw("incRef")}timerAvailable(){return!0}time(e){return tw("time")}read(e){return tw("read")}readSync(e){return tw("readSync")}readToGPU(e,t){return tw("readToGPU")}numDataIds(){return tw("numDataIds")}disposeData(e,t){return tw("disposeData")}write(e,t,n){return tw("write")}move(e,t,n,s,a){return tw("move")}createTensorFromGPUData(e,t,n){return tw("createTensorFromGPUData")}memory(){return tw("memory")}floatPrecision(){return tw("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return tw("dispose")}}function tw(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function nw(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,rw(e,t,n)}function sw(e,t,n){return Math.max(e,Math.min(t,n))}function aw(e){return e%2==0?e:e+1}function rw(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function ow(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function iw(e,t,n=""){ow(cw(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function lw(e){ow(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function uw(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function cw(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function hw(e){return e%1==0}function dw(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function pw(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function fw(e,t=(e=>0),n,s){return new Promise(((a,r)=>{let o=0;const i=()=>{if(e())return void a();o++;const l=t(o);null!=n&&o>=n?r():null!=s?s(i,l):setTimeout(i,l)};i()}))}function mw(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const a=e.slice();return a[s]=t/n,a}function gw(e,t){const n=t.length;return ow((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),ow(e.every((e=>hw(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function xw(e,t){const n=[],s=[],a=null!=t&&Array.isArray(t)&&0===t.length,r=null==t||a?null:gw(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=r){if(r[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==r[o]||r[o]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),r[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function bw(e,t){return yw(e,t)}function yw(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function vw(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function kw(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function ww(e){return"string"==typeof e||e instanceof String}function Iw(e){return"number"==typeof e}function Nw(e){return Array.isArray(e)?Nw(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":Iw(e)?"float32":ww(e)?"string":"boolean"==typeof e?"bool":"float32"}function Sw(e){return!!(e&&e.constructor&&e.call&&e.apply)}function Cw(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function $w(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function Tw(e,t,n,s=!1){const a=new Array;if(1===t.length){const r=t[0]*(s?2:1);for(let t=0;t<r;t++)a[t]=n[e+t]}else{const r=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(s?2:1);for(let t=0;t<r;t++)a[t]=Tw(e+t*i,o,n,s)}return a}function Ew(e,t,n=!1){if(0===e.length)return t[0];const s=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return Tw(0,e,t,n)}function Rw(e,t){const n=Aw(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function Aw(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function _w(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return Ew(e,new Float32Array(n));if("int32"===t)return Ew(e,new Int32Array(n));if("bool"===t)return Ew(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function Fw(e){e.forEach((t=>{ow(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function Ow(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function Dw(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function Mw(e){return e&&e.then&&"function"==typeof e.then}const Lw="tfjsflags";class Bw{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=Pw,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(zw().getBool("IS_TEST")||zw().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];zw().getBool("IS_TEST")||zw().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(Mw(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getString(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(Lw in e){e[Lw].split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){const n=t.toLowerCase();return"true"===n||"false"===n?"true"===n:""+ +n===n?+n:t}(0,n)}))}}}function Pw(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function zw(){return Vw}let Ww,Vw=null;function Uw(){if(null==Ww){let e;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}Ww=e}return Ww}function Gw(e,t){const n=function(){const e=Uw();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}const Hw="Abs",jw="Acos",Xw="Acosh",Kw="Add",qw="AddN",Yw="All",Zw="Any",Jw="ArgMax",Qw="ArgMin",eI="Asin",tI="Asinh",nI="Atan",sI="Atanh",aI="Atan2",rI="AvgPool",oI="AvgPoolGrad",iI="AvgPool3D",lI="AvgPool3DGrad",uI="BatchMatMul",cI="BatchToSpaceND",hI="Bincount",dI="BitwiseAnd",pI="BroadcastArgs",fI="Cast",mI="Ceil",gI="ClipByValue",xI="Complex",bI="ComplexAbs",yI="Concat",vI="Conv2D",kI="Conv2DBackpropFilter",wI="Conv2DBackpropInput",II="Conv3D",NI="Conv3DBackpropFilterV2",SI="Conv3DBackpropInputV2",CI="Cos",$I="Cosh",TI="Cumprod",EI="Cumsum",RI="CropAndResize",AI="DenseBincount",_I="DepthToSpace",FI="DepthwiseConv2dNative",OI="DepthwiseConv2dNativeBackpropFilter",DI="DepthwiseConv2dNativeBackpropInput",MI="Diag",LI="Dilation2D",BI="Dilation2DBackpropInput",PI="Dilation2DBackpropFilter",zI="RealDiv",WI="Einsum",VI="Elu",UI="EluGrad",GI="Erf",HI="Equal",jI="Exp",XI="ExpandDims",KI="Expm1",qI="FFT",YI="Fill",ZI="FlipLeftRight",JI="Floor",QI="FloorDiv",eN="FusedBatchNorm",tN="GatherV2",nN="GatherNd",sN="Greater",aN="GreaterEqual",rN="Identity",oN="IFFT",iN="Imag",lN="IsFinite",uN="IsInf",cN="IsNan",hN="LeakyRelu",dN="Less",pN="LessEqual",fN="LinSpace",mN="Log",gN="Log1p",xN="LogicalAnd",bN="LogicalNot",yN="LogicalOr",vN="LRN",kN="LRNGrad",wN="Max",IN="Maximum",NN="MaxPool",SN="MaxPoolGrad",CN="MaxPool3D",$N="MaxPool3DGrad",TN="MaxPoolWithArgmax",EN="Mean",RN="Min",AN="Minimum",_N="MirrorPad",FN="Mod",ON="Multinomial",DN="Multiply",MN="Neg",LN="NotEqual",BN="NonMaxSuppressionV3",PN="NonMaxSuppressionV4",zN="NonMaxSuppressionV5",WN="OnesLike",VN="OneHot",UN="Pack",GN="PadV2",HN="Pow",jN="Prelu",XN="Prod",KN="RaggedGather",qN="RaggedRange",YN="RaggedTensorToTensor",ZN="Range",JN="Real",QN="Reciprocal",eS="Relu",tS="Reshape",nS="ResizeNearestNeighbor",sS="ResizeNearestNeighborGrad",aS="ResizeBilinear",rS="ResizeBilinearGrad",oS="Relu6",iS="Reverse",lS="Round",uS="Rsqrt",cS="ScatterNd",hS="TensorScatterUpdate",dS="SearchSorted",pS="Select",fS="Selu",mS="Slice",gS="Sin",xS="Sinh",bS="Sign",yS="Sigmoid",vS="Softplus",kS="Sqrt",wS="Sum",IS="SpaceToBatchND",NS="SplitV",SS="Softmax",CS="SparseFillEmptyRows",$S="SparseReshape",TS="SparseSegmentMean",ES="SparseSegmentSum",RS="SparseToDense",AS="SquaredDifference",_S="Square",FS="StaticRegexReplace",OS="StridedSlice",DS="StringNGrams",MS="StringSplit",LS="StringToHashBucketFast",BS="Sub",PS="Tan",zS="Tanh",WS="Tile",VS="TopK",US="Transform",GS="Transpose",HS="Unique",jS="Unpack",XS="UnsortedSegmentSum",KS="ZerosLike",qS="Step",YS="FromPixels",ZS="RotateWithOffset",JS="_FusedMatMul",QS="FusedConv2D",eC="FusedDepthwiseConv2D";function tC(...e){zw().getBool("IS_TEST")||zw().getBool("PROD")||console.warn(...e)}const nC=Gw("kernelRegistry",(()=>new Map)),sC=Gw("gradRegistry",(()=>new Map));function aC(e,t){const n=uC(e,t);return nC.get(n)}function rC(e){return sC.get(e)}function oC(e){const t=nC.entries(),n=[];for(;;){const{done:s,value:a}=t.next();if(s)break;const[r,o]=a,[i]=r.split("_");i===e&&n.push(o)}return n}function iC(e){const{kernelName:t,backendName:n}=e,s=uC(t,n);nC.has(s)&&tC(`The kernel '${t}' for backend '${n}' is already registered`),nC.set(s,e)}function lC(e){const{kernelName:t}=e;sC.has(t)&&zw().getBool("DEBUG")&&tC(`Overriding the gradient for '${t}'`),sC.set(t,e)}function uC(e,t){return`${t}_${e}`}function cC(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}const hC=Qn||Ns;function dC(e){return hC.fromString(e,!0,16)}const pC=dC("c3a5c85c97cb3127"),fC=dC("b492b66fbe98f273"),mC=dC("9ae16a3b2f90404f");function gC(e){return e.xor(e.shru(47))}function xC(e,t,n){const s=e.slice(t,t+n);return hC.fromBytes(Array.from(s),!0,!0)}function bC(e,t){return xC(e,t,8)}function yC(e,t){return xC(e,t,4)}function vC(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function kC(e,t,n=dC("9ddfea08eb382d69")){let s=e.xor(t).mul(n);s=s.xor(s.shru(47));let a=t.xor(s).mul(n);return a=a.xor(a.shru(47)),a=a.mul(n),a}function wC(e,t,n,s){return function(e,t,n,s,a,r){a=a.add(e),r=vC(r.add(a).add(s),21);const o=a;return a=(a=a.add(t)).add(n),r=r.add(vC(a,44)),[a.add(s),r.add(o)]}(bC(e,t),bC(e,t+8),bC(e,t+16),bC(e,t+24),n,s)}function IC(e,t=e.length){const n=hC.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=mC.add(2*t),s=bC(e,0).add(mC),a=bC(e,t-8);return kC(vC(a,37).mul(n).add(s),vC(s,25).add(a).mul(n),n)}if(t>=4){const n=mC.add(2*t);return kC(yC(e,0).shl(3).add(t),yC(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),s=t+(e[t-1]<<2);return gC(mC.mul(n).xor(pC.mul(s))).mul(mC)}return mC}(e,t):function(e,t=e.length){const n=mC.add(2*t),s=bC(e,0).mul(fC),a=bC(e,8),r=bC(e,t-8).mul(n),o=bC(e,t-16).mul(mC);return kC(vC(s.add(a),43).add(vC(r,30)).add(o),s.add(vC(a.add(mC),18)).add(r),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=mC.add(2*t),s=bC(e,0).mul(mC),a=bC(e,8),r=bC(e,t-8).mul(n),o=bC(e,t-16).mul(mC),i=vC(s.add(a),43).add(vC(r,30)).add(o),l=kC(i,s.add(vC(a.add(mC),18)).add(r),n),u=bC(e,16).mul(n),c=bC(e,24),h=i.add(bC(e,t-32)).mul(n),d=l.add(bC(e,t-24)).mul(n);return kC(vC(u.add(c),43).add(vC(h,30)).add(d),u.add(vC(c.add(s),18)).add(h),n)}(e,t);let s=n,a=n.mul(fC).add(113),r=gC(a.mul(mC).add(113)).mul(mC),o=[hC.UZERO,hC.UZERO],i=[hC.UZERO,hC.UZERO];s=s.mul(mC).add(bC(e,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=vC(s.add(a).add(o[0]).add(bC(e,l+8)),37).mul(fC),a=vC(a.add(o[1]).add(bC(e,l+48)),42).mul(fC),s=s.xor(i[1]),a=a.add(o[0]).add(bC(e,l+40)),r=vC(r.add(i[0]),33).mul(fC),o=wC(e,l,o[1].mul(fC),s.add(i[0])),i=wC(e,l+32,r.add(i[1]),a.add(bC(e,l+16))),[r,s]=[s,r],l+=64}while(l!==u);const h=fC.add(r.and(255).shl(1));return l=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),s=vC(s.add(a).add(o[0]).add(bC(e,l+8)),37).mul(h),a=vC(a.add(o[1]).add(bC(e,l+48)),42).mul(h),s=s.xor(i[1].mul(9)),a=a.add(o[0].mul(9).add(bC(e,l+40))),r=vC(r.add(i[0]),33).mul(h),o=wC(e,l,o[1].mul(h),s.add(i[0])),i=wC(e,l+32,r.add(i[1]),a.add(bC(e,l+16))),[r,s]=[s,r],kC(kC(o[0],i[0],h).add(gC(a).mul(pC)).add(r),kC(o[1],i[1],h).add(s),h)}function NC(e,t){return"string"===t?$C(e):SC([e],t)}function SC(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=RC(e)),zw().getBool("DEBUG")&&function(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function CC(){return zw().platform.now()}function $C(e,t="utf-8"){return t=t||"utf-8",zw().platform.encode(e,t)}function TC(e,t="utf-8"){return t=t||"utf-8",zw().platform.decode(e,t)}function EC(e){return null!=zw().platform.isTypedArray?zw().platform.isTypedArray(e):cC(e)}function RC(e,t=[],n=!1){if(null==t&&(t=[]),"boolean"==typeof e||"number"==typeof e||"string"==typeof e||Mw(e)||null==e||EC(e)&&n)t.push(e);else if(Array.isArray(e)||EC(e))for(let s=0;s<e.length;++s)RC(e[s],t,n);else{let s=-1;for(const t of Object.keys(e))/^([1-9]+[0-9]*|0)$/.test(t)&&(s=Math.max(s,Number(t)));for(let a=0;a<=s;a++)RC(e[a],t,n)}return t}class AC{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new FC)}profileKernel(e,t,n){let s;const a=()=>{s=n()};let r;const o=CC();if(this.backendTimer.timerAvailable())r=this.backendTimer.time(a);else{a();for(const e of s)e.dataSync();r=Promise.resolve({kernelMs:CC()-o})}if(zw().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then((t=>{_C(t,n.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:r.then((e=>e.kernelMs)),extraInfo:r.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:a,extraInfo:r}=e;n.forEach((e=>{Promise.all([e.data(),s,r]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],a,n[2])}))}))}}function _C(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class FC{logKernelProfile(e,t,n,s,a,r){const o="number"==typeof s?pw(`${s}ms`,9):s.error,i=pw(e,25),l=t.rank,u=t.size,c=pw(t.shape.toString(),14);let h="";for(const e in a){const n=a[e];if(null!=n){const s=n.shape||t.shape,a=s.length;h+=`${e}: ${a}D ${a>0?s:""} `}}console.log(`%c${i}\t%c${o}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${r}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}const OC=20,DC=3,MC=7;function LC(e,t,n,s){const a=$w(t),r=function(e,t,n,s){const a=uw(t),r=s[s.length-1],o=new Array(r).fill(0),i=t.length,l="complex64"===n?WC(e):e;if(i>1)for(let e=0;e<a/r;e++){const t=e*r;for(let e=0;e<r;e++)o[e]=Math.max(o[e],BC(l[t+e],0,n).length)}return o}(e,t,n,a),o=t.length,i=zC(e,t,n,a,r),l=["Tensor"];return s&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${o}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(i.map((e=>"    "+e)).join("\n")),l.join("\n")}function BC(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(MC))} + ${parseFloat(e[1].toFixed(MC))}j`:ww(e)?`'${e}'`:"bool"===n?PC(e):parseFloat(e.toFixed(MC)).toString(),pw(s,t)}function PC(e){return 0===e?"false":"true"}function zC(e,t,n,s,a,r=!0){const o="complex64"===n?2:1,i=t[0],l=t.length;if(0===l){if("complex64"===n){return[BC(WC(e)[0],0,n)]}return"bool"===n?[PC(e[0])]:[e[0].toString()]}if(1===l){if(i>OC){const t=DC*o;let s=Array.from(e.slice(0,t)),r=Array.from(e.slice((i-DC)*o,i*o));return"complex64"===n&&(s=WC(s),r=WC(r)),["["+s.map(((e,t)=>BC(e,a[t],n))).join(", ")+", ..., "+r.map(((e,t)=>BC(e,a[i-DC+t],n))).join(", ")+"]"]}return["["+("complex64"===n?WC(e):Array.from(e)).map(((e,t)=>BC(e,a[t],n))).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*o,d=[];if(i>OC){for(let t=0;t<DC;t++){const s=t*h,r=s+h;d.push(...zC(e.slice(s,r),u,n,c,a,!1))}d.push("...");for(let t=i-DC;t<i;t++){const s=t*h,r=s+h;d.push(...zC(e.slice(s,r),u,n,c,a,t===i-1))}}else for(let t=0;t<i;t++){const s=t*h,r=s+h;d.push(...zC(e.slice(s,r),u,n,c,a,t===i-1))}const p=2===l?",":"";d[0]="["+(i>0?d[0]+p:"");for(let e=1;e<d.length-1;e++)d[e]=" "+d[e]+p;let f=",\n";for(let e=2;e<l;e++)f+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(r?"":f),d}function WC(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class VC{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=uw(e),null!=n){const e=n.length;ow(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||yw(t,this.size),this.strides=$w(e)}set(e,...t){0===t.length&&(t=[0]),ow(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return UC().makeTensor(this.values,this.shape,this.dtype)}}let UC=null,GC=null;class HC{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=uw(e),this.strides=$w(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return GC.buffer(this.shape,this.dtype,e)}bufferSync(){return GC.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Ew(this.shape,e,"complex64"===this.dtype)}arraySync(){return Ew(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=UC().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>TC(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),UC().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=UC().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>TC(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await UC().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),UC().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return GC.print(this,e)}clone(){return this.throwIfDisposed(),GC.clone(this)}toString(e=!1){return LC(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),GC.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),UC().makeVariable(this,e,t,n)}}function jC(){return Gw("Tensor",(()=>HC))}Object.defineProperty(HC,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),jC();class XC extends HC{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!cw(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);UC().disposeTensor(this),this.dataId=e.dataId,UC().incRef(this,null)}dispose(){UC().disposeVariable(this),this.isDisposedInternal=!0}}var KC,qC,YC,ZC,JC;Object.defineProperty(XC,Symbol.hasInstance,{value:e=>e instanceof HC&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(KC||(KC={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(qC||(qC={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(YC||(YC={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(ZC||(ZC={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(JC||(JC={}));const QC={float32:ZC,int32:qC,bool:YC,complex64:JC};function e$(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return QC[e][t]}function t$(e){return e$(e,"int32")}function n$(e){return null!=e&&"object"==typeof e&&"texture"in e&&e.texture instanceof WebGLTexture}function s$(e){return"undefined"!=typeof GPUBuffer&&null!=e&&"object"==typeof e&&"buffer"in e&&e.buffer instanceof GPUBuffer}function a$(e,t){if(e.dtype===t.dtype)return[e,t];const n=e$(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function r$(e){const t=[];return o$(e,t,new Set),t}function o$(e,t,n){if(null==e)return;if(e instanceof HC)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const a=e;for(const e in a){const s=a[e];n.has(s)||(n.add(s),o$(s,t,n))}}function i$(e){return null!=e.kernelName}class l${constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class u${constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new l$}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(tC(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new AC(this.backendInstance),!0}setupRegisteredKernels(){oC(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){oC(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof ew||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,tC(`Initialization of backend ${e} failed`),tC(n.stack||n.message)),!1)));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(t){return tC(`Initialization of backend ${e} failed`),tC(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:a}=this.initializeBackend(n);if(a||s)return{name:n,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,a=this.readSync(t),r=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,a,n.shape,n.dtype,r),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return u$.nextTensorId++}nextVariableId(){return u$.nextVariableId++}clone(e){const t=h$.runKernel(rN,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return h$.runKernel(fI,t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=aC(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let a=0;n.forEach((e=>{a+="complex64"===e.dtype?3:1}));const r=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=s-t-a-r;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),a=this.state.numBytes,r=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=i$(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(i$(e)){const{kernelName:t,inputs:a,attrs:r}=e;null==this.backendName&&this.backend;const l=aC(t,this.backendName);ow(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();i=l.kernelFunc({inputs:a,attrs:r,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const u=o.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(s){const e=this.getTensorsForGradient(t,a,u);n=this.saveTensorsForBackwardMode(e)}return u}}else{const{forwardFunc:t}=e,a=e=>{s&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy((()=>t(this.backend,a)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:u,attrs:c}=e,h=i$(e)?null:e.backwardsFunc;let d;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(d=this.profiler.profileKernel(l,u,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(d),t=d.outputs):t=o()})),s&&this.addTapeNode(l,u,t,h,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-r,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map((e=>null!=u[e]?u[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:d.timeMs,extraInfo:d.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){const t=e.map((e=>this.keep(this.clone(e))));return t}getTensorsForGradient(e,t,n){const s=rC(e);if(null!=s){const e=s.inputsToSave||[],a=s.outputsToSave||[];let r;s.saveAllInputs?(ow(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),r=Object.keys(t).map((e=>t[e]))):r=e.map((e=>t[e]));const o=n.filter(((e,t)=>a[t]));return r.concat(o)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let a=e;"string"===n&&ww(e[0])&&(a=e.map((e=>$C(e))));const r=s.write(a,t,n),o=new HC(t,n,r,this.nextTensorId());if(this.trackTensor(o,s),"string"===n){const e=this.state.tensorInfo.get(r),t=function(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}(a);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,s){const a={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(a,s)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:s,dtype:a}=e,r=new HC(s,a,n,this.nextTensorId());return this.trackTensor(r,t),r}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const a=new XC(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*kw(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof XC||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*kw(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,a,r){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:a},i=rC(e);null!=i&&(s=i.gradFunc),null!=s&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=Aw(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],a,r))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=r$(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n,s=!1){if(ow(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const a=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));ow(a instanceof HC,(()=>"The result y returned by f() must be a tensor."));const r=function(e,t,n){const s={},a={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const r=e[n],o=r.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(s[n.id]){r.outputs.forEach((e=>s[e.id]=!0)),i=!0,a[r.id]=!0;break}if(i)break}}const r={};r[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(r[n.outputs[e].id]){for(const e in s)r[s[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(a[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const a=n.inputs[t];s[a.id]&&(e[t]=a)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,a);if(!s&&0===r.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[a.id]=null==n?function(e){const t=Rw(uw(e),"float32");return h$.makeTensor(t,e,"float32")}(a.shape):n,function(e,t,n,s){for(let a=t.length-1;a>=0;a--){const r=t[a],o=[];if(r.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==r.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${r.kernelName}.`);const i=r.gradient(o);for(const t in r.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const a=n((()=>i[t]()));if("float32"!==a.dtype)throw new Error(`Error in gradient for op ${r.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${a.dtype}'`);const o=r.inputs[t];if(!cw(a.shape,o.shape))throw new Error(`Error in gradient for op ${r.kernelName}. The gradient of input '${t}' has shape '${a.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=a;else{const t=e[o.id];e[o.id]=s(t,a),t.dispose()}}}}(e,r,(e=>this.tidy(e)),d$);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:a,grads:s}}))}customGrad(e){return ow(Sw(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;ow(t.every((e=>e instanceof HC)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};t.forEach(((e,t)=>{s[t]=e}));return this.runKernelFunc({forwardFunc:(s,a)=>(n=e(...t,a),ow(n.value instanceof HC,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),ow(Sw(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,s)=>{const a=n.gradFunc(e,s),r=Array.isArray(a)?a:[a];ow(r.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),ow(r.every((e=>e instanceof HC)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return r.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=CC(),n=await this.backend.time(e);return n.wallMs=CC()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new l$;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function c$(){const e=Uw();if(null==e._tfengine){const t=new Bw(e);e._tfengine=new u$(t)}var t;return t=e._tfengine.ENV,Vw=t,UC=()=>e._tfengine,e._tfengine}u$.nextTensorId=0,u$.nextVariableId=0;const h$=c$();function d$(e,t){const n={a:e,b:t};return h$.runKernel(Kw,n)}function p$(e){if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function f$(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const m$=zw();function g$(e,t){let n=e;if(EC(e))return"string"===t?[]:[e.length];if(n$(e)){const t=e.channels||"RGBA";return[e.height,e.width*t.length]}if(s$(e))return[e.buffer.size/(null==t?4:kw(t))];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||EC(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&zw().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&x$(e,s,[]),s}function x$(e,t,n){if(n=n||[],!Array.isArray(e)&&!EC(e))return void ow(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));ow(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),ow(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let t=0;t<e.length;++t)x$(e[t],s,n.concat(t))}function b$(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function y$(e,t,n,s="numeric"){if(e instanceof jC())return b$(s,e.dtype,t,n),e;let a=Nw(e);if("string"!==a&&["bool","int32","float32"].indexOf(s)>=0&&(a=s),b$(s,a,t,n),null==e||!EC(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const r=g$(e,a);EC(e)||Array.isArray(e)||(e=[e]);const o="string"!==a?SC(e,a):RC(e,[],!0);return h$.makeTensor(o,r,a)}function v$(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,a)=>y$(e,`${t}[${a}]`,n,s)))}m$.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),m$.registerFlag("IS_BROWSER",(()=>f$())),m$.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),m$.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),m$.registerFlag("IS_SAFARI",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor))),m$.registerFlag("PROD",(()=>!1)),m$.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>m$.getBool("DEBUG"))),m$.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),m$.registerFlag("IS_TEST",(()=>!1)),m$.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>m$.getBool("DEBUG"))),m$.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),m$.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),m$.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));const k$="__op";function w$(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=k$;const a=(...e)=>{h$.startScope(n);try{const t=s(...e);return Mw(t)&&console.error("Cannot return a Promise inside of tidy."),h$.endScope(t),t}catch(e){throw h$.endScope(null),e}};return Object.defineProperty(a,"name",{value:n,configurable:!0}),a}const I$=w$({complex_:function(e,t){const n=y$(e,"real","complex"),s=y$(t,"imag","complex");iw(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const a={real:n,imag:s};return h$.runKernel(xI,a)}});function N$(e,t,n,s){if(null==s)s=Nw(e);else if("complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(s$(e)||n$(e)){if("float32"!==s&&"int32"!==s)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${s}.`);return h$.backend.createTensorFromGPUData(e,t||n,s)}if(!EC(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Fw(t);const e=uw(t),s=uw(n);ow(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let e=0;e<n.length;++e){const s=n[e],a=e!==n.length-1||s!==uw(t.slice(e));ow(n[e]===t[e]||!a,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return EC(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?SC(e,s):RC(e,[],!0),h$.makeTensor(e,t,s)}function S$(e,t,n){return N$(e,t,g$(e,n),n)}const C$={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};class $${static join(e){return new $$(e).slice()}constructor(e){if(this.shards=[],this.previousShardIndex=0,null==e)return;if(e instanceof Array||(e=[e]),0===(e=e.map((e=>EC(e)?e.buffer:e))).length)return;this.bufferUniformSize=e[0].byteLength;let t=0;for(let n=0;n<e.length;n++){const s=e[n];n!==e.length-1&&s.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const a=t+s.byteLength;this.shards.push({buffer:s,start:t,end:a}),t=a}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(e=0,t=this.byteLength){if(0===this.shards.length)return new ArrayBuffer(0);if(e=isNaN(Number(e))?0:e,t=isNaN(Number(t))?0:t,e=Math.max(0,e),(t=Math.min(this.byteLength,t))<=e)return new ArrayBuffer(0);const n=this.findShardForByte(e);if(-1===n)throw new Error(`Could not find start shard for byte ${e}`);const s=new ArrayBuffer(t-e),a=new Uint8Array(s);let r=0;for(let s=n;s<this.shards.length;s++){const n=this.shards[s],o=e+r-n.start,i=r,l=Math.min(t,n.end)-n.start,u=new Uint8Array(n.buffer,o,l-o);if(a.set(u,i),r+=u.length,t<n.end)break}return s}findShardForByte(e){if(0===this.shards.length||e<0||e>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(e/this.bufferUniformSize),this.previousShardIndex;function t(t){return e<t.start?-1:e>=t.end?1:0}if(0===t(this.shards[this.previousShardIndex]))return this.previousShardIndex;const n=function(e,t){let n=0,s=e.length;for(;n<=s;){const a=Math.floor((s-n)/2)+n,r=t(e[a]);if(0===r)return a;r<0?s=a:n=a+1}return-1}(this.shards,t);return-1===n?-1:(this.previousShardIndex=n,this.previousShardIndex)}}const T$=4;async function E$(e,t){const n=[],s=[],a=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let r=0;r<a.length;++r){const o=a[r],i=Array.isArray(e)?e[r].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const l={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+T$*t.length,s=new Uint8Array(n);let a=0;for(let e=0;e<t.length;e++){const n=t[e],r=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(r,a),a+=T$,s.set(n,a),a+=n.length}e(s)}));s.push(e)}else s.push(i.data());null!=t&&(l.group=t),n.push(l)}return{data:A$(await Promise.all(s)),specs:n}}function R$(e,t){const n=new $$(e),s={};let a,r=0;for(const e of t){const t=e.name,o=e.dtype,i=e.shape,l=uw(i);let u;if("quantization"in e){const s=e.quantization;if("uint8"===s.dtype||"uint16"===s.dtype){if(!("min"in s)||!("scale"in s))throw new Error(`Weight ${e.name} with quantization ${s.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==s.dtype)throw new Error(`Weight ${e.name} has unknown quantization dtype ${s.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${e.name} is quantized with ${s.dtype} which only supports weights of type float32 not ${o}.`)}const i=C$[s.dtype],c=n.slice(r,r+l*i),h="uint8"===s.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===s.dtype||"uint16"===s.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=t*s.scale+s.min}}else{if("float16"!==s.dtype)throw new Error(`Unsupported quantization type ${s.dtype} for weight type float32.`);void 0===a&&(a=W$()),u=a(h)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==s.dtype&&"uint16"!==s.dtype)throw new Error(`Unsupported quantization type ${s.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=Math.round(t*s.scale+s.min)}}r+=l*i}else if("string"===o){const t=uw(e.shape);u=[];for(let e=0;e<t;e++){const e=new Uint32Array(n.slice(r,r+T$))[0];r+=T$;const t=new Uint8Array(n.slice(r,r+e));u.push(t),r+=e}}else{const e=C$[o],a=n.slice(r,r+l*e);if("float32"===o)u=new Float32Array(a);else if("int32"===o)u=new Int32Array(a);else if("bool"===o)u=new Uint8Array(a);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{u=new Float32Array(a);const e=new Float32Array(u.length/2),n=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],n[t]=u[2*t+1];const r=S$(e,i,"float32"),o=S$(n,i,"float32");s[t]=I$(r,o),r.dispose(),o.dispose()}}r+=l*e}"complex64"!==o&&(s[t]=S$(u,i,o))}return s}function A$(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const s=new Uint8Array(t);let a=0;return n.forEach((e=>{s.set(new Uint8Array(e.buffer),a),a+=e.byteLength})),s.buffer}const _$="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function F$(e){return _$?Buffer.byteLength(e,"utf8"):new Blob([e]).size}function O$(e){return $$.join(e)}function D$(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function M$(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(n.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function L$(e,t,n){const s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(s.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");s.weightSpecs=t,s.weightData=n}return null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(s.initializerSignature=e.initializerSignature),s}async function B$(e,t){let n,s;return null!=e.weightsManifest&&([n,s]=await t(e.weightsManifest)),L$(e,n,s)}function P$(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:F$(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:F$(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:new $$(e.weightData).byteLength}}function z$(e){const t=[];for(const n of e)t.push(...n.weights);return t}function W$(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const a=new ArrayBuffer(4*s.length),r=new Uint32Array(a);for(let a=0;a<s.length;a++){const o=s[a],i=e[n[o>>10]+(1023&o)]+t[o>>10];r[a]=i}return new Float32Array(a)}}class V${constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==V$.instance&&(V$.instance=new V$),V$.instance}static registerSaveRouter(e){V$.getInstance().saveRouters.push(e)}static registerLoadRouter(e){V$.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return V$.getHandlers(e,"save")}static getLoadHandlers(e,t){return V$.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?V$.getInstance().loadRouters:V$.getInstance().saveRouters).forEach((t=>{const a=t(e,n);null!==a&&s.push(a)})),s}}const U$=e=>V$.getSaveHandlers(e),G$="tensorflowjs",H$="models_store",j$="model_info_store";function X$(){if(!zw().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function K$(e){const t=e.result;t.createObjectStore(H$,{keyPath:"modelPath"}),t.createObjectStore(j$,{keyPath:"modelPath"})}class q${constructor(e){if(this.indexedDB=X$(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open(G$,1);s.onupgradeneeded=()=>K$(s),s.onsuccess=()=>{const a=s.result;if(null==t){const t=a.transaction(H$,"readonly"),s=t.objectStore(H$).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return a.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(a.close(),n(s.error)),t.oncomplete=()=>a.close()}else{t.weightData=$$.join(t.weightData);const s=P$(t),r=a.transaction(j$,"readwrite");let o,i,l=r.objectStore(j$);try{o=l.put({modelPath:this.modelPath,modelArtifactsInfo:s})}catch(e){return n(e)}o.onsuccess=()=>{i=a.transaction(H$,"readwrite");const o=i.objectStore(H$);let u;try{u=o.put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s})}catch(e){return n(e)}u.onsuccess=()=>e({modelArtifactsInfo:s}),u.onerror=e=>{l=r.objectStore(j$);const t=l.delete(this.modelPath);t.onsuccess=()=>(a.close(),n(u.error)),t.onerror=e=>(a.close(),n(u.error))}},o.onerror=e=>(a.close(),n(o.error)),r.oncomplete=()=>{null==i?a.close():i.oncomplete=()=>a.close()}}},s.onerror=e=>n(s.error)}))}}q$.URL_SCHEME="indexeddb://";const Y$=e=>{return zw().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(q$.URL_SCHEME)?(t=e.slice(q$.URL_SCHEME.length),new q$(t)):null;var t};V$.registerSaveRouter(Y$),V$.registerLoadRouter(Y$);class Z${constructor(){this.indexedDB=X$()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(G$,1);n.onupgradeneeded=()=>K$(n),n.onsuccess=()=>{const s=n.result,a=s.transaction(j$,"readonly"),r=a.objectStore(j$).getAll();r.onsuccess=()=>{const t={};for(const e of r.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},r.onerror=e=>(s.close(),t(r.error)),a.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){return e=function(e){return e.startsWith(q$.URL_SCHEME)?e.slice(q$.URL_SCHEME.length):e}(e),new Promise(((t,n)=>{const s=this.indexedDB.open(G$,1);s.onupgradeneeded=()=>K$(s),s.onsuccess=()=>{const a=s.result,r=a.transaction(j$,"readwrite"),o=r.objectStore(j$),i=o.get(e);let l;i.onsuccess=()=>{if(null==i.result)return a.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=o.delete(e),r=()=>{l=a.transaction(H$,"readwrite");const s=l.objectStore(H$).delete(e);s.onsuccess=()=>t(i.result.modelArtifactsInfo),s.onerror=e=>n(i.error)};s.onsuccess=r,s.onerror=e=>(r(),a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),r.oncomplete=()=>{null==l?a.close():l.oncomplete=()=>a.close()}},s.onerror=e=>n(s.error)}))}}const J$="/",Q$="tensorflowjs_models",eT="info",tT="model_topology",nT="weight_specs",sT="weight_data",aT="model_metadata";function rT(e){return{info:[Q$,e,eT].join(J$),topology:[Q$,e,tT].join(J$),weightSpecs:[Q$,e,nT].join(J$),weightData:[Q$,e,sT].join(J$),modelMetadata:[Q$,e,aT].join(J$)}}function oT(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function iT(e){const t=e.split(J$);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(J$)}class lT{constructor(e){if(!zw().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=rT(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=P$(e),a=$$.join(e.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(_$)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(a));const r={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(r)),{modelArtifactsInfo:s}}catch(e){throw oT(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){const e=JSON.parse(a);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const r=this.LS.getItem(this.keys.weightData);if(null==r)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(_$){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(r),t}}lT.URL_SCHEME="localstorage://";const uT=e=>{return zw().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(lT.URL_SCHEME)?(t=e.slice(lT.URL_SCHEME.length),new lT(t)):null;var t};V$.registerSaveRouter(uT),V$.registerLoadRouter(uT);class cT{constructor(){ow(zw().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),ow("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=Q$+J$,n=J$+eT;for(let s=0;s<this.LS.length;++s){const a=this.LS.key(s);if(a.startsWith(t)&&a.endsWith(n)){e[iT(a)]=JSON.parse(this.LS.getItem(a))}}return e}async removeModel(e){e=function(e){return e.startsWith(lT.URL_SCHEME)?e.slice(lT.URL_SCHEME.length):e}(e);const t=rT(e);if(null==this.LS.getItem(t.info))throw new Error(`Cannot find model at path '${e}'`);const n=JSON.parse(this.LS.getItem(t.info));return oT(t),n}}const hT="://";class dT{constructor(){this.managers={}}static getInstance(){return null==dT.instance&&(dT.instance=new dT),dT.instance}static registerManager(e,t){ow(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(hT)&&(e=e.slice(0,e.indexOf(hT))),ow(e.length>0,(()=>"scheme must not be an empty string."));const n=dT.getInstance();ow(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=dT.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(dT.getInstance().managers)}}function pT(e){if(-1===e.indexOf(hT))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${dT.getSchemes().join(",")}`);return{scheme:e.split(hT)[0],path:e.split(hT)[1]}}async function fT(e,t,n=!1){ow(e!==t,(()=>`Old path and new path are the same: '${e}'`));const s=V$.getLoadHandlers(e);ow(s.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),ow(s.length<2,(()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${e}.`));const a=s[0],r=V$.getSaveHandlers(t);ow(r.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),ow(r.length<2,(()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`));const o=r[0],i=pT(e).scheme,l=pT(e).path,u=i===pT(e).scheme,c=await a.load();n&&u&&await dT.getManager(i).removeModel(l);const h=await o.save(c);return n&&!u&&await dT.getManager(i).removeModel(l),h.modelArtifactsInfo}class mT{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){"undefined"!=typeof window&&zw().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{if(e.source===window&&e.data.name===this.messageName){e.stopPropagation();(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}}),!0))):setTimeout(e,t)}isTypedArray(e){return cC(e)}}if(zw().get("IS_BROWSER")){zw().setPlatform("browser",new mT);try{dT.registerManager(lT.URL_SCHEME,new cT)}catch(e){}try{dT.registerManager(q$.URL_SCHEME,new Z$)}catch(e){}}const gT=()=>require("node-fetch");let xT;class bT{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=zw().global.fetch?zw().global.fetch(e,t):(null==xT&&(xT=gT()),xT(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}isTypedArray(e){return this.util.types.isFloat32Array(e)||this.util.types.isInt32Array(e)||this.util.types.isUint8Array(e)||this.util.types.isUint8ClampedArray(e)}}function yT(e,t="float32",n){return t=t||"float32",Fw(e),new VC(e,t,n)}zw().get("IS_NODE")&&!zw().get("IS_BROWSER")&&zw().setPlatform("node",new bT);const vT=w$({cast_:function(e,t){const n=y$(e,"x","cast");if(!function(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},a={dtype:t};return h$.runKernel(fI,s,a)}});const kT=w$({clone_:function(e){const t={x:y$(e,"x","clone","string_or_numeric")};return h$.runKernel(rN,t)}});function wT(e,t=!1){console.log(e.toString(t))}c$();function IT(){return h$}function NT(){return h$.memory()}function ST(e,t){return h$.tidy(e,t)}function CT(e){r$(e).forEach((e=>e.dispose()))}function $T(e){return h$.keep(e)}function TT(e,t,n=1){return h$.registerBackend(e,t,n)}!function(e){GC=e}({buffer:yT,cast:vT,clone:kT,print:wT});const ET=w$({add_:function(e,t){let n=y$(e,"a","add"),s=y$(t,"b","add");[n,s]=a$(n,s);const a={a:n,b:s};return h$.runKernel(Kw,a)}});const RT=w$({floorDiv_:function(e,t){let n=y$(e,"a","floorDiv"),s=y$(t,"b","floorDiv");[n,s]=a$(n,s);const a={a:n,b:s};return h$.runKernel(QI,a)}});const AT=w$({div_:function(e,t){let n=y$(e,"a","div"),s=y$(t,"b","div");if([n,s]=a$(n,s),"int32"===n.dtype&&"int32"===s.dtype)return RT(n,s);const a={a:n,b:s};return h$.runKernel(zI,a,{})}});const _T=w$({mul_:function(e,t){let n=y$(e,"a","mul"),s=y$(t,"b","mul");[n,s]=a$(n,s);const a={a:n,b:s};return h$.runKernel(DN,a)}});const FT=w$({abs_:function(e){const t=y$(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return h$.runKernel(bI,e)}{const e={x:t};return h$.runKernel(Hw,e)}}});const OT=w$({acos_:function(e){const t={x:y$(e,"x","acos")};return h$.runKernel(jw,t)}});const DT=w$({acosh_:function(e){const t={x:y$(e,"x","acosh")};return h$.runKernel(Xw,t)}});const MT=w$({addN_:function(e){ow(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),ow(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>y$(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!cw(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const s=t;return h$.runKernel(qw,s)}});const LT=w$({all_:function(e,t=null,n=!1){const s={x:y$(e,"x","all","bool")},a={axis:t,keepDims:n};return h$.runKernel(Yw,s,a)}});const BT=w$({any_:function(e,t=null,n=!1){const s={x:y$(e,"x","any","bool")},a={axis:t,keepDims:n};return h$.runKernel(Zw,s,a)}});const PT=w$({argMax_:function(e,t=0){const n={x:y$(e,"x","argMax")},s={axis:t};return h$.runKernel(Jw,n,s)}});const zT=w$({argMin_:function(e,t=0){const n={x:y$(e,"x","argMin")},s={axis:t};return h$.runKernel(Qw,n,s)}});const WT=w$({asin_:function(e){const t={x:y$(e,"x","asin")};return h$.runKernel(eI,t)}});const VT=w$({asinh_:function(e){const t={x:y$(e,"x","asinh")};return h$.runKernel(tI,t)}});const UT=w$({atan_:function(e){const t={x:y$(e,"x","atan")};return h$.runKernel(nI,t)}});const GT=w$({atan2_:function(e,t){let n=y$(e,"a","atan2"),s=y$(t,"b","atan2");[n,s]=a$(n,s);const a={a:n,b:s};return h$.runKernel(aI,a)}});const HT=w$({atanh_:function(e){const t={x:y$(e,"x","atanh")};return h$.runKernel(sI,t)}});function jT(e,t,n,s,a="NHWC",r){return qT(e,[...t,e[3]],n,r,s,null,null,rE(a))}function XT(e,t,n,s,a,r,o="channelsLast"){const[i,l]=JT(t);let u;if("channelsLast"===o)u=[i,l,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);u=[i,l,e[1],e[1]]}return qT(e,u,n,s,a,r,!1,o)}function KT(e,t,n,s,a,r,o="NDHWC"){const[i,l,u]=QT(t);let c,h;if("NDHWC"===o)h="channelsLast",c=[i,l,u,e[4],e[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);h="channelsFirst",c=[i,l,u,e[1],e[1]]}return YT(e,c,n,s,a,!1,h,r)}function qT(e,t,n,s,a,r,o=!1,i="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,h,u,c]=e}const[d,p,,f]=t,[m,g]=JT(n),[x,b]=JT(s),y=eE(d,x),v=eE(p,b),{padInfo:k,outHeight:w,outWidth:I}=function(e,t,n,s,a,r,o,i,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,s,a){null==s&&(s=ZT(e,t,n));const r=e[0],o=e[1],i=tE((r-t+2*s)/n+1,a),l=tE((o-t+2*s)/n+1,a);return[i,l]}([t,n],r,s,e,i);c=a[0],h=a[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/a);const e=Math.max(0,(c-1)*s+r-t),i=Math.max(0,(h-1)*a+o-n),l=Math.floor(e/2),d=e-l,p=Math.floor(i/2);u={top:l,bottom:d,left:p,right:i-p,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-r+1)/s),h=Math.ceil((n-o+1)/a);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const d="channelsLast"===l?e[1][0]:e[2][0],p="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:d,bottom:p,left:f,right:m,type:0===d&&0===p&&0===f&&0===m?"VALID":"EXPLICIT"},c=tE((t-r+d+p)/s+1,i),h=tE((n-o+f+m)/a+1,i)}}return{padInfo:u,outHeight:c,outWidth:h}}(a,u,c,m,g,y,v,r,i),N=o?f*h:f;let S;return"channelsFirst"===i?S=[l,N,w,I]:"channelsLast"===i&&(S=[l,w,I,N]),{batchSize:l,dataFormat:i,inHeight:u,inWidth:c,inChannels:h,outHeight:w,outWidth:I,outChannels:N,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:d,filterWidth:p,effectiveFilterHeight:y,effectiveFilterWidth:v,dilationHeight:x,dilationWidth:b,inShape:e,outShape:S,filterShape:t}}function YT(e,t,n,s,a,r=!1,o="channelsLast",i){let[l,u,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h,d]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,d,u,c,h]=e}const[p,f,m,,g]=t,[x,b,y]=QT(n),[v,k,w]=QT(s),I=eE(p,v),N=eE(f,k),S=eE(m,w),{padInfo:C,outDepth:$,outHeight:T,outWidth:E}=function(e,t,n,s,a,r,o,i,l,u,c){let h,d,p,f;"valid"===e&&(e=0);if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const m=function(e,t,n,s,a,r){null==a&&(a=ZT(e,t[0],s[0]));const o=[0,0,0,n];for(let n=0;n<3;n++)e[n]+2*a>=t[n]&&(o[n]=tE((e[n]-t[n]+2*a)/s[n]+1,r));return o}([t,n,s,1],[i,l,u],1,[a,r,o],e,c);d=m[0],p=m[1],f=m[2]}else{if("same"!==e)throw Error(`Unknown padding parameter: ${e}`);{d=Math.ceil(t/a),p=Math.ceil(n/r),f=Math.ceil(s/o);const e=(d-1)*a+i-t,c=(p-1)*r+l-n,m=(f-1)*o+u-s,g=Math.floor(e/2),x=e-g,b=Math.floor(c/2),y=c-b,v=Math.floor(m/2);h={top:b,bottom:y,left:v,right:m-v,front:g,back:x,type:"SAME"}}}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(a,u,c,h,x,b,y,I,N,S,i),R=r?g*d:g;let A;return"channelsFirst"===o?A=[l,R,$,T,E]:"channelsLast"===o&&(A=[l,$,T,E,R]),{batchSize:l,dataFormat:o,inDepth:u,inHeight:c,inWidth:h,inChannels:d,outDepth:$,outHeight:T,outWidth:E,outChannels:R,padInfo:C,strideDepth:x,strideHeight:b,strideWidth:y,filterDepth:p,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:N,effectiveFilterWidth:S,dilationDepth:v,dilationHeight:k,dilationWidth:w,inShape:e,outShape:A,filterShape:t}}function ZT(e,t,n,s=1){const a=eE(t,s);return Math.floor((e[0]*(n-1)-n+a)/2)}function JT(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function QT(e){return"number"==typeof e?[e,e,e]:e}function eE(e,t){return t<=1?e:e+(e-1)*(t-1)}function tE(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function nE(e){const[t,n,s]=JT(e);return 1===t&&1===n&&1===s}function sE(e,t){return nE(e)||nE(t)}function aE(e){return JT(e).every((e=>e>0))}function rE(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function oE(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)ow(hw(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{ow(hw(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}const iE=w$({reshape_:function(e,t){const n={x:y$(e,"x","reshape","string_or_numeric")},s={shape:t};return h$.runKernel(tS,n,s)}});const lE=w$({avgPool_:function(e,t,n,s,a){const r=y$(e,"x","avgPool","float32");ow(sE(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=r,i=!1;3===r.rank&&(i=!0,o=iE(r,[1,r.shape[0],r.shape[1],r.shape[2]])),ow(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),oE("avgPool",s,a);const l={x:o},u={filterSize:t,strides:n,pad:s,dimRoundingMode:a};let c=h$.runKernel(rI,l,u);return c=vT(c,r.dtype),i?iE(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const uE=w$({avgPool3d_:function(e,t,n,s,a,r="NDHWC"){const o=y$(e,"x","avgPool3d","float32");let i=o,l=!1;4===o.rank&&(l=!0,i=iE(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),ow(5===i.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`)),ow("NDHWC"===r,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${r}`)),ow("number"==typeof n&&n>0||Array.isArray(n)&&n[0]>0&&n[1]>0&&n[2]>0,(()=>`Error in avgPool3d: Stride must be > 0, but got '${n}'`)),oE("avgPool3d",s,a);const u={x:i},c={filterSize:t,strides:n,pad:s,dimRoundingMode:a,dataFormat:r};let h=h$.runKernel(iI,u,c);return h=vT(h,i.dtype),l?iE(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const cE=w$({concat_:function(e,t=0){ow(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=v$(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return kT(n[0]);const s=n,a={axis:t};return h$.runKernel(yI,s,a)}});const hE=w$({matMul_:function(e,t,n=!1,s=!1){let a=y$(e,"a","matMul"),r=y$(t,"b","matMul");[a,r]=a$(a,r);const o={a:a,b:r},i={transposeA:n,transposeB:s};return h$.runKernel(uI,o,i)}});const dE=w$({sigmoid_:function(e){const t={x:y$(e,"x","sigmoid","float32")};return h$.runKernel(yS,t)}});const pE=w$({slice_:function(e,t,n){const s=y$(e,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");const a={x:s},r={begin:t,size:n};return h$.runKernel(mS,a,r)}});const fE=w$({tanh_:function(e){const t={x:y$(e,"x","tanh","float32")};return h$.runKernel(zS,t)}});const mE=w$({basicLSTMCell_:function(e,t,n,s,a,r){const o=y$(e,"forgetBias","basicLSTMCell"),i=y$(t,"lstmKernel","basicLSTMCell"),l=y$(n,"lstmBias","basicLSTMCell"),u=y$(s,"data","basicLSTMCell"),c=y$(a,"c","basicLSTMCell"),h=y$(r,"h","basicLSTMCell"),d=cE([u,h],1),p=hE(d,i),f=ET(p,l),m=f.shape[0],g=f.shape[1]/4,x=[m,g],b=pE(f,[0,0],x),y=pE(f,[0,g],x),v=pE(f,[0,2*g],x),k=pE(f,[0,3*g],x),w=ET(_T(dE(b),fE(y)),_T(c,dE(ET(o,v))));return[w,_T(fE(w),dE(k))]}});const gE=w$({batchToSpaceND_:function(e,t,n){const s=y$(e,"x","batchToSpaceND"),a=t.reduce(((e,t)=>e*t));ow(s.rank>=1+t.length,(()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`)),ow(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),ow(s.shape[0]%a==0,(()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${a}`));const r={x:s},o={blockShape:t,crops:n};return h$.runKernel(cI,r,o)}});const xE=w$({batchNorm_:function(e,t,n,s,a,r){null==r&&(r=.001);const o=y$(e,"x","batchNorm"),i=y$(t,"mean","batchNorm"),l=y$(n,"variance","batchNorm");let u,c;null!=a&&(u=y$(a,"scale","batchNorm")),null!=s&&(c=y$(s,"offset","batchNorm")),ow(i.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),ow(null==c||i.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),ow(null==u||i.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h={x:function(e){let t;return t=0===e.rank||1===e.rank?iE(e,[1,1,1,e.size]):2===e.rank?iE(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?iE(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(o),scale:u,offset:c,mean:i,variance:l},d={varianceEpsilon:r},p=h$.runKernel(eN,h,d);return iE(p,o.shape)}});const bE=w$({batchNorm2d_:function(e,t,n,s,a,r){const o=y$(e,"x","batchNorm"),i=y$(t,"mean","batchNorm"),l=y$(n,"variance","batchNorm");let u,c;return null!=a&&(u=y$(a,"scale","batchNorm")),null!=s&&(c=y$(s,"offset","batchNorm")),ow(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),ow(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),ow(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&ow(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&ow(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),xE(o,i,l,c,u,r)}});const yE=w$({batchNorm3d_:function(e,t,n,s,a,r){const o=y$(e,"x","batchNorm"),i=y$(t,"mean","batchNorm"),l=y$(n,"variance","batchNorm");let u,c;return null!=a&&(u=y$(a,"scale","batchNorm")),null!=s&&(c=y$(s,"offset","batchNorm")),ow(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),ow(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),ow(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&ow(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&ow(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),xE(o,i,l,c,u,r)}});const vE=w$({batchNorm4d_:function(e,t,n,s,a,r){const o=y$(e,"x","batchNorm"),i=y$(t,"mean","batchNorm"),l=y$(n,"variance","batchNorm");let u,c;return null!=a&&(u=y$(a,"scale","batchNorm")),null!=s&&(c=y$(s,"offset","batchNorm")),ow(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),ow(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),ow(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&ow(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&ow(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),xE(o,i,l,c,u,r)}});const kE=w$({bincount_:function(e,t,n){const s=y$(e,"x","bincount"),a=y$(t,"weights","bincount");ow("int32"===s.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`)),ow(n>=0,(()=>`size must be non-negative, but got ${n}.`)),ow(a.size===s.size||0===a.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${a.shape}.`));const r={x:s,weights:a},o={size:n};return h$.runKernel(hI,r,o)}});const wE=w$({bitwiseAnd_:function(e,t){const n=y$(e,"x","bitwiseAnd"),s=y$(t,"y","bitwiseAnd");if(!cw(n.shape,s.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${n.shape}, y: ${s.shape}`);if("int32"!==n.dtype||"int32"!==s.dtype)throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${n.dtype} and type of y: ${s.dtype}`);const a={a:n,b:s};return h$.runKernel(dI,a)}});const IE=w$({broadcastArgs_:function(e,t){const n=y$(e,"s0","broadcastArgs","int32"),s=y$(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==s.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);const a={s0:n,s1:s};return h$.runKernel(pI,a)}});const NE=w$({broadcastTo_:function(e,t){let n=y$(e,"broadcastTo","x");const s=n.shape;if(Fw(t),t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=iE(n,e)}const a=n.shape,r=Array.from(t);for(let e=t.length-1;e>=0;e--)if(a[e]===t[e])r[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);if(0===r.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return kT(n);const o={x:n},i={reps:r};return h$.runKernel(WS,o,i)}});const SE=w$({ceil_:function(e){const t={x:y$(e,"x","ceil","float32")};return h$.runKernel(mI,t)}});function CE(e,t,n){Fw(e);const s={shape:e,value:t,dtype:n=n||Nw(t)};return h$.runKernel(YI,{},s)}const $E=w$({clipByValue_:function(e,t,n){const s=y$(e,"x","clipByValue");if(ow(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return CE(s.shape,t,s.dtype);const a={x:s},r={clipValueMin:t,clipValueMax:n};return h$.runKernel(gI,a,r)}});const TE=w$({concat1d_:function(e){return cE(e,0)}});const EE=w$({concat2d_:function(e,t){return cE(e,t)}});const RE=w$({concat3d_:function(e,t){return cE(e,t)}});const AE=w$({concat4d_:function(e,t){return cE(e,t)}});const _E=w$({conv2d_:function(e,t,n,s,a="NHWC",r=[1,1],o){const i=y$(e,"x","conv2d","float32"),l=y$(t,"filter","conv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=iE(i,[1,i.shape[0],i.shape[1],i.shape[2]])),ow(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),ow(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),oE("conv2d",s,o);const h="NHWC"===a?u.shape[3]:u.shape[1];ow(h===l.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`)),ow(sE(n,r),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${r}'`)),ow(aE(r),(()=>"Error in conv2D: Dilated rates should be larger than 0.")),ow(aE(n),(()=>"Error in conv2D: Strides should be larger than 0."));const d={x:u,filter:l},p={strides:n,pad:s,dataFormat:a,dilations:r,dimRoundingMode:o},f=h$.runKernel(vI,d,p);return c?iE(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const FE=w$({conv1d_:function(e,t,n,s,a="NWC",r=1,o){const i=y$(e,"x","conv1d"),l=y$(t,"filter","conv1d");let u=i,c=!1;2===i.rank&&(c=!0,u=iE(i,[1,i.shape[0],i.shape[1]])),ow(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),ow(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),oE("conv1d",s,o),ow(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),ow(sE(n,r),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${r}'`)),ow(aE(r),(()=>"Error in conv1D: Dilated rates should be larger than 0.")),ow(aE(n),(()=>"Error in conv1D: Stride should be larger than 0.")),ow("NWC"===a,(()=>`Error in conv1d: got dataFormat of ${a} but only NWC is currently supported.`));const h=iE(l,[1,l.shape[0],l.shape[1],l.shape[2]]),d=iE(u,[u.shape[0],1,u.shape[1],u.shape[2]]),p=_E(d,h,[1,n],s,"NHWC",[1,r],o);return iE(p,c?[p.shape[2],p.shape[3]]:[p.shape[0],p.shape[2],p.shape[3]])}});const OE=w$({conv2DBackpropInput_:function(e,t,n,s,a,r="NHWC",o){ow(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,l=t,u=!1;3===t.rank&&(u=!0,l=iE(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),ow(4===i.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`)),ow(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),ow(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===r?i[3]:i[1],h="NHWC"===r?l.shape[3]:l.shape[1];ow(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),ow(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),oE("conv2dDerInput",a,o);const d={dy:l,filter:n},p={strides:s,pad:a,dataFormat:r,dimRoundingMode:o,inputShape:i},f=h$.runKernel(wI,d,p);return u?iE(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const DE=w$({conv2dTranspose_:function(e,t,n,s,a,r){const o=y$(e,"x","conv2dTranspose"),i=y$(t,"filter","conv2dTranspose");return OE(n,o,i,s,a,"NHWC",r)}});const ME=w$({conv3d_:function(e,t,n,s,a="NDHWC",r=[1,1,1]){const o=y$(e,"x","conv3d"),i=y$(t,"filter","conv3d");let l=o,u=!1;4===o.rank&&(u=!0,l=iE(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),ow(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),ow(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),ow(l.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),ow(sE(n,r),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${r}'`)),ow("NDHWC"===a,(()=>`Error in conv3d: got dataFormat of ${a} but only NDHWC is currently supported.`)),ow(aE(r),(()=>"Error in conv3D: Dilated rates should be larger than 0.")),ow(aE(n),(()=>"Error in conv3D: Strides should be larger than 0."));const c={x:l,filter:i},h={strides:n,pad:s,dataFormat:a,dilations:r},d=h$.runKernel(II,c,h);return u?iE(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const LE=w$({conv3DBackpropInput_:function(e,t,n,s,a){ow(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let r=e,o=t,i=!1;4===t.rank&&(i=!0,o=iE(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),r=[1,e[0],e[1],e[2],e[3]]);const l=r[4],u=o.shape[4];ow(5===r.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${r.length}.`)),ow(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),ow(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),ow(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),ow(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:o,filter:n},h={pad:a,strides:s,inputShape:r},d=h$.runKernel(SI,c,h);return i?iE(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const BE=w$({conv3dTranspose_:function(e,t,n,s,a){const r=y$(e,"x","conv3dTranspose"),o=y$(t,"filter","conv3dTranspose");return LE(n,r,o,s,a)}});const PE=w$({cos_:function(e){const t={x:y$(e,"x","cos","float32")};return h$.runKernel(CI,t)}});const zE=w$({cosh_:function(e){const t={x:y$(e,"x","cosh","float32")};return h$.runKernel($I,t)}});const WE=w$({cumprod_:function(e,t=0,n=!1,s=!1){const a={x:y$(e,"x","cumprod")},r={axis:t,exclusive:n,reverse:s};return h$.runKernel(TI,a,r)}});const VE=w$({cumsum_:function(e,t=0,n=!1,s=!1){const a={x:y$(e,"x","cumsum")},r={axis:t,exclusive:n,reverse:s};return h$.runKernel(EI,a,r)}});const UE=w$({denseBincount_:function(e,t,n,s=!1){const a=y$(e,"x","denseBincount"),r=y$(t,"weights","denseBincount");ow("int32"===a.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${a.dtype}`)),ow(a.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${a.rank}.`)),ow(n>=0,(()=>`size must be non-negative, but got ${n}.`)),ow(r.size===a.size||0===r.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${a.shape}, weights shape: ${r.shape}.`));const o={x:a,weights:r},i={size:n,binaryOutput:s};return h$.runKernel(AI,o,i)}});const GE=w$({depthToSpace_:function(e,t,n="NHWC"){const s=y$(e,"x","depthToSpace","float32"),a="NHWC"===n?s.shape[1]:s.shape[2],r="NHWC"===n?s.shape[2]:s.shape[3],o="NHWC"===n?s.shape[3]:s.shape[1];ow(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),ow(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t}  for depthToSpace with input shape\n    ${s.shape}`)),ow(r*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t} for depthToSpace with input shape\n        ${s.shape}`)),ow(o%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${s.shape}`));const i={x:s},l={blockSize:t,dataFormat:n};return h$.runKernel(_I,i,l)}});const HE=w$({depthwiseConv2d_:function(e,t,n,s,a="NHWC",r=[1,1],o){const i=y$(e,"x","depthwiseConv2d","float32"),l=y$(t,"filter","depthwiseConv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=iE(i,[1,i.shape[0],i.shape[1],i.shape[2]])),ow(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),ow(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`));const h="NHWC"===a?u.shape[3]:u.shape[1];ow(h===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`)),oE("depthwiseConv2d",s,o);const d={x:u,filter:l},p={strides:n,pad:s,dataFormat:a,dilations:r,dimRoundingMode:o},f=h$.runKernel(FI,d,p);return c?iE(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const jE=w$({diag_:function(e){const t={x:y$(e,"x","diag")};return h$.runKernel(MI,t)}});const XE=w$({dilation2d_:function(e,t,n,s,a=[1,1],r="NHWC"){const o=y$(e,"x","dilation2d"),i=y$(t,"filter","dilation2d");ow(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),ow(3===i.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`)),ow("NHWC"===r,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${r}`));let l=o,u=!1;3===o.rank&&(l=iE(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=!0),ow(l.shape[3]===i.shape[2],(()=>`Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${i.shape[2]}`));const c={x:l,filter:i},h={strides:n,pad:s,dilations:a},d=h$.runKernel(LI,c,h);return u?iE(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});function KE(e,t){const n=e.length,s=[];for(let a=0;a<n;a++){const r=n-1-a,o=e[r]||1;(t[t.length-1-a]||1)>1&&1===o&&s.unshift(r)}return s}function qE(e,t){const n=[];for(let s=0;s<t.length;s++){const a=e[e.length-s-1],r=t.length-s-1,o=t[r];(null==a||1===a&&o>1)&&n.unshift(r)}return n}function YE(e,t){const n=Math.max(e.length,t.length),s=new Array(n);for(let a=0;a<n;a++){let r=e[e.length-a-1];null==r&&(r=1);let o=t[t.length-a-1];if(null==o&&(o=1),1===r)s[n-a-1]=o;else if(1===o)s[n-a-1]=r;else{if(r!==o){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}s[n-a-1]=r}}return s}const ZE=w$({equal_:function(e,t){let n=y$(e,"a","equal","string_or_numeric"),s=y$(t,"b","equal","string_or_numeric");[n,s]=a$(n,s),YE(n.shape,s.shape);const a={a:n,b:s};return h$.runKernel(HI,a)}});const JE=w$({where_:function(e,t,n){const s=y$(t,"a","where"),a=y$(n,"b","where"),r=y$(e,"condition","where","bool"),o=YE(YE(r.shape,s.shape),a.shape),i={condition:NE(r,o),t:NE(s,o),e:NE(a,o)};return h$.runKernel(pS,i)}});const QE=w$({zerosLike_:function(e){const t={x:y$(e,"x","zerosLike")};return h$.runKernel(KS,t)}});const eR=w$({divNoNan_:function(e,t){let n=y$(e,"a","div"),s=y$(t,"b","div");[n,s]=a$(n,s);const a=AT(n,s),r=QE(a),o=ZE(s,r);return JE(o,r,a)}});const tR=w$({dot_:function(e,t){const n=y$(e,"t1","dot"),s=y$(t,"t2","dot");ow(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`));const a=1===n.rank?n.size:n.shape[1],r=1===s.rank?s.size:s.shape[0];if(ow(a===r,(()=>`Error in dot: inner dimensions of inputs must match, but got ${a} and ${r}.`)),1===n.rank&&1===s.rank){const e=iE(n,[1,-1]),t=iE(s,[-1,1]),a=hE(e,t);return iE(a,[])}if(1===n.rank&&2===s.rank){const e=iE(n,[1,-1]),t=iE(s,[s.shape[0],s.shape[1]]),a=hE(e,t);return iE(a,[a.size])}if(2===n.rank&&1===s.rank){const e=iE(s,[-1,1]),t=hE(n,e);return iE(t,[t.size])}{const e=iE(s,[s.shape[0],s.shape[1]]);return hE(n,e)}}});const nR=w$({einsum_:function(e,...t){const n=t.map(((e,t)=>y$(e,`tensors${t}`,"einsum"))),s={equation:e};return h$.runKernel(WI,n,s)}});const sR=w$({elu_:function(e){const t={x:y$(e,"x","elu","float32")};return h$.runKernel(VI,t)}});const aR=w$({ensureShape_:function(e,t){const n=y$(e,"x","ensureShape","string_or_numeric");if(!function(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(null!==e[n]&&null!==t[n]&&e[n]!==t[n])return!1;return!0}(n.shape,t))throw new Error(`EnsureShape: Shape of tensor ${n.shape} is not compatible with expected shape ${t}`);return e}});const rR=w$({erf_:function(e){let t=y$(e,"x","erf");ow("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=vT(t,"float32"));const n={x:t};return h$.runKernel(GI,n)}});function oR(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function iR(e,t,n){const s=e.length+t.length,a=[];let r=0,o=0;for(let i=0;i<s;i++)-1===n.indexOf(i)?a.push(e[r++]):a.push(t[o++]);return a}function lR(e,t){const n=[],s=e.length;for(let a=0;a<s;a++)-1===t.indexOf(a)&&n.push(e[a]);return[n,t.map((t=>e[t]))]}function uR(e,t){return iR(e,t.map((e=>1)),t)}function cR(e,t,n){ow(oR(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function hR(e,t){if(oR(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function dR(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function pR(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}const fR=w$({max_:function(e,t=null,n=!1){const s={x:y$(e,"x","max")},a={reductionIndices:t,keepDims:n};return h$.runKernel(wN,s,a)}});const mR=w$({min_:function(e,t=null,n=!1){const s={x:y$(e,"x","min")},a={axis:t,keepDims:n};return h$.runKernel(RN,s,a)}});const gR=w$({pow_:function(e,t){let n=y$(e,"base","pow"),s=y$(t,"exp","pow");[n,s]=a$(n,s);const a={a:n,b:s};return h$.runKernel(HN,a)}});function xR(e,t){if((EC(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&EC(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return N$(e,[],[],t)}const bR=w$({sqrt_:function(e){const t={x:y$(e,"x","sqrt","float32")};return h$.runKernel(kS,t)}});const yR=w$({square_:function(e){const t=y$(e,"x","square");return h$.runKernel("Square",{x:t},{})}});const vR=w$({sum_:function(e,t=null,n=!1){let s=y$(e,"x","sum");"bool"===s.dtype&&(s=vT(s,"int32"));const a={x:s},r={axis:t,keepDims:n};return h$.runKernel(wS,a,r)}});function kR(e,t,n=null){if(0===e.rank)return FT(e);if(1!==e.rank&&null===n)return kR(iE(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return vR(FT(e),n);if(t===1/0)return fR(FT(e),n);if(t===-1/0)return mR(FT(e),n);if("euclidean"===t||2===t)return bR(vR(gR(FT(e),xR(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return fR(vR(FT(e),n[0]),n[1]-1);if(t===1/0)return fR(vR(FT(e),n[1]),n[0]);if(t===-1/0)return mR(vR(FT(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return bR(vR(yR(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const wR=w$({norm_:function(e,t="euclidean",n=null,s=!1){const a=kR(e=y$(e,"x","norm"),t,n);let r=a.shape;if(s){const t=gw(n,e.shape);r=uR(a.shape,t)}return iE(a,r)}});const IR=w$({euclideanNorm_:function(e,t=null,n=!1){return wR(e,"euclidean",t,n)}});const NR=w$({exp_:function(e){const t={x:y$(e,"x","exp")};return h$.runKernel(jI,t)}});const SR=w$({expandDims_:function(e,t=0){const n=y$(e,"x","expandDims","string_or_numeric");ow(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const s={input:n},a={dim:t};return h$.runKernel(XI,s,a)}});const CR=w$({expm1_:function(e){const t={x:y$(e,"x","expm1")};return h$.runKernel(KI,t)}});const $R=w$({tile_:function(e,t){const n=y$(e,"x","tile","string_or_numeric");ow(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const s={x:n},a={reps:t};return h$.runKernel(WS,s,a)}});const TR=w$({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const a=yT([e,t],s),r=e<=t?e:t;for(let e=0;e<r;++e)a.set(1,e,e);const o=iE(a.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return $R(SR(o,0),[n[0],1,1]);if(2===n.length)return $R(SR(SR(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return $R(SR(SR(SR(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const ER=w$({floor_:function(e){const t={x:y$(e,"x","floor","float32")};return h$.runKernel(JI,t)}});const RR=w$({gather_:function(e,t,n=0,s=0){const a={x:y$(e,"x","gather"),indices:y$(t,"indices","gather","int32")},r={axis:n,batchDims:s};return h$.runKernel(tN,a,r)}});const AR=w$({greater_:function(e,t){let n=y$(e,"a","greater","string_or_numeric"),s=y$(t,"b","greater","string_or_numeric");[n,s]=a$(n,s),YE(n.shape,s.shape);const a={a:n,b:s};return h$.runKernel(sN,a)}});const _R=w$({greaterEqual_:function(e,t){let n=y$(e,"a","greaterEqual","string_or_numeric"),s=y$(t,"b","greaterEqual","string_or_numeric");[n,s]=a$(n,s),YE(n.shape,s.shape);const a={a:n,b:s};return h$.runKernel(aN,a)}});const FR=w$({imag_:function(e){const t={input:y$(e,"input","imag")};return h$.runKernel(iN,t)}});const OR=w$({isFinite_:function(e){const t={x:y$(e,"x","isFinite")};return h$.runKernel(lN,t)}});const DR=w$({isInf_:function(e){const t={x:y$(e,"x","isInf")};return h$.runKernel(uN,t)}});const MR=w$({isNaN_:function(e){const t={x:y$(e,"x","isNaN")};return h$.runKernel(cN,t)}});const LR=w$({leakyRelu_:function(e,t=.2){const n={x:y$(e,"x","leakyRelu")},s={alpha:t};return h$.runKernel(hN,n,s)}});const BR=w$({less_:function(e,t){let n=y$(e,"a","less","string_or_numeric"),s=y$(t,"b","less","string_or_numeric");[n,s]=a$(n,s),YE(n.shape,s.shape);const a={a:n,b:s};return h$.runKernel(dN,a)}});const PR=w$({lessEqual_:function(e,t){let n=y$(e,"a","lessEqual","string_or_numeric"),s=y$(t,"b","lessEqual","string_or_numeric");[n,s]=a$(n,s),YE(n.shape,s.shape);const a={a:n,b:s};return h$.runKernel(pN,a)}});const zR=w$({localResponseNormalization_:function(e,t=5,n=1,s=1,a=.5){const r=y$(e,"x","localResponseNormalization");ow(4===r.rank||3===r.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${r.rank}.`)),ow(hw(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let o=r,i=!1;3===r.rank&&(i=!0,o=iE(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const l={x:o},u={depthRadius:t,bias:n,alpha:s,beta:a},c=h$.runKernel(vN,l,u);return i?iE(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const WR=w$({log_:function(e){const t={x:y$(e,"x","log","float32")};return h$.runKernel(mN,t)}});const VR=w$({log1p_:function(e){const t={x:y$(e,"x","log1p")};return h$.runKernel(gN,t)}});function UR(e){return h$.customGrad(e)}const GR=w$({neg_:function(e){const t={x:y$(e,"x","neg")};return h$.runKernel(MN,t)}});const HR=w$({softplus_:function(e){const t={x:y$(e,"x","softplus")};return h$.runKernel(vS,t)}});const jR=w$({logSigmoid_:function(e){const t=y$(e,"x","logSigmoid");return UR((e=>({value:GR(HR(GR(e))),gradFunc:t=>_T(t,dE(GR(e)))})))(t)}});const XR=w$({sub_:function(e,t){let n=y$(e,"a","sub"),s=y$(t,"b","sub");[n,s]=a$(n,s);const a={a:n,b:s};return h$.runKernel(BS,a)}});const KR=w$({logSoftmax_:function(e,t=-1){const n=y$(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const s=UR(((e,n)=>{const s=fR(e,t,!0),a=XR(e,s),r=XR(vT(a,"float32"),WR(vR(NR(a),t,!0)));n([r]);return{value:r,gradFunc:(e,n)=>{const[s]=n,a=NR(s);return XR(e,_T(vR(e,t,!0),a))}}}));return s(n)}});const qR=w$({logSumExp_:function(e,t=null,n=!1){const s=y$(e,"x","logSumExp"),a=gw(t,s.shape),r=fR(s,a,!0),o=XR(s,r),i=NR(o),l=vR(i,a),u=WR(l),c=ET(iE(r,u.shape),u);if(n){const e=uR(c.shape,a);return iE(c,e)}return c}});const YR=w$({logicalAnd_:function(e,t){const n=y$(e,"a","logicalAnd","bool"),s=y$(t,"b","logicalAnd","bool");YE(n.shape,s.shape);const a={a:n,b:s};return h$.runKernel(xN,a)}});const ZR=w$({logicalNot_:function(e){const t={x:y$(e,"x","logicalNot","bool")};return h$.runKernel(bN,t)}});const JR=w$({logicalOr_:function(e,t){const n=y$(e,"a","logicalOr","bool"),s=y$(t,"b","logicalOr","bool");YE(n.shape,s.shape);const a={a:n,b:s};return h$.runKernel(yN,a)}});const QR=w$({logicalXor_:function(e,t){const n=y$(e,"a","logicalXor","bool"),s=y$(t,"b","logicalXor","bool");return YE(n.shape,s.shape),YR(JR(e,t),ZR(YR(e,t)))}}),eA=2147483648;const tA=w$({searchSorted_:function(e,t,n="left"){const s=y$(e,"sortedSequence","searchSorted"),a=y$(t,"values","searchSorted"),r=s.shape[s.shape.length-1],o=a.shape[a.shape.length-1],i=iE(s,[-1,r]),l=iE(a,[-1,o]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(uw(l.shape)>=eA)throw new Error("values tensor size must less than 2147483648");if(i.shape[1]>=eA)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${i.shape[1]}`);const u={sortedSequence:i,values:l},c={side:n};return h$.runKernel(dS,u,c)}});const nA=w$({maxPool_:function(e,t,n,s,a){const r=y$(e,"x","maxPool");let o=r,i=!1;3===r.rank&&(i=!0,o=iE(r,[1,r.shape[0],r.shape[1],r.shape[2]])),ow(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),ow(sE(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),oE("maxPool",s,a);const l={x:o},u={filterSize:t,strides:n,pad:s,dimRoundingMode:a},c=h$.runKernel(NN,l,u);return i?iE(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const sA=w$({maxPool3d_:function(e,t=[1,1,1],n,s,a,r="NDHWC"){const o=y$(e,"x","maxPool3d");let i=o,l=!1;4===o.rank&&(l=!0,i=iE(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),ow(5===i.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`)),ow("NDHWC"===r,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${r}`)),oE("maxPool3d",s,a);const u={x:i},c={filterSize:t,strides:n,pad:s,dimRoundingMode:a,dataFormat:r},h=h$.runKernel(CN,u,c);return l?iE(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const aA=w$({maxPoolWithArgmax_:function(e,t,n,s,a=!1){const r={x:y$(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:s,includeBatchInIndex:a},i=h$.runKernel(TN,r,o);return{result:i[0],indexes:i[1]}}});const rA=w$({maximum_:function(e,t){let n=y$(e,"a","maximum"),s=y$(t,"b","maximum");[n,s]=a$(n,s),"bool"===n.dtype&&(n=vT(n,"int32"),s=vT(s,"int32")),YE(n.shape,s.shape);const a={a:n,b:s};return h$.runKernel(IN,a)}});const oA=w$({mean_:function(e,t=null,n=!1){const s={x:y$(e,"x","mean")},a={axis:t,keepDims:n};return h$.runKernel(EN,s,a)}});function iA(e,t="float32"){if(Fw(e),"complex64"===t){const t=iA(e,"float32"),n=iA(e,"float32");return I$(t,n)}const n=Aw(uw(e),t);return h$.makeTensor(n,e,t)}function lA(e,t="float32"){if(Fw(e),"complex64"===t){const t=lA(e,"float32"),n=iA(e,"float32");return I$(t,n)}const n=Rw(uw(e),t);return h$.makeTensor(n,e,t)}const uA=w$({minimum_:function(e,t){let n=y$(e,"a","minimum"),s=y$(t,"b","minimum");[n,s]=a$(n,s),"bool"===n.dtype&&(n=vT(n,"int32"),s=vT(s,"int32")),YE(n.shape,s.shape);const a={a:n,b:s};return h$.runKernel(AN,a)}});const cA=w$({mirrorPad_:function(e,t,n){ow("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const s=y$(e,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");ow(t.length===s.rank,(()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`));const a="reflect"===n?1:0;for(let e=0;e<s.rank;e++)ow(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),ow(t[e][0]>=0&&t[e][0]<=s.shape[e]-a&&t[e][1]>=0&&t[e][1]<=s.shape[e]-a,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${s.shape[e]-a} or less than 0 for input of shape ${s.shape}`));const r={paddings:t,mode:n},o={x:s};return h$.runKernel(_N,o,r)}});const hA=w$({mod_:function(e,t){let n=y$(e,"a","mod"),s=y$(t,"b","mod");[n,s]=a$(n,s);const a={a:n,b:s};return h$.runKernel(FN,a)}});const dA=w$({moments_:function(e,t=null,n=!1){const s=gw(t,(e=y$(e,"x","moments")).shape),a=oA(e,s,n);let r=a.shape;n||(r=uR(a.shape,s));const o=yR(XR(vT(e,"float32"),iE(a,r)));return{mean:a,variance:oA(o,s,n)}}});const pA=w$({multiRNNCell_:function(e,t,n,s){const a=y$(t,"data","multiRNNCell"),r=v$(n,"c","multiRNNCell"),o=v$(s,"h","multiRNNCell");let i=a;const l=[];for(let t=0;t<e.length;t++){const n=e[t](i,r[t],o[t]);l.push(n[0]),l.push(n[1]),i=n[1]}const u=[],c=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),c.push(l[e+1]);return[u,c]}});const fA=w$({multinomial_:function(e,t,n,s=!1){const a=y$(e,"logits","multinomial"),r=a.size,o=a.rank;if(r<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${r}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?iE(a,[1,-1]):a},l={numSamples:t,seed:n,normalized:s},u=h$.runKernel(ON,i,l);return 1===o?iE(u,[u.size]):u}});const mA=w$({notEqual_:function(e,t){let n=y$(e,"a","notEqual","string_or_numeric"),s=y$(t,"b","notEqual","string_or_numeric");[n,s]=a$(n,s),YE(n.shape,s.shape);const a={a:n,b:s};return h$.runKernel(LN,a)}});const gA=w$({oneHot_:function(e,t,n=1,s=0,a="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const r={indices:y$(e,"indices","oneHot","int32")},o={dtype:a,depth:t,onValue:n,offValue:s};return h$.runKernel(VN,r,o)}});const xA=w$({onesLike_:function(e){const t={x:y$(e,"x","onesLike")};return h$.runKernel(WN,t)}});const bA=w$({outerProduct_:function(e,t){const n=y$(e,"v1","outerProduct"),s=y$(t,"v2","outerProduct");ow(1===n.rank&&1===s.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${s.rank}.`));const a=iE(n,[-1,1]),r=iE(s,[1,-1]);return hE(a,r)}});const yA=w$({pad_:function(e,t,n=0){const s=y$(e,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const a={paddings:t,constantValue:n},r={x:s};return h$.runKernel(GN,r,a)}});const vA=w$({pad1d_:function(e,t,n=0){return ow(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),yA(e,[t],n)}});const kA=w$({pad2d_:function(e,t,n=0){return ow(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),yA(e,t,n)}});const wA=w$({pad3d_:function(e,t,n=0){return ow(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),yA(e,t,n)}});const IA=w$({pad4d_:function(e,t,n=0){return ow(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),yA(e,t,n)}});const NA=w$({spaceToBatchND_:function(e,t,n){const s=y$(e,"x","spaceToBatchND");ow(s.rank>=1+t.length,(()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`)),ow(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),ow(s.shape.reduce(((e,s,a)=>a>0&&a<=t.length?e&&(s+n[a-1][0]+n[a-1][1])%t[a-1]==0:e),!0),(()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const a={x:s},r={blockShape:t,paddings:n};return h$.runKernel(IS,a,r)}});const SA=w$({pool_:function(e,t,n,s,a,r,o){null==a&&(a=[1,1]),null==r&&(r=1),0===s&&(s="valid");const i=y$(e,"x","maxPool");let l=i,u=!1;3===i.rank&&(u=!0,l=iE(i,[1,i.shape[0],i.shape[1],i.shape[2]])),ow(sE(r,a),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${r} and dilations '${a}'`));const c=XT(l.shape,t,r,a,s),h=[c.dilationHeight,c.dilationWidth];let d;d="same"===s?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))),s=n.map((e=>e-1)),a=s.map((e=>Math.floor(e/2))),r=s.map(((e,t)=>e-a[t]));return s.map(((e,t)=>[a[t],r[t]]))}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const p=1===h[0]&&1===h[1],[f,m]=function(e,t,n){const s=n.map((e=>e[0])),a=n.map((e=>e[1])),r=e.concat(s,a),o=t.map(((e,t)=>(e-r[t]%e)%e)),i=a.map(((e,t)=>e+o[t])),l=t.map(((e,t)=>[s[t],i[t]])),u=t.map(((e,t)=>[0,o[t]]));return[l,u]}([c.inHeight,c.inWidth],h,d),g=p?s:"valid",x=p?l:NA(l,h,f),b=("avg"===n?()=>lE(x,t,r,g,o):()=>nA(x,t,r,g,o))(),y=p?b:gE(b,h,m);return u?iE(y,[y.shape[1],y.shape[2],y.shape[3]]):y}});const CA=w$({prelu_:function(e,t){const n={x:y$(e,"x","prelu"),alpha:y$(t,"alpha","prelu")};return h$.runKernel(jN,n)}});const $A=w$({prod_:function(e,t=null,n=!1){let s=y$(e,"x","prod");"bool"===s.dtype&&(s=vT(s,"int32"));const a={x:s},r={axis:t,keepDims:n};return h$.runKernel(XN,a,r)}});const TA=w$({raggedGather_:function(e,t,n,s){const a={paramsNestedSplits:e.map(((e,t)=>y$(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:y$(t,"paramsDenseValues","raggedGather"),indices:y$(n,"indices","raggedGather","int32")},r={outputRaggedRank:s},o=h$.runKernel(KN,a,r);return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}});const EA=w$({raggedRange_:function(e,t,n){const s=y$(e,"starts","raggedRange"),a={starts:s,limits:y$(t,"limits","raggedRange",s.dtype),deltas:y$(n,"deltas","raggedRange",s.dtype)},r=h$.runKernel(qN,a);return{rtNestedSplits:r[0],rtDenseValues:r[1]}}});const RA=w$({raggedTensorToTensor_:function(e,t,n,s,a){const r=y$(e,"shape","raggedTensorToTensor","int32"),o=y$(t,"values","raggedTensorToTensor"),i={shape:r,values:o,defaultValue:y$(n,"defaultValue","raggedTensorToTensor",o.dtype),rowPartitionTensors:s.map(((e,t)=>y$(e,`tensors${t}`,"raggedTensorToTensor","int32")))},l={rowPartitionTypes:a};return h$.runKernel(YN,i,l)}});const AA=w$({rand_:function(e,t,n){Fw(e);const s=uw(e);let a=null;if(null==n||"float32"===n)a=new Float32Array(s);else if("int32"===n)a=new Int32Array(s);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);a=new Uint8Array(s)}for(let e=0;e<s;e++)a[e]=t();return h$.makeTensor(a,e,n)}});class _A{constructor(e,t,n,s,a){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const r=a||Math.random();this.random=No.alea(r.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,a,r;do{s=2*this.random()-1,a=2*this.random()-1,r=s*s+a*a}while(r>=1||0===r);const o=Math.sqrt(-2*Math.log(r)/r);e=this.mean+this.stdDev*s*o,t=this.mean+this.stdDev*a*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class FA{constructor(e,t,n,s){this.alpha=e,this.beta=1/t,this.dtype=n;const a=s||Math.random();this.randu=No.alea(a.toString()),this.randn=new _A(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,s,a,r;for(;;){do{s=this.randn.nextValue(),r=1+this.c*s}while(r<=0);if(r*=r*r,e=s*s,t=1-.331*e*e,n=.5*e+this.d*(1-r+Math.log(r)),a=this.randu(),a<t||Math.log(a)<n)break}return r=1/this.beta*this.d*r,this.alpha<1&&(r*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(r)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class OA{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=No.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const DA=w$({randomGamma_:function(e,t,n=1,s="float32",a){if(Fw(e),null==n&&(n=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error(`Unsupported data type ${s}`);const r=new FA(t,n,s,a),o=yT(e,s);for(let e=0;e<o.values.length;e++)o.values[e]=r.nextValue();return o.toTensor()}});const MA=w$({randomNormal_:function(e,t=0,n=1,s,a){if(Fw(e),null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const r=new _A(t,n,s,!1,a),o=yT(e,s);for(let e=0;e<o.values.length;e++)o.values[e]=r.nextValue();return o.toTensor()}});const LA=w$({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return MA(e,0,1,t,n)}});const BA=w$({randomUniform_:function(e,t=0,n=1,s="float32",a){Fw(e);const r=yT(e,s),o=new OA(t,n,null,a);for(let e=0;e<r.values.length;e++)r.values[e]=o.nextValue();return r.toTensor()}});const PA=w$({randomUniformInt_:function(e,t,n,s){return BA(e,t,n,"int32",s)}});function zA(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const a={start:e,stop:t,step:n,dtype:s};return h$.runKernel(ZN,{},a)}const WA=w$({real_:function(e){const t={input:y$(e,"input","real")};return h$.runKernel(JN,t)}});const VA=w$({reciprocal_:function(e){const t={x:y$(e,"x","reciprocal")};return h$.runKernel(QN,t)}});const UA=w$({relu_:function(e){const t={x:y$(e,"x","relu")};return h$.runKernel(eS,t)}});const GA=w$({relu6_:function(e){const t={x:y$(e,"x","relu6")};return h$.runKernel(oS,t)}});const HA=w$({reverse_:function(e,t){const n={x:y$(e,"x","reverse")},s={dims:t};return h$.runKernel(iS,n,s)}});const jA=w$({reverse1d_:function(e){const t=y$(e,"x","reverse");return ow(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),HA(t,0)}});const XA=w$({reverse2d_:function(e,t){const n=y$(e,"x","reverse");return ow(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),HA(n,t)}});const KA=w$({reverse3d_:function(e,t){const n=y$(e,"x","reverse");return ow(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),HA(n,t)}});const qA=w$({reverse4d_:function(e,t){const n=y$(e,"x","reverse");return ow(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),HA(n,t)}});const YA=w$({round_:function(e){const t={x:y$(e,"x","round")};return h$.runKernel(lS,t)}});const ZA=w$({rsqrt_:function(e){const t={x:y$(e,"x","rsqrt","float32")};return h$.runKernel(uS,t)}});const JA=w$({selu_:function(e){const t={x:y$(e,"x","selu")};return h$.runKernel(fS,t)}});const QA=w$({separableConv2d_:function(e,t,n,s,a,r=[1,1],o="NHWC"){const i=y$(e,"x","separableConv2d"),l=y$(t,"depthwiseFilter","separableConv2d"),u=y$(n,"pointwiseFilter","separableConv2d");let c=i,h=!1;if(3===i.rank&&(h=!0,c=iE(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");ow(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),ow(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),ow(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),ow(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),ow(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const d=l.shape[2],p=l.shape[3];ow(u.shape[2]===d*p,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*p}, but got ${u.shape[2]}.`));const f=HE(c,l,s,a,o,r),m=_E(f,u,1,"valid",o);return h?iE(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const e_=async function(e,t){const n=y$(e,"x","setdiff1d"),s=y$(t,"y","setdiff1d");ow(n.dtype===s.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`)),ow(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),ow(1===s.rank,(()=>`y should be 1D tensor, but got y (${s.shape}).`));const a=await n.data(),r=await s.data(),o=new Set(r);let i=0;for(let e=0;e<a.length;e++)o.has(a[e])||i++;const l=new VC([i],n.dtype),u=new VC([i],"int32");for(let e=0,t=0;e<a.length;e++)o.has(a[e])||(l.values[t]=a[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]};const t_=w$({sign_:function(e){const t={x:y$(e,"x","sign")};return h$.runKernel(bS,t)}});const n_=w$({sin_:function(e){const t={x:y$(e,"x","sin","float32")};return h$.runKernel(gS,t)}});const s_=w$({sinh_:function(e){const t={x:y$(e,"x","sinh")};return h$.runKernel(xS,t)}});const a_=w$({slice1d_:function(e,t,n){const s=y$(e,"x","slice1d");return ow(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),pE(s,[t],[n])}});const r_=w$({slice2d_:function(e,t,n){const s=y$(e,"x","slice2d");return ow(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),pE(s,t,n)}});const o_=w$({slice3d_:function(e,t,n){const s=y$(e,"x","slice3d");return ow(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),pE(s,t,n)}});const i_=w$({slice4d_:function(e,t,n){const s=y$(e,"x","slice4d");return ow(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),pE(s,t,n)}});const l_=w$({softmax_:function(e,t=-1){const n=y$(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const s={logits:n},a={dim:t};return h$.runKernel(SS,s,a)}});const u_=w$({fft_:function(e){ow("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return h$.runKernel(qI,t)}});const c_=w$({ifft_:function(e){ow("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return h$.runKernel(oN,t)}});const h_=w$({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let s;if(t<=2){const a=iE(e,[n,t]);s=c_(a)}else{const a=[n,2*(t-1)],r=iE(WA(e),[n,t]),o=iE(FR(e),[n,t]),i=HA(pE(r,[0,1],[n,t-2]),1),l=_T(HA(pE(o,[0,1],[n,t-2]),1),xR(-1)),u=cE([r,i],1),c=cE([o,l],1),h=iE(I$(u,c),[a[0],a[1]]);s=c_(h)}if(s=WA(s),3===e.rank&&0!==e.shape[0]){const t=s,n=e.shape[0];s=iE(s,[n,s.shape[0]/n,s.shape[1]]),t.dispose()}return s}});const d_=w$({split_:function(e,t,n=0){const s={x:y$(e,"x","split")},a={numOrSizeSplits:t,axis:n};return h$.runKernel(NS,s,a)}});const p_=w$({rfft_:function(e,t){ow("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const s=e.size/n;let a;if(null!=t&&t<n){const s=e.shape.map((e=>0)),r=e.shape.map((e=>e));r[e.shape.length-1]=t,a=pE(e,s,r),n=t}else if(null!=t&&t>n){const s=e.shape.map((e=>e));s[e.shape.length-1]=t-n,a=cE([e,iA(s)],e.shape.length-1),n=t}else a=e;const r=QE(a),o=iE(I$(a,r),[s,n]),i=u_(o),l=Math.floor(n/2)+1,u=WA(i),c=FR(i),h=d_(u,[l,n-l],u.shape.length-1),d=d_(c,[l,n-l],c.shape.length-1),p=a.shape.slice();return p[a.shape.length-1]=l,iE(I$(h[0],d[0]),p)}});const f_=w$({squaredDifference_:function(e,t){let n=y$(e,"a","squaredDifference"),s=y$(t,"b","squaredDifference");[n,s]=a$(n,s),YE(n.shape,s.shape);const a={a:n,b:s};return h$.runKernel(AS,a,{})}});const m_=w$({squeeze_:function(e,t){const n=y$(e,"x","squeeze","string_or_numeric");return iE(n,xw(n.shape,t).newShape)}});const g_=w$({stack_:function(e,t=0){const n=v$(e,"tensors","stack","string_or_numeric");ow(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&ow(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const s=n,a={axis:t};return h$.runKernel(UN,s,a)}});const x_=w$({step_:function(e,t=0){const n={x:y$(e,"x","step")},s={alpha:t};return h$.runKernel(qS,n,s)}});const b_=w$({stridedSlice_:function(e,t,n,s,a=0,r=0,o=0,i=0,l=0){const u={x:y$(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:s,beginMask:a,endMask:r,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};return h$.runKernel(OS,u,c)}});const y_=w$({tan_:function(e){const t={x:y$(e,"x","tan","float32")};return h$.runKernel(PS,t)}});function v_(e,t){lw(e);const n=g$(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return N$(e,null,n,t)}function k_(e,t,n){if(lw(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=g$(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return N$(e,t,s,n)}function w_(e,t,n){if(lw(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=g$(e,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return N$(e,t,s,n)}function I_(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,a=t.rank>1?t.rank-1:1,r=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${a}.`;if(n.rank<a)throw new Error(r+` update.rank < ${a}. `);if(e.length<s+(n.rank-a))throw new Error(r+` Output shape length < ${s+(n.rank-a)}`);if(n.rank!==a+e.length-s)throw new Error(r+" update.rank != "+(a+e.length-s));for(let e=0;e<a;++e)if(n.shape[e]!==t.shape[e])throw new Error(r+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-a;++t)if(n.shape[t+a]!==e[t+s])throw new Error(r+` updates.shape[${t+a}] (${n.shape[t+a]}) != shape[${t+a}] (${e[t+a]})`)}function N_(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}I_(n,t,e)}function S_(e,t,n){const s=t.shape.length,a=s>1?t.shape[s-1]:1,r=n.length;let o=1;for(let e=a;e<r;++e)o*=n[e];const i=a<1?1:a;return{sliceRank:a,numUpdates:uw(t.shape)/i,sliceSize:o,strides:[...$w(n.slice(0,a)),1],outputSize:uw(n)}}const C_=w$({tensorScatterUpdate_:function(e,t,n){const s=y$(e,"tensor","tensorScatterupdate"),a=y$(t,"indices","tensorScatterupdate","int32"),r=y$(n,"updates","tensorScatterupdate");if(N_(r,a,s.shape),s.dtype!==r.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${s.dtype} and ${r.dtype}.`);const o={tensor:s,indices:a,updates:r};return h$.runKernel(hS,o,{})}});const $_=w$({topk_:function(e,t=1,n=!0){const s=y$(e,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const a=s.shape[s.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>a)throw new Error(`'k' passed to topk() must be <= the last dimension (${a}) but got ${t}`);const r={x:s},o={k:t,sorted:n},[i,l]=h$.runKernel(VS,r,o);return{values:i,indices:l}}});const T_=w$({truncatedNormal_:function(e,t=0,n=1,s,a){if(Fw(e),null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const r=new _A(t,n,s,!0,a),o=yT(e,s);for(let e=0;e<o.values.length;e++)o.values[e]=r.nextValue();return o.toTensor()}});const E_=w$({unique_:function(e,t=0){const n=y$(e,"x","unique","string_or_numeric");ow(n.rank>0,(()=>"The input tensor must be at least 1D"));const s={x:n},a={axis:t},[r,o]=h$.runKernel(HS,s,a);return{values:r,indices:o}}});const R_=w$({unsortedSegmentSum_:function(e,t,n){const s=y$(e,"x","unsortedSegmentSum"),a=y$(t,"segmentIds","unsortedSegmentSum","int32");ow(hw(n),(()=>"numSegments must be of dtype int"));const r={x:s,segmentIds:a},o={numSegments:n};return h$.runKernel(XS,r,o)}});const A_=w$({unstack_:function(e,t=0){const n=y$(e,"x","unstack","string_or_numeric");ow(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const s={value:n},a={axis:t};return h$.runKernel(jS,s,a)}});function __(e,t=!0,n,s){return h$.makeVariable(e,t,n,s)}function F_(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const s=yT(e,"int32"),a=yT([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const r=s.indexToLoc(n[t]),o=t*e.length;a.values.set(r,o)}return a.toTensor()}const O_=async function(e){const t=y$(e,"condition","whereAsync","bool"),n=await t.data(),s=F_(t.shape,n);return e!==t&&t.dispose(),s};const D_=async function(e,t,n){const s=y$(e,"tensor","boolMask"),a=y$(t,"mask","boolMask","bool"),r=null==n?0:n,o=a.rank,i=s.shape;ow(o>0,(()=>"mask cannot be scalar")),iw(i.slice(r,r+o),a.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=r;e<r+o;e++)l*=i[e];const u=i.slice(0,r).concat([l],i.slice(r+o)),c=iE(s,u),h=iE(a,[-1]),d=await O_(h),p=m_(d,[1]),f=RR(c,p,r);return e!==s&&s.dispose(),t!==a&&a.dispose(),p.dispose(),c.dispose(),h.dispose(),d.dispose(),f};const M_=w$({transpose_:function(e,t,n){const s=y$(e,"x","transpose");if(null==t&&(t=s.shape.map(((e,t)=>t)).reverse()),ow(s.rank===t.length,(()=>`Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`)),t.forEach((e=>{ow(e>=0&&e<s.rank,(()=>"All entries in 'perm' must be between 0 and "+(s.rank-1)+` but got ${t}`))})),s.rank<=1)return s.clone();const a={x:s},r={perm:t};return"complex64"===s.dtype?ST((()=>{let e=WA(s),t=FR(s);return e=h$.runKernel(GS,{x:e},r),t=h$.runKernel(GS,{x:t},r),n&&(t=GR(t)),I$(e,t)})):h$.runKernel(GS,a,r)}});const L_=w$({movingAverage_:function(e,t,n,s,a=!0){const r=y$(e,"v","movingAverage"),o=y$(t,"x","movingAverage"),i=y$(n,"decay","movingAverage");var l,u;u=o,ow((l=r).dtype===u.dtype,(()=>`The dtypes of the first(${l.dtype}) and second(${u.dtype}) input must match`)),ow(cw(r.shape,o.shape),(()=>"Shape mismatch in v and x"));const c=xR(1),h=XR(c,i);let d=_T(XR(o,r),h);if(a){ow(null!=s,(()=>"When using zeroDebias: true, step is required."));const e=y$(s,"step","movingAverage");d=AT(d,XR(c,gR(i,e)))}return ET(r,d)}});const B_=w$({scatterND_:function(e,t,n){Fw(n);const s=y$(e,"indices","scatterND","int32"),a=y$(t,"updates","scatterND");N_(a,s,n);const r={indices:s,updates:a},o={shape:n};return h$.runKernel(cS,r,o)}});const P_=w$({sparseToDense_:function(e,t,n,s=0){Fw(n);const a=y$(e,"sparseIndices","sparseToDense","int32"),r=y$(t,"sparseValues","sparseToDense","string_or_numeric"),o=y$(s,"defaultValue","sparseToDense",r.dtype);!function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const a=e.rank>0?e.shape[0]:1,r=e.rank>1?e.shape[1]:1;if(n.length!==r)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${r}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==a))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${a}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(a,r,n,o);const i={sparseIndices:a,sparseValues:r,defaultValue:o},l={outputShape:n};return h$.runKernel(RS,i,l)}});const z_=w$({gatherND_:function(e,t){const n=y$(t,"indices","gatherND","int32"),s={params:y$(e,"x","gatherND","string_or_numeric"),indices:n};return h$.runKernel(nN,s)}});const W_=w$({dropout_:function(e,t,n,s){const a=y$(e,"x","dropout");if(ow("float32"===a.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`)),ow(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof HC?a.clone():a;const r=function(e,t){if(null==t)return e.shape.slice();if(cw(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(a,n),o=1-t,i=AT(ER(ET(BA(r,0,1,"float32",s),o)),o);return _T(a,i)}});function V_(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function U_(e,t,n){const s=1-e%2,a=new Float32Array(e);for(let r=0;r<e;++r){const o=2*Math.PI*r/(e+s-1);a[r]=t-n*Math.cos(o)}return v_(a,"float32")}const G_=async function(e,t,n=1){const s=y$(e,"predictions","inTopK"),a=y$(t,"targets","inTopK");ow(s.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`)),ow(s.rank-1===a.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${a.rank}`)),iw(s.shape.slice(0,s.shape.length-1),a.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const r=s.shape[s.shape.length-1];ow(n>0&&n<=r,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${r}), but got ${n}`));const o=await s.data(),i=await a.data(),[l,u]=[o.length/r,r],c=bw("bool",l);for(let e=0;e<l;e++){const t=e*u,s=o.subarray(t,t+u),a=[];for(let e=0;e<s.length;e++)a.push({value:s[e],index:e});a.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(a[t].index===i[e]){c[e]=1;break}}return e!==s&&s.dispose(),t!==a&&a.dispose(),S$(c,a.shape,"bool")};const H_=w$({conv2DBackpropFilter_:function(e,t,n,s,a,r="NHWC",o){let i=e;3===e.rank&&(i=iE(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=iE(t,[1,t.shape[0],t.shape[1],t.shape[2]])),ow(4===i.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`)),ow(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),ow(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===r?i.shape[3]:i.shape[1],c="NHWC"===r?l.shape[3]:l.shape[1];ow(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),ow(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),oE("conv2dDerFilter",a,o);const h={x:i,dy:l},d={strides:s,pad:a,dataFormat:r,dimRoundingMode:o,filterShape:n};return h$.runKernel(kI,h,d)}});function j_(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return _T(e,x_(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function X_(e,t){let n=t;const s=qE(e.shape,t.shape);return s.length>0&&(n=vR(n,s)),iE(n,e.shape)}function K_(e,t,n,s){if("linear"===t)return e;if("relu"===t)return UA(e);if("elu"===t)return sR(e);if("relu6"===t)return GA(e);if("prelu"===t)return CA(e,n);if("leakyrelu"===t)return LR(e,s);if("sigmoid"===t)return dE(e);throw new Error(`Unknown fused activation ${t}.`)}const q_=(e,t)=>!(e>0)||"linear"===t;const Y_=w$({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:a="NHWC",dilations:r=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===q_(h$.state.gradientDepth,l)){ow("NHWC"===a,(()=>`Error in fused conv2d: got dataFormat of ${a} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let h=_E(e,t,n,s,a,r,o);return null!=i&&(h=ET(h,i)),K_(h,l,u,c)}const h=y$(e,"x","conv2d","float32"),d=y$(t,"filter","conv2d","float32");let p=h,f=!1;3===h.rank&&(f=!0,p=iE(h,[1,h.shape[0],h.shape[1],h.shape[2]])),ow(4===p.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`)),ow(4===d.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`)),oE("fused conv2d",s,o);const m="NHWC"===a?p.shape[3]:p.shape[1];ow(d.shape[2]===m,(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${d.shape[2]}.`)),ow(sE(n,r),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${r}'`));const g=qT(p.shape,d.shape,n,r,s,o);let x,b;if(null!=i&&(x=y$(i,"bias","fused conv2d"),[x]=a$(x,h),"NHWC"===a?YE(g.outShape,x.shape):(ow(x.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${x.shape.length}.`)),ow(0===x.shape.length||x.shape[0]===g.outChannels||1===x.shape[0],(()=>`Error in fused conv2d: bias shape (${x.shape}) is not compatible with the number of output channels (${g.outChannels})`)))),null!=u){const e=u.shape;if(ow(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)ow(1===e[0]||e[0]===g.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`));else if(3===e.length)try{YE(e,g.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(n)}b=y$(u,"prelu weights","fused conv2d")}const y=(e,t)=>{ow("NHWC"===a,(()=>`Error in gradient of fused conv2D: got dataFormat of ${a} but only NHWC is currently supported.`));const[o,i,u,c]=t,h=j_(e,u,l);ow(nE(r),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const d=[OE(i.shape,h,o,n,s),H_(i,h,o.shape,n,s)];if(null!=c){const e=X_(c,h);d.push(e)}return d},v={x:p,filter:d,bias:x,preluActivationWeights:b},k={strides:n,pad:s,dataFormat:a,dilations:r,dimRoundingMode:o,activation:l,leakyreluAlpha:c};if(null==i){const e=UR(((e,t,n)=>{let s=h$.runKernel(QS,v,k);return n([t,e,s]),f&&(s=iE(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:y}}));return e(p,d)}{const e=UR(((e,t,n,s)=>{let a=h$.runKernel(QS,v,k);return s([t,e,a,n]),f&&(a=iE(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:y}}));return e(p,d,x)}}});const Z_=w$({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,a,r=[1,1],o){let i=e;3===e.rank&&(i=iE(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=iE(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:i,dy:l},c={strides:s,pad:a,dimRoundingMode:o,dilations:r,filterShape:n};return h$.runKernel(OI,u,c)}});const J_=w$({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,a,r=[1,1],o){let i=t,l=!1;3===t.rank&&(l=!0,i=iE(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:i,filter:n},c={strides:s,pad:a,dimRoundingMode:o,dilations:r,inputShape:e},h=h$.runKernel(DI,u,c);return l?iE(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Q_=w$({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:a="NHWC",dilations:r=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===q_(h$.state.gradientDepth,l)){let h=HE(e,t,n,s,a,r,o);return null!=i&&(h=ET(h,i)),K_(h,l,u,c)}const h=y$(e,"x","depthwiseConv2d","float32"),d=y$(t,"filter","depthwiseConv2d","float32");let p=h,f=!1;3===h.rank&&(f=!0,p=iE(h,[1,h.shape[0],h.shape[1],h.shape[2]])),ow(4===p.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`)),ow(4===d.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`)),ow(p.shape[3]===d.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`)),null==r&&(r=[1,1]),ow(sE(n,r),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${r}'`)),oE("fused depthwiseConv2d",s,o);const m=qT(p.shape,d.shape,n,r,s,o,!0);let g,x;null!=i&&(g=y$(i,"bias","fused conv2d"),[g]=a$(g,h),YE(m.outShape,g.shape)),null!=u&&(x=y$(u,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{ow(nE(r),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${r}'`));const[a,i,u,c]=t,h=j_(e,u,l),d=J_(i.shape,h,a,n,s,r,o),p=Z_(i,h,a.shape,n,s,r,o);if(null!=c){return[d,p,X_(g,h)]}return[d,p]},y={x:p,filter:d,bias:g,preluActivationWeights:x},v={strides:n,pad:s,dataFormat:a,dilations:r,dimRoundingMode:o,activation:l,leakyreluAlpha:c};if(null==i){const e=UR(((e,t,n)=>{let s=h$.runKernel(eC,y,v);return n([t,e,s]),f&&(s=iE(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}));return e(p,d)}{const e=UR(((e,t,n,s)=>{let a=h$.runKernel(eC,y,v);return s([t,e,a,n]),f&&(a=iE(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:b}}));return e(p,d,g)}}});const eF=w$({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:a,activation:r="linear",preluActivationWeights:o,leakyreluAlpha:i=.2}){if(!1===q_(h$.state.gradientDepth,r)){let l=hE(e,t,n,s);return null!=a&&(l=ET(l,a)),K_(l,r,o,i)}let l=y$(e,"a","fused matMul"),u=y$(t,"b","fused matMul");[l,u]=a$(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],d=n?l.shape[l.rank-1]:l.shape[l.rank-2],p=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=uw(f),x=uw(m);ow(c===h,(()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${s} must match.`));const b=YE(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([d,p]),y=iE(l,n?[g,c,d]:[g,d,c]),v=iE(u,s?[x,p,h]:[x,h,p]);let k,w;null!=a&&(k=y$(a,"bias","fused matMul"),[k]=a$(k,l),YE(b,k.shape)),null!=o&&(w=y$(o,"prelu weights","fused matMul"));const I=(e,t)=>{const[o,i,l,u]=t,c=j_(iE(e,l.shape),l,r);let h,d;if(n||s?!n&&s?(h=hE(c,i,!1,!1),d=hE(c,o,!0,!1)):n&&!s?(h=hE(i,c,!1,!0),d=hE(o,c,!1,!1)):(h=hE(i,c,!0,!0),d=hE(c,o,!0,!0)):(h=hE(c,i,!1,!0),d=hE(o,c,!0,!1)),null!=a){return[h,d,X_(u,c)]}return[h,d]},N={a:y,b:v,bias:k,preluActivationWeights:w},S={transposeA:n,transposeB:s,activation:r,leakyreluAlpha:i};if(null==a){const e=UR(((e,t,n)=>{const s=h$.runKernel(JS,N,S);return n([e,t,s]),{value:iE(s,b),gradFunc:I}}));return e(y,v)}{const e=UR(((e,t,n,s)=>{const a=h$.runKernel(JS,N,S);return s([e,t,a,n]),{value:iE(a,b),gradFunc:I}}));return e(y,v,k)}}});var tF=Object.freeze({__proto__:null,conv2d:Y_,depthwiseConv2d:Q_,matMul:eF});const nF=w$({hammingWindow_:function(e){return U_(e,.54,.46)}});const sF=w$({hannWindow_:function(e){return U_(e,.5,.5)}});const aF=w$({frame_:function(e,t,n,s=!1,a=0){let r=0;const o=[];for(;r+t<=e.size;)o.push(pE(e,r,t)),r+=n;if(s)for(;r<e.size;){const s=r+t-e.size,i=cE([pE(e,r,t-s),CE([s],a)]);o.push(i),r+=n}return 0===o.length?k_([],[0,t]):iE(cE(o),[o.length,t])}});const rF=w$({stft_:function(e,t,n,s,a=sF){null==s&&(s=V_(t));const r=aF(e,t,n),o=_T(r,a(t));return p_(o,s)}});const oF=w$({cropAndResize_:function(e,t,n,s,a="bilinear",r=0){const o=y$(e,"image","cropAndResize"),i=y$(t,"boxes","cropAndResize","float32"),l=y$(n,"boxInd","cropAndResize","int32"),u=i.shape[0];ow(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),ow(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`)),ow(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`)),ow(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),ow(s[0]>=1&&s[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${s}`)),ow("bilinear"===a||"nearest"===a,(()=>`method must be bilinear or nearest, but was ${a}`));const c={image:o,boxes:i,boxInd:l},h={method:a,extrapolationValue:r,cropSize:s};return h$.runKernel(RI,c,h)}});const iF=w$({flipLeftRight_:function(e){const t=y$(e,"image","flipLeftRight","float32");ow(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return h$.runKernel(ZI,n,{})}});const lF=w$({grayscaleToRGB_:function(e){const t=y$(e,"image","grayscaleToRGB"),n=t.rank-1,s=t.shape[n];ow(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),ow(1===s,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`));const a=new Array(t.rank);return a.fill(1,0,n),a[n]=3,$R(t,a)}});const uF=w$({rgbToGrayscale_:function(e){const t=y$(e,"image","RGBToGrayscale"),n=t.rank-1,s=t.shape[n];ow(t.rank>=2,(()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`)),ow(3===s,(()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${s}.`));const a=t.dtype,r=vT(t,"float32"),o=v_([.2989,.587,.114]);let i;switch(t.rank){case 2:i=nR("ij,j->i",r,o);break;case 3:i=nR("ijk,k->ij",r,o);break;case 4:i=nR("ijkl,l->ijk",r,o);break;case 5:i=nR("ijklm,m->ijkl",r,o);break;case 6:i=nR("ijklmn,n->ijklm",r,o);break;default:throw new Error("Not a valid tensor rank.")}return i=SR(i,-1),vT(i,a)}});const cF=w$({rotateWithOffset_:function(e,t,n=0,s=.5){const a=y$(e,"image","rotateWithOffset","float32");ow(4===a.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${a.rank}.`));const r={image:a},o={radians:t,fillValue:n,center:s};return h$.runKernel(ZS,r,o)}});function hF(e,t,n,s,a,r){null==s&&(s=.5),null==a&&(a=Number.NEGATIVE_INFINITY),null==r&&(r=0);const o=e.shape[0];return n=Math.min(n,o),ow(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),ow(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),ow(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),ow(1===t.rank,(()=>"scores must be a 1D tensor")),ow(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),ow(0<=r&&r<=1,(()=>`softNmsSigma must be in [0, 1], but was '${r}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:a,softNmsSigma:r}}const dF=w$({nonMaxSuppression_:function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY){const r=y$(e,"boxes","nonMaxSuppression","float32"),o=y$(t,"scores","nonMaxSuppression","float32"),i=hF(r,o,n,s,a),l={maxOutputSize:n=i.maxOutputSize,iouThreshold:s=i.iouThreshold,scoreThreshold:a=i.scoreThreshold};return h$.runKernel(BN,{boxes:r,scores:o},l)}});function pF(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,a=e.length,r=0,o=!1;for(;s<a;){r=s+(a-s>>>1);const i=n(t,e[r]);i>0?s=r+1:(a=r,o=!i)}return o?s:-s-1}(e,t,n||fF)}(e,t,n),a=s<0?-(s+1):s;e.splice(a,0,t)}function fF(e,t){return e>t?1:e<t?-1:0}function mF(e,t,n,s,a){return bF(e,t,n,s,a,0)}function gF(e,t,n,s,a,r){return bF(e,t,n,s,a,0,!1,r,!0)}function xF(e,t,n,s,a,r){return bF(e,t,n,s,a,r,!0)}function bF(e,t,n,s,a,r,o=!1,i=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>a&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(kF);const c=r>0?-.5/r:0,h=[],d=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:r,suppressBeginIndex:o}=t;if(n<a)break;let i=!1;for(let n=h.length-1;n>=o;--n){const o=yF(e,r,h[n]);if(o>=s){i=!0;break}if(t.score=t.score*vF(s,c,o),t.score<=a)break}t.suppressBeginIndex=h.length,i||(t.score===n?(h.push(r),d.push(t.score)):t.score>a&&pF(u,t,kF))}const p=h.length,f=n-p;i&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const m={selectedIndices:h};return o&&(m.selectedScores=d),l&&(m.validOutputs=p),m}function yF(e,t,n){const s=e.subarray(4*t,4*t+4),a=e.subarray(4*n,4*n+4),r=Math.min(s[0],s[2]),o=Math.min(s[1],s[3]),i=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(a[0],a[2]),c=Math.min(a[1],a[3]),h=Math.max(a[0],a[2]),d=Math.max(a[1],a[3]),p=(i-r)*(l-o),f=(h-u)*(d-c);if(p<=0||f<=0)return 0;const m=Math.max(r,u),g=Math.max(o,c),x=Math.min(i,h),b=Math.min(l,d),y=Math.max(x-m,0)*Math.max(b-g,0);return y/(p+f-y)}function vF(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function kF(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const wF=async function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY){const r=y$(e,"boxes","nonMaxSuppressionAsync"),o=y$(t,"scores","nonMaxSuppressionAsync"),i=hF(r,o,n,s,a);n=i.maxOutputSize,s=i.iouThreshold,a=i.scoreThreshold;const l=await Promise.all([r.data(),o.data()]),u=l[0],c=l[1],{selectedIndices:h}=mF(u,c,n,s,a);return r!==e&&r.dispose(),o!==t&&o.dispose(),v_(h,"int32")};const IF=w$({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY,r=0){const o=y$(e,"boxes","nonMaxSuppression"),i=y$(t,"scores","nonMaxSuppression"),l=hF(o,i,n,s,a,r),u={boxes:o,scores:i},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:a=l.scoreThreshold,softNmsSigma:r=l.softNmsSigma},h=h$.runKernel(zN,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}});const NF=async function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY,r=0){const o=y$(e,"boxes","nonMaxSuppressionAsync"),i=y$(t,"scores","nonMaxSuppressionAsync"),l=hF(o,i,n,s,a,r);n=l.maxOutputSize,s=l.iouThreshold,a=l.scoreThreshold,r=l.softNmsSigma;const u=await Promise.all([o.data(),i.data()]),c=u[0],h=u[1],{selectedIndices:d,selectedScores:p}=xF(c,h,n,s,a,r);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:v_(d,"int32"),selectedScores:v_(p)}};const SF=w$({nonMaxSuppressionPadded_:function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY,r=!1){const o=y$(e,"boxes","nonMaxSuppression"),i=y$(t,"scores","nonMaxSuppression"),l=hF(o,i,n,s,a,null),u={boxes:o,scores:i},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:r},h=h$.runKernel(PN,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const CF=async function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY,r=!1){const o=y$(e,"boxes","nonMaxSuppressionAsync"),i=y$(t,"scores","nonMaxSuppressionAsync"),l=hF(o,i,n,s,a,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[d,p]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=gF(d,p,u,c,h,r);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:v_(f,"int32"),validOutputs:xR(m,"int32")}};const $F=w$({resizeBilinear_:function(e,t,n=!1,s=!1){const a=y$(e,"images","resizeBilinear");ow(3===a.rank||4===a.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${a.rank}.`)),ow(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),ow(!1===s||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let r=a,o=!1;3===a.rank&&(o=!0,r=iE(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const i={images:r},l={alignCorners:n,halfPixelCenters:s,size:t},u=h$.runKernel(aS,i,l);return o?iE(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const TF=w$({resizeNearestNeighbor_:function(e,t,n=!1,s=!1){const a=y$(e,"images","resizeNearestNeighbor");ow(3===a.rank||4===a.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${a.rank}.`)),ow(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),ow("float32"===a.dtype||"int32"===a.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),ow(!1===s||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let r=a,o=!1;3===a.rank&&(o=!0,r=iE(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const i={images:r},l={alignCorners:n,halfPixelCenters:s,size:t},u=h$.runKernel(nS,i,l);return o?iE(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const EF=w$({threshold_:function(e,t="binary",n=!1,s=.5){const a=y$(e,"image","threshold"),r=a.shape[0]*a.shape[1];let o,i,l,u,c=_T(v_([s]),255);if(ow(3===a.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${a.rank}.`)),ow(3===a.shape[2]||1===a.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${a.shape[2]}.`)),ow("int32"===a.dtype||"float32"===a.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${a.dtype}.`)),ow("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===a.shape[2]){[o,i,l]=d_(a,[1,1,1],-1);const e=_T(o,.2989),t=_T(i,.587),n=_T(l,.114);u=ET(ET(e,t),n)}else u=e;if("otsu"===t){c=function(e,t){let n,s,a,r,o,i,l=v_([-1]),u=v_([0]),c=v_([0]);for(let h=0;h<e.size-1;h++){n=pE(e,0,h+1),s=pE(e,h+1),o=AT(vR(n),t),i=AT(vR(s),t);const d=vR(_T(n,zA(0,n.size)));a=AT(d,vR(n));const p=CE(s.shape,n.size),f=ET(zA(0,s.size),p),m=_T(s,f);r=AT(vR(m),vR(s));const g=XR(a,r),x=XR(a,r),b=_T(o,i);c=_T(_T(b,g),x);const y=AR(c,u);u=JE(y,c,u),l=JE(y,v_([h]),l)}return l}(kE(vT(YA(u),"int32"),S$([]),256),r)}const h=n?PR(u,c):AR(u,c);return vT(_T(h,255),"int32")}});const RF=w$({transform_:function(e,t,n="nearest",s="constant",a=0,r){const o=y$(e,"image","transform","float32"),i=y$(t,"transforms","transform","float32");ow(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),ow(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),ow(null==r||2===r.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${r}.`));const l={image:o,transforms:i},u={interpolation:n,fillMode:s,fillValue:a,outputShape:r};return h$.runKernel(US,l,u)}});const AF=w$({bandPart_:function(e,t,n){const s=y$(e,"a","bandPart");ow(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const a=s.shape,[r,o]=s.shape.slice(-2);let i,l;"number"==typeof t?(ow(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),ow(t<=r,(()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${r}).`)),i=y$(t<0?r:t,"numLower","bandPart")):(ow("int32"===t.dtype,(()=>"bandPart(): numLower's dtype must be an int32.")),i=JE(BR(t,0),r,uA(t,r))),"number"==typeof n?(ow(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`)),ow(n<=o,(()=>`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`)),l=y$(n<0?o:n,"numUpper","bandPart")):(ow("int32"===n.dtype,(()=>"bandPart(): numUpper's dtype must be an int32.")),l=JE(BR(n,0),o,uA(n,o)));const u=iE(zA(0,r,1,"int32"),[-1,1]),c=zA(0,o,1,"int32"),h=XR(u,c),d=YR(PR(h,i),_R(h,GR(l))),p=iA([r,o],s.dtype);return iE(g_(A_(iE(s,[-1,r,o])).map((e=>JE(d,e,p)))),a)}});const _F=w$({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,ow(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)ow(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=d_(e,e.shape[0],0).map((e=>m_(e,[0])));ow(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],s=e;for(let t=0;t<e.length;++t)n.push(h$.tidy((()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){const t=_T(vR(_T(n[s],e)),n[s]);e=XR(e,t)}return AT(e,wR(e,"euclidean"))})));return t?g_(n,0):n}});function FF(e,t=!1){return h$.tidy((()=>{ow(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],s=e.shape[1];let a=TR(n),r=kT(e);const o=k_([[1]],[1,1]);let i=kT(o);const l=n>=s?s:n;for(let e=0;e<l;++e){const t=r,l=i,u=a;[i,r,a]=h$.tidy((()=>{const t=pE(r,[e,e],[n-e,1]),l=wR(t),u=pE(r,[e,e],[1,1]),c=JE(AR(u,0),k_([[-1]]),k_([[1]])),h=XR(u,_T(c,l)),d=AT(t,h);i=1===d.shape[0]?kT(o):cE([o,pE(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const p=GR(AT(hE(c,h),l)),f=pE(r,[e,0],[n-e,s]),m=_T(p,i),g=M_(i);if(0===e)r=XR(f,hE(m,hE(g,f)));else{const t=XR(f,hE(m,hE(g,f)));r=cE([pE(r,[0,0],[e,s]),t],0)}const x=M_(m),b=pE(a,[0,e],[n,a.shape[1]-e]);if(0===e)a=XR(b,hE(hE(b,i),x));else{const t=XR(b,hE(hE(b,i),x));a=cE([pE(a,[0,0],[n,e]),t],1)}return[i,r,a]})),CT([t,l,u])}return!t&&n>s&&(a=pE(a,[0,0],[n,s]),r=pE(r,[0,0],[s,s])),[a,r]}))}const OF=w$({qr_:function(e,t=!1){if(ow(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return FF(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),s=A_(iE(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),a=[],r=[];s.forEach((e=>{const[n,s]=FF(e,t);a.push(n),r.push(s)}));return[iE(g_(a,0),e.shape),iE(g_(r,0),e.shape)]}}});var DF;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(DF||(DF={}));const MF=w$({computeWeightedLoss_:function(e,t,n=DF.SUM_BY_NONZERO_WEIGHTS){const s=y$(e,"losses","computeWeightedLoss");let a=null;null!=t&&(a=y$(t,"weights","computeWeightedLoss"));const r=null==a?s:_T(s,a);if(n===DF.NONE)return r;if(n===DF.SUM)return vR(r);if(n===DF.MEAN){if(null==a)return oA(r);{const e=s.size/a.size,t=AT(vR(r),vR(a));return e>1?AT(t,xR(e)):t}}if(n===DF.SUM_BY_NONZERO_WEIGHTS){if(null==a)return AT(vR(r),xR(s.size));{const e=_T(a,lA(s.shape)),t=vT(vR(mA(e,xR(0))),"float32");return AT(vR(r),t)}}throw Error(`Unknown reduction: ${n}`)}});const LF=w$({absoluteDifference_:function(e,t,n,s=DF.SUM_BY_NONZERO_WEIGHTS){const a=y$(e,"labels","absoluteDifference"),r=y$(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=y$(n,"weights","absoluteDifference")),iw(a.shape,r.shape,"Error in absoluteDifference: ");const i=FT(XR(a,r));return MF(i,o,s)}});const BF=w$({cosineDistance_:function(e,t,n,s,a=DF.SUM_BY_NONZERO_WEIGHTS){const r=y$(e,"labels","cosineDistance"),o=y$(t,"predictions","cosineDistance");let i=null;null!=s&&(i=y$(s,"weights","cosineDistance")),iw(r.shape,o.shape,"Error in cosineDistance: ");const l=xR(1),u=XR(l,vR(_T(r,o),n,!0));return MF(u,i,a)}});const PF=w$({hingeLoss_:function(e,t,n,s=DF.SUM_BY_NONZERO_WEIGHTS){let a=y$(e,"labels","hingeLoss");const r=y$(t,"predictions","hingeLoss");let o=null;null!=n&&(o=y$(n,"weights","hingeLoss")),iw(a.shape,r.shape,"Error in hingeLoss: ");const i=xR(1);a=XR(_T(xR(2),a),i);const l=UA(XR(i,_T(a,r)));return MF(l,o,s)}});const zF=w$({huberLoss_:function(e,t,n,s=1,a=DF.SUM_BY_NONZERO_WEIGHTS){const r=y$(e,"labels","huberLoss"),o=y$(t,"predictions","huberLoss");let i=null;null!=n&&(i=y$(n,"weights","huberLoss")),iw(r.shape,o.shape,"Error in huberLoss: ");const l=xR(s),u=FT(XR(o,r)),c=uA(u,l),h=XR(u,c),d=ET(_T(xR(.5),yR(c)),_T(l,h));return MF(d,i,a)}});const WF=w$({logLoss_:function(e,t,n,s=1e-7,a=DF.SUM_BY_NONZERO_WEIGHTS){const r=y$(e,"labels","logLoss"),o=y$(t,"predictions","logLoss");let i=null;null!=n&&(i=y$(n,"weights","logLoss")),iw(r.shape,o.shape,"Error in logLoss: ");const l=xR(1),u=xR(s),c=GR(_T(r,WR(ET(o,u)))),h=_T(XR(l,r),WR(ET(XR(l,o),u))),d=XR(c,h);return MF(d,i,a)}});const VF=w$({meanSquaredError_:function(e,t,n,s=DF.SUM_BY_NONZERO_WEIGHTS){const a=y$(e,"labels","meanSquaredError"),r=y$(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=y$(n,"weights","meanSquaredError")),iw(a.shape,r.shape,"Error in meanSquaredError: ");const i=f_(a,r);return MF(i,o,s)}});const UF=w$({sigmoidCrossEntropy_:function(e,t,n,s=0,a=DF.SUM_BY_NONZERO_WEIGHTS){let r=y$(e,"multiClassLabels","sigmoidCrossEntropy");const o=y$(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=y$(n,"weights","sigmoidCrossEntropy")),iw(r.shape,o.shape,"Error in sigmoidCrossEntropy: "),s>0){const e=xR(s),t=xR(1),n=xR(.5);r=ET(_T(r,XR(t,e)),_T(n,e))}const l=function(e,t){const n=y$(e,"labels","sigmoidCrossEntropyWithLogits"),s=y$(t,"logits","sigmoidCrossEntropyWithLogits");iw(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const a=UA(s),r=_T(s,n),o=VR(NR(GR(FT(s))));return ET(XR(a,r),o)}(r,o);return MF(l,i,a)}});const GF=w$({softmaxCrossEntropy_:function(e,t,n,s=0,a=DF.SUM_BY_NONZERO_WEIGHTS){let r=y$(e,"onehotLabels","softmaxCrossEntropy");const o=y$(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=y$(n,"weights","softmaxCrossEntropy")),iw(r.shape,o.shape,"Error in softmaxCrossEntropy: "),s>0){const e=xR(s),t=xR(1),n=xR(r.shape[1]);r=ET(_T(r,XR(t,e)),AT(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const s=UR(((e,t,s)=>{const a=qR(t,[n],!0),r=XR(vT(t,"float32"),a);s([e,r]);const o=GR(_T(r,e));return{value:vR(o,[n]),gradFunc:(e,t)=>{const[s,a]=t,r=uR(e.shape,[n]);return[_T(iE(e,r),XR(vT(s,"float32"),NR(a))),_T(iE(e,r),XR(NR(a),vT(s,"float32")))]}}}));return s(e,t)}(r,o);return MF(l,i,a)}});const HF=w$({sparseFillEmptyRows_:function(e,t,n,s){const a=y$(e,"indices","sparseFillEmptyRows","int32"),r=y$(t,"values","sparseFillEmptyRows"),o=y$(n,"denseShape","sparseFillEmptyRows","int32"),i=y$(s,"defaultValue","sparseFillEmptyRows",r.dtype);if(2!==a.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${a.shape}`);if(1!==r.rank)throw new Error(`Values should be Tensor1D but received shape ${r.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const l={indices:a,values:r,denseShape:o,defaultValue:i},u=h$.runKernel(CS,l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}});const jF=w$({sparseReshape_:function(e,t,n){const s=y$(e,"inputIndices","sparseReshape","int32"),a=y$(t,"inputShape","sparseReshape","int32"),r=y$(n,"newShape","sparseReshape","int32");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==a.rank)throw new Error(`Input shape should be Tensor1D but received shape ${a.shape}`);if(1!==r.rank)throw new Error(`New shape should be Tensor1D but received shape ${r.shape}`);const o={inputIndices:s,inputShape:a,newShape:r},i=h$.runKernel($S,o);return{outputIndices:i[0],outputShape:i[1]}}});const XF=w$({sparseSegmentMean_:function(e,t,n){const s=y$(e,"data","sparseSegmentMean"),a=y$(t,"indices","sparseSegmentMean","int32"),r=y$(n,"segmentIds","sparseSegmentMean","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${a.shape}`);if(1!==r.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${r.shape}`);const o={data:s,indices:a,segmentIds:r};return h$.runKernel(TS,o)}});const KF=w$({sparseSegmentSum_:function(e,t,n){const s=y$(e,"data","sparseSegmentSum"),a=y$(t,"indices","sparseSegmentSum","int32"),r=y$(n,"segmentIds","sparseSegmentSum","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${a.shape}`);if(1!==r.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${r.shape}`);const o={data:s,indices:a,segmentIds:r};return h$.runKernel(ES,o)}});const qF=w$({stringNGrams_:function(e,t,n,s,a,r,o,i){const l=y$(e,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=y$(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:s,leftPad:a,rightPad:r,padWidth:o,preserveShortSequences:i},h={data:l,dataSplits:u},d=h$.runKernel(DS,h,c);return{nGrams:d[0],nGramsSplits:d[1]}}});const YF={fft:u_,ifft:c_,rfft:p_,irfft:h_},ZF={hammingWindow:nF,hannWindow:sF,frame:aF,stft:rF},JF={flipLeftRight:iF,grayscaleToRGB:lF,resizeNearestNeighbor:TF,resizeBilinear:$F,rgbToGrayscale:uF,rotateWithOffset:cF,cropAndResize:oF,nonMaxSuppression:dF,nonMaxSuppressionAsync:wF,nonMaxSuppressionWithScore:IF,nonMaxSuppressionWithScoreAsync:NF,nonMaxSuppressionPadded:SF,nonMaxSuppressionPaddedAsync:CF,threshold:EF,transform:RF},QF={bandPart:AF,gramSchmidt:_F,qr:OF},eO={absoluteDifference:LF,computeWeightedLoss:MF,cosineDistance:BF,hingeLoss:PF,huberLoss:zF,logLoss:WF,meanSquaredError:VF,sigmoidCrossEntropy:UF,softmaxCrossEntropy:GF},tO={sparseFillEmptyRows:HF,sparseReshape:jF,sparseSegmentMean:XF,sparseSegmentSum:KF},nO={stringNGrams:qF,stringSplit:w$({stringSplit_:function(e,t,n=!0){const s=y$(e,"input","stringSplit","string"),a=y$(t,"delimiter","stringSplit","string");if(1!==s.rank)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==a.rank)throw new Error(`Delimiter should be a scalar but received shape ${a.shape}`);const r={skipEmpty:n},o={input:s,delimiter:a},i=h$.runKernel(MS,o,r);return{indices:i[0],values:i[1],shape:i[2]}}}),stringToHashBucketFast:w$({stringToHashBucketFast_:function(e,t){const n=y$(e,"input","stringToHashBucketFast","string"),s={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const a={input:n};return h$.runKernel(LS,a,s)}}),staticRegexReplace:w$({staticRegexReplace_:function(e,t,n,s=!0){const a=y$(e,"input","staticRegexReplace","string"),r={pattern:t,rewrite:n,replaceGlobal:s};return h$.runKernel(FS,{x:a},r)}})},sO=new Map,aO=new Map;class rO{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class oO{constructor(){this.classNameMap={}}static getMap(){return null==oO.instance&&(oO.instance=new oO),oO.instance}static register(e){oO.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function iO(e,t,n){ow(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),ow("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),ow(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),void 0===t&&(t="Custom"),void 0===n&&(n=e.className);const s=t+">"+n;return oO.register(e),sO.set(s,e),aO.set(e,s),e}class lO extends rO{minimize(e,t=!1,n){const{value:s,grads:a}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:a[e.name]})));this.applyGradients(e)}else this.applyGradients(a);return CT(a),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return function(e,t){ow(Sw(e),(()=>"The f passed in variableGrads(f) must be a function")),ow(null==t||Array.isArray(t)&&t.every((e=>e instanceof XC)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in h$.registeredVariables)t.push(h$.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,a=t.length;t=t.filter((e=>e.trainable)),ow(t.length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${a} variables is trainable.`));const{value:r,grads:o}=h$.gradients(e,t,null,!0);ow(o.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),ow(0===r.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${r.rank} tensor`));const i={};return t.forEach(((e,t)=>{null!=o[t]&&(i[e.name]=o[t])})),null!=s&&s.forEach((e=>i[e.name]=null)),{value:r,grads:i}}(e,t)}dispose(){null!=this.iterations_&&CT(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:xR(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(lO,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class uO extends lO{static get className(){return"Adadelta"}constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=h$.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=h$.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:ST((()=>QE(s).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:ST((()=>QE(s).variable(false)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const r=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;ST((()=>{const e=ET(_T(r,this.rho),_T(yR(a),1-this.rho)),t=_T(AT(bR(ET(o,this.epsilon)),bR(ET(r,this.epsilon))),a),n=ET(_T(o,this.rho),_T(yR(t),1-this.rho));r.assign(e),o.assign(n);const i=ET(_T(t,-this.learningRate),s);s.assign(i)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(CT(this.accumulatedGrads.map((e=>e.variable))),CT(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}class cO extends lO{static get className(){return"Adagrad"}constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=h$.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:ST((()=>CE(s.shape,this.initialAccumulatorValue).variable(e)))}}const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const r=this.accumulatedGrads[n].variable;ST((()=>{const e=ET(r,yR(a));r.assign(e);const t=ET(_T(AT(a,bR(ET(e,h$.backend.epsilon()))),-this.learningRate),s);s.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&CT(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}class hO extends lO{static get className(){return"Adam"}constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],ST((()=>{this.accBeta1=xR(t).variable(),this.accBeta2=xR(n).variable()})),null==s&&(this.epsilon=h$.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);ST((()=>{const n=XR(1,this.accBeta1),s=XR(1,this.accBeta2);t.forEach(((t,a)=>{const r=h$.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:ST((()=>QE(r).variable(false)))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:`${t}/v`,variable:ST((()=>QE(r).variable(false)))});const o=Array.isArray(e)?e[a].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[a].variable,l=this.accumulatedSecondMoment[a].variable,u=ET(_T(i,this.beta1),_T(o,1-this.beta1)),c=ET(_T(l,this.beta2),_T(yR(o),1-this.beta2)),h=AT(u,n),d=AT(c,s);i.assign(u),l.assign(c);const p=ET(_T(AT(h,ET(bR(d),this.epsilon)),-this.learningRate),r);r.assign(p)})),this.accBeta1.assign(_T(this.accBeta1,this.beta1)),this.accBeta2.assign(_T(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&CT(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&CT(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),ST((()=>{this.accBeta1.assign(gR(this.beta1,this.iterations_+1)),this.accBeta2.assign(gR(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}class dO extends lO{static get className(){return"Adamax"}constructor(e,t,n,s=null,a=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],ST((()=>{this.iteration=xR(0).variable(),this.accBeta1=xR(t).variable()})),null==s&&(this.epsilon=h$.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);ST((()=>{const n=XR(1,this.accBeta1),s=AT(-this.learningRate,ET(_T(this.iteration,this.decay),1));t.forEach(((t,a)=>{const r=h$.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:QE(r).variable(false)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${t}/v`,variable:QE(r).variable(false)});const o=Array.isArray(e)?e[a].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[a].variable,l=this.accumulatedWeightedInfNorm[a].variable,u=ET(_T(i,this.beta1),_T(o,1-this.beta1)),c=_T(l,this.beta2),h=FT(o),d=rA(c,h);i.assign(u),l.assign(d);const p=ET(_T(AT(s,n),AT(u,ET(d,this.epsilon))),r);r.assign(p)})),this.iteration.assign(ET(this.iteration,1)),this.accBeta1.assign(_T(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&CT(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&CT(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}class pO extends lO{static get className(){return"SGD"}constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=h$.registeredVariables[t];ST((()=>{const e=ET(_T(this.c,s),a);a.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=$T(xR(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}class fO extends pO{static get className(){return"Momentum"}constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=xR(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=h$.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:ST((()=>QE(s).variable(e)))}}const a=this.accumulations[n].variable,r=Array.isArray(e)?e[n].tensor:e[t];null!=r&&ST((()=>{let e;const t=ET(_T(this.m,a),r);e=this.useNesterov?ET(_T(this.c,ET(r,_T(t,this.m))),s):ET(_T(this.c,t),s),a.assign(t),s.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&CT(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}class mO extends lO{static get className(){return"RMSProp"}constructor(e,t=.9,n=0,s=null,a=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==s&&(this.epsilon=h$.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=h$.registeredVariables[t],a=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:ST((()=>QE(s).variable(a)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:ST((()=>QE(s).variable(a)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:ST((()=>QE(s).variable(a)))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const o=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;ST((()=>{const e=ET(_T(o,this.decay),_T(yR(r),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,a=ET(_T(t,this.decay),_T(r,1-this.decay)),l=AT(_T(r,this.learningRate),bR(XR(e,ET(yR(a),this.epsilon)))),u=ET(_T(i,this.momentum),l);o.assign(e),t.assign(a),i.assign(u);const c=XR(s,u);s.assign(c)}else{const e=ET(_T(o,this.decay),_T(yR(r),1-this.decay)),t=ET(_T(i,this.momentum),AT(_T(r,this.learningRate),bR(ET(e,this.epsilon))));o.assign(e),i.assign(t);const n=XR(s,t);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&CT(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&CT(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&CT(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}const gO=[uO,cO,hO,dO,fO,mO,pO];function xO(e){return new Promise((e=>setTimeout(e))).then(e)}class bO{constructor(e){if(!zw().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(bO.URL_SCHEME)&&(e=e.slice(bO.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=$$.join(e.weightData),n=window.URL.createObjectURL(new Blob([t],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const t=M$(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),s=window.URL.createObjectURL(new Blob([JSON.stringify(t)],{type:"application/json"})),a=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(a.download=this.modelJsonFileName,a.href=s,await xO((()=>a.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=n,await xO((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:P$(e)}}}}bO.URL_SCHEME="downloads://";class yO{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const s=JSON.parse(n.target.result),a=s.modelTopology;if(null==a)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==s.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:a});const r=B$(s,(e=>this.loadWeights(e)));e(r)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const s of e)t.push(...s.weights),n.push(...s.paths);const s=this.checkManifestAndWeightFiles(e),a=n.map((e=>this.loadWeightsFile(e,s[e])));return Promise.all(a).then((e=>[t,e]))}loadWeightsFile(e,t){return new Promise(((n,s)=>{const a=new FileReader;a.onload=e=>{const t=e.target.result;n(t)},a.onerror=t=>s(`Failed to weights data from file of path '${e}'.`),a.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>D$(e.name))),s={};for(const a of e)a.paths.forEach((e=>{const a=D$(e);if(-1!==t.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(t.push(a),-1===n.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);s[e]=this.weightsFiles[n.indexOf(a)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return s}}function vO(e,t,n,s){!function(e){ow(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){ow(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),ow(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),ow(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,s=null==s?1:s);let a=0;return Promise.all(e.map((r=>(r.then((r=>{const o=n+ ++a/e.length*(s-n);return t(o),r})),r))))}async function kO(e,t){null==t&&(t={});const n=null==t.fetchFunc?zw().platform.fetch:t.fetchFunc,s=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),a=(null==t.onProgress?await Promise.all(s):await vO(s,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(a):await vO(a,t.onProgress,.5,1)}function wO(e){return async(t,n="",s)=>{const a=t.map((()=>!1)),r={},o=null!=s?s.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=C$[l]*uw(e.shape),c=()=>{a[t]=!0,null==r[t]&&(r[t]=[]),r[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=s?s.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=u}))})),!o.every((e=>e))){const e=s.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const l=a.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),h={};let d=0;return l.forEach((e=>{const n=t[e].paths.length,s=new $$(c.slice(d,d+n));r[e].forEach((e=>{const t=R$(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)h[e]=t[e]})),d+=n})),h}}V$.registerSaveRouter((e=>zw().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(bO.URL_SCHEME)?function(e="model"){return new bO(e)}(e.slice(bO.URL_SCHEME.length)):null));class IO{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(ow("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=zw().platform.fetch,ow(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&ow(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=M$(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);if(t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData){const n=$$.join(e.weightData);t.body.append("model.weights.bin",new Blob([n],{type:"application/octet-stream"}),"model.weights.bin")}const s=await this.fetch(this.path,t);if(s.ok)return{modelArtifactsInfo:P$(e),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,s=t.weightsManifest;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return B$(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),s=e.substring(0,t),a=n>t?e.substring(n):"";return[s+"/",a]}(t),a=this.weightPathPrefix||n,r=z$(e),o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(a+e+s);this.weightUrlConverter&&o.push(...await Promise.all(i));return[r,await kO(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress})]}}function NO(e){return null!=e.match(IO.URL_SCHEME_REGEX)}IO.URL_SCHEME_REGEX=/^https?:\/\//;const SO=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>NO(e))):NO(e),n)return CO(e,t)}return null};function CO(e,t){return new IO(e,t)}V$.registerSaveRouter(SO),V$.registerLoadRouter(SO);class $O{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class TO{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class EO{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function RO(e,t,n,s){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new $O(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new $O({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new $O({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:s})}var AO=Object.freeze({__proto__:null,browserFiles:function(e){return new yO(e)},browserHTTPRequest:function(e,t){return CO(e,t)},CompositeArrayBuffer:$$,concatenateArrayBuffers:O$,decodeWeights:R$,encodeWeights:E$,fromMemory:function(e,t,n,s){return new EO(RO(...arguments))},fromMemorySync:RO,getLoadHandlers:(e,t)=>V$.getLoadHandlers(e,t),getModelArtifactsForJSON:B$,getModelArtifactsForJSONSync:L$,getModelArtifactsInfoForJSON:P$,getSaveHandlers:U$,getWeightSpecs:z$,http:CO,isHTTPScheme:NO,loadWeights:async function(e,t="",n,s){return wO((e=>kO(e,{requestInit:s})))(e,t,n)},registerLoadRouter:e=>V$.registerLoadRouter(e),registerSaveRouter:e=>V$.registerSaveRouter(e),weightsLoaderFactory:wO,withSaveHandler:function(e){return new TO(e)},withSaveHandlerSync:function(e){return new TO(e)},copyModel:async function(e,t){return fT(e,t,!1)},listModels:async function(){const e=dT.getSchemes(),t={};for(const n of e){const e=await dT.getManager(n).listModels();for(const s in e){t[n+hT+s]=e[s]}}return t},moveModel:async function(e,t){return fT(e,t,!0)},removeModel:async function(e){const t=pT(e);return dT.getManager(t.scheme).removeModel(t.path)}});let _O;const FO=w$({fromPixels_:function(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,a=!1,r=!1,o=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)a=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)r=!0;else if(null!=e.getContext)o=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);i=!0}if(null!=aC(YS,h$.backendName)){const n={pixels:e},s={numChannels:t};return h$.runKernel(YS,n,s)}const[l,u]=a?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(o)c=e.getContext("2d").getImageData(0,0,l,u).data;else if(s||n)c=e.data;else if(r||a||i){if(null==_O)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");_O=new OffscreenCanvas(1,1).getContext("2d")}else _O=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});_O.canvas.width=l,_O.canvas.height=u,_O.drawImage(e,0,0,l,u),c=_O.getImageData(0,0,l,u).data}if(4===t)h=new Int32Array(c);else{const e=l*u;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return w_(h,[u,l,t],"int32")}});function OO(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===uw(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const a=t.shape,r=a[a.length-1];let o=1;for(let e=0;e<a.length-1;++e)o*=a[e];const i=e.shape,l=a.slice();l.pop();let u=1;for(let e=r;e<n;++e)u*=i[e],l.push(i[e]);const c=[...$w(e.shape).map((e=>e/u)),1].slice(0,r);return[l,o,u,c]}const DO=-2,MO=-1;function LO(e,t,n){const s=e.shape.length;ow(s===t.length,(()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`)),ow(s===n.length,(()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`));for(let a=0;a<s;++a)ow(t[a]+n[a]<=e.shape[a],(()=>`Error in slice${s}D: begin[${a}] + size[${a}] (${t[a]+n[a]}) would overflow input.shape[${a}] (${e.shape[a]})`))}function BO(e,t,n){const s=[];for(let a=0;a<e.length;a++)s[a]=Math.ceil((t[a]-e[a])/n[a]);return s}function PO(e,t,n,s){const a=[...e];for(let e=a.length;e<s.length;e++)a.push(1);for(let e=0;e<n;e++)0===e?a[t]=1:(a.splice(t,0,1),a.pop());return a}function zO(e,t,n){return n<=e?n:n-(t-1)}function WO(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function VO(e,t,n,s,a){const r=[...a],o=WO(n,t);for(let a=0;a<r.length;a++)if(o.indexOf(a)>-1)r[a]=0;else{const o=zO(t,n,a);let i=s[o];e&1<<o&&(i=0),r[a]=i}return r}function UO(e,t,n,s,a){const r=[...a],o=WO(n,t);for(let a=0;a<r.length;a++)if(o.indexOf(a)>-1)r[a]=Number.MAX_SAFE_INTEGER;else{const o=zO(t,n,a);let i=s[o];e&1<<o&&(i=Number.MAX_SAFE_INTEGER),r[a]=i}for(let e=0;e<r.length;e++){const t=a[e];r[e]<0&&(r[e]+=t),r[e]=sw(0,r[e],a[e])}return r}function GO(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function HO(e,t,n,s,a,r){let o=t[a];const i=n[a]||1;(e&1<<a||r&1<<a||null==o)&&(o=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[a];return o<0&&(o+=l),o=sw(0,o,l-1),o}function jO(e,t,n,s,a,r){let o=t[a];const i=n[a]||1;(e&1<<a||r&1<<a||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[a];return o<0&&(o+=l),o=i>0?sw(0,o,l):sw(-1,o,l-1),o}function XO(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let a=s+1;a<n.length;a++)if(t[a]>0||n[a]!==e[a])return!1;return!0}function KO(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function qO(e,t,n){let s;const a=e.shape.length;let r;return s="number"==typeof t?[t,...new Array(a-1).fill(0)]:t.length<a?t.concat(new Array(a-t.length).fill(0)):t.slice(),s.forEach((e=>{ow(-1!==e,(()=>"slice() does not support negative begin indexing."))})),r=null==n?new Array(a).fill(-1):"number"==typeof n?[n,...new Array(a-1).fill(-1)]:n.length<a?n.concat(new Array(a-n.length).fill(-1)):n,r=r.map(((t,n)=>t>=0?t:(ow(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-s[n]))),[s,r]}function YO(e,t,n,s,a,r,o,i,l){let u;if(null==s?(u=new Array(t.length),u.fill(1)):u=s,null!=o&&0!=(o&o-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:a,endMask:r,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};for(let e=0;e<h.dims;e++)c&&0!=(1<<e&i)&&h.numAddAxisAfterEllipsis++,1<<e&o&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const d={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<e.dims;s++)if(1<<s&e.ellipsisMask){const a=Math.min(t.dims-(e.dims-s)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<a;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=s}else if(1<<s&e.newAxisMask)t.finalShapeGatherIndices.push(DO),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[s]),null!=e.end&&(t.end[n]=e.end[s]),t.strides[n]=e.strides[s],e.beginMask&1<<s&&(t.beginMask|=1<<n),e.endMask&1<<s&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(MO),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[n]=s,n++}}(h,d);let p=!0,f=!0,m=!0;const g=[],x=[];for(let t=0;t<e.length;++t){if(0===d.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(d.shrinkAxisMask&1<<t),s=e[t];if(-1===s){g.push(n?1:-1);continue}const a=[d.beginMask&1<<t,d.endMask&1<<t],r=[d.strides[t]>0?0:-1,d.strides[t]>0?s:s-1];if(n&&d.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===d.strides[t];const o=!!(d.beginMask&1<<t&&d.endMask&1<<t);if(d.beginValid&&d.endValid){if(n){const e=d.begin[t]<0?s+d.begin[t]:d.begin[t];if(d.begin[t]=e,d.end[t]=d.begin[t]+1,e<0||e>=s)throw Error(`slice index ${d.begin[t]} of dimension ${t} out of bounds.`)}else d.begin[t]=ZO(d.begin[t],0,d.strides[t],s,a,r),d.end[t]=ZO(d.end[t],1,d.strides[t],s,a,r);const e=1===d.strides[t]&&0===d.begin[t]&&d.end[t]===s;p=p&&e,f=f&&(0===t&&1===d.strides[t]||e)}else p=p&&1===d.strides[t]&&o,f=f&&(0===t&&1===d.strides[t]||o);let i,l=!1;if(d.beginValid&&d.endValid?(i=d.end[t]-d.begin[t],l=!0):n?(i=1,l=!0):o&&s>=0&&(i=d.strides[t]<0?-s:s,l=!0),l){let e;e=0===i||i<0!=d.strides[t]<0?0:Math.trunc(i/d.strides[t])+(i%d.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<d.finalShapeGatherIndices.length;++e){const t=d.finalShapeGatherIndices[e];t>=0?x.push(g[t]):t===DO&&x.push(1)}return{finalShapeSparse:x.filter(((e,t)=>d.finalShapeGatherIndices[t]!==DO)),finalShape:x,isIdentity:p,sliceDim0:f,isSimpleSlice:m,begin:d.begin,end:d.end,strides:d.strides}}function ZO(e,t,n,s,a,r){if(a[t])return n>0?r[t]:r[t+1&1];{const t=e<0?s+e:e;return t<r[0]?r[0]:t>r[1]?r[1]:t}}var JO=Object.freeze({__proto__:null,assertParamsValid:LO,maskToAxes:function(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t},computeOutShape:BO,stridesWithElidedDims:PO,getNormalizedAxes:function(e,t,n,s,a,r,o,i,l){const u=e.length;let c=new Array(u),h=new Array(u),d=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=VO(o,l,u,s,e),h=UO(i,l,u,a,e),d=PO(r,l,u,e)}else for(let t=0;t<u;t++)c[t]=HO(o,s,r,e,t,l),h[t]=jO(i,a,r,e,t,l),d[t]=GO(r,t,l);return{begin:c,end:h,strides:d}},startIndicesWithElidedDims:VO,stopIndicesWithElidedDims:UO,stridesForAxis:GO,startForAxis:HO,stopForAxis:jO,isSliceContinous:XO,computeFlatOffset:KO,parseSliceParams:qO,sliceInfo:YO});const QO=class{static sgd(e){return new pO(e)}static momentum(e,t,n=!1){return new fO(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,a=!1){return new mO(e,t,n,s,a)}static adam(e=.001,t=.9,n=.999,s=null){return new hO(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new uO(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,a=0){return new dO(e,t,n,s,a)}static adagrad(e,t=.1){return new cO(e,t)}},eD="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function tD(){return new Promise((e=>eD((()=>e()))))}function nD(e,t){const n=e[0].length;e.forEach(((e,t)=>{ow(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),ow(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,a)=>{for(let r=0;r<n;r++)ow(r===t||e[r]===s[r],(()=>`Error in concat${n}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${a}.`))}))}function sD(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}var aD;function rD(e,t,n){let s=new Array;if(null==n&&null==t)return s;if(null==t)for(;s.length<e+n.length;)s.push(-1);else s=t.slice();if(null==n)return s;if(e+n.length!==s.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${s.length}`);for(let a=1;a<n.length;++a){const r=n[a],o=s[s.length-n.length+a],i=s[o];if(r>=0)if(i>=0){if(i!==r)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${a+e}] = ${r} but shape[${a+e}] = ${i}`)}else s[o]=r}return s}function oD(e){const t={FIRST_DIM_SIZE:aD.FIRST_DIM_SIZE,VALUE_ROWIDS:aD.VALUE_ROWIDS,ROW_LENGTHS:aD.ROW_LENGTHS,ROW_SPLITS:aD.ROW_SPLITS,ROW_LIMITS:aD.ROW_LIMITS,ROW_STARTS:aD.ROW_STARTS},n=[];for(const s of e){if(!(s in t))break;n.push(t[s])}return n}function iD(e){return 0===e.length?0:e[0]===aD.FIRST_DIM_SIZE?e.length-1:e.length}function lD(e,t){if(null==e||null==t)return;const n=e.length,s=t.length;if(n>=s)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${s})`);for(let a=0;a<Math.min(n,s-1);++a){const n=e[a],s=t[a+1];if(n>=0&&s>=0&&1!==n&&n!==s)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${a-e.length}] = ${n} but ragged tensor input.flatValues.shape[${a-e.length}] = ${s}`)}}!function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(aD||(aD={}));const uD=30;function cD(e){return e<=uD?e:Cw(e,Math.floor(Math.sqrt(e)))}function hD(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function dD(e,t,n,s=!0){let a=[];if(s)a=a.concat(t.slice(0)),a.push(e[0]/n),a=a.concat(e.slice(1));else{a=a.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)a=a.concat([e[s+1]/t[s],t[s]]);a=a.concat(e.slice(n+1))}return a}function pD(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],a=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?a.push(s):n.push(s);s.push(...n),s.push(0),s.push(...a)}return s}function fD(e,t,n,s=!0){const a=[];s?a.push(e[0]/n):a.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?s?a.push(t[n-1]*e[n]):a.push(e[n]/t[n-1]):a.push(e[n]);return a}function mD(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function gD(e,t,n){const s=e.slice(0,1);for(let a=0;a<n;++a)s.push(e[a+1]-t[a][0]-t[a][1]);return s}const xD=1.7580993408473768,bD=1.0507009873554805,yD=.3275911,vD=.254829592,kD=-.284496736,wD=1.421413741,ID=-1.453152027,ND=1.061405429;function SD(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function CD(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function $D(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function TD(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function ED(e,t){return{real:e[2*t],imag:e[2*t+1]}}function RD(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function AD(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){const r=(t?2:-2)*Math.PI*(a/e);n[a]=Math.cos(r),s[a]=Math.sin(r)}return{real:n,imag:s}}function _D(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}const FD="->",OD=/->/g,DD=",",MD="...";function LD(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(OD,"").length)/FD.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error(`Equation must contain exactly one arrow ("${FD}").`);const[s,a]=e.split(FD);ow(-1===s.indexOf(MD),(()=>`The ellipsis notation ("${MD}") is not supported yet.`));const r=s.split(DD),o=r.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let e=0;e<a.length;++e){const t=a[e];if(!r.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===i.indexOf(t)&&i.push(t)}for(let e=0;e<s.length;++e){const t=s[e];-1===i.indexOf(t)&&t!==DD&&i.push(t)}const l=new Array(r.length);for(let e=0;e<o;++e){if(new Set(r[e].split("")).size!==r[e].length)throw new Error(`Found duplicate axes in input component ${r[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<r[e].length;++t)l[e].push(i.indexOf(r[e][t]))}const u=i.length,c=[];for(let e=a.length;e<u;++e)c.push(e);return{allDims:i,summedDims:c,idDims:l}}function BD(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const s=[];for(let t=0;t<e;++t)-1===n[t]&&s.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:s}}function PD(e,t,n){const s=new Array(e);for(let e=0;e<n.length;++e){const a=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===s[t[e][n]]?s[t[e][n]]=a[n]:ow(s[t[e][n]]===a[n],(()=>`Expected dimension ${s[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(a)}, but got dimension ${a[n]}`))}}function zD(e,t){const n=e,s=[];let a=0;0===e.length&&n.push(-1),a=e.length+1;for(let e=0;e<a;++e)s.push([]);const r=[];for(let e=0;e<n.length;++e){const a=VD(t,n[e]);for(const t of a)-1===r.indexOf(t)&&(s[e].push(t),r.push(t))}return{path:n,steps:s}}function WD(e){return e.every(((e,t)=>e===t))}function VD(e,t){const n=[];for(let s=0;s<e.length;++s)0!==e[s].length&&-1===e[s].indexOf(t)&&-1!==t||n.push(s);return n}function UD(e,t,n=0){let s=[];if("number"==typeof t)ow(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{const a=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);ow(a<=1,(()=>"There should be only one negative value in split array."));const r=t.indexOf(-1);if(-1!==r){const s=t.reduce(((e,t)=>t>0?e+t:e));t[r]=e.shape[n]-s}ow(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}function GD(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function HD(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function jD(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function XD(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function KD(e,t){return`size ${e} must be non-negative, not ${t}`}function qD(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function YD(e,t){return`Input to reshape is a SparseTensor with ${uw(e)}\n  dense values, but the requested shape requires a multiple of ${uw(t)}. inputShape=${e} outputShape= ${t}`}function ZD(e,t){return`Input to reshape is a tensor with ${uw(e)} dense values, but the requested shape has ${uw(t)}. inputShape=${e} outputShape=${t}`}function JD(){return"segment ids must be >= 0"}function QD(){return"segment ids are not increasing"}function eM(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function tM(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function nM(e,t){let n,s=!1;for(e<=uD?(n=e,s=!0):n=Cw(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=Cw(e,n+1);return n}function sM(e,t,n){const s=[],a=e.length;for(let r=0;r<a;r++)r!==t?s.push(e[r]):s.push(n);return s}function aM(e,t,n,s){const a=t.shape.length,r=e.shape.length;if(0!==s&&(s<-a||s>a))throw new Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${s}`);if(s<0&&(s+=a),s>r)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${r}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let l=1,u=1,c=1;for(let t=0;t<s;++t)i.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<n;t++)i.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<a;e++)i.push(t.shape[e]);for(let t=n+1;t<r;t++)i.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:o,outputShape:i}}var rM=Object.freeze({__proto__:null,segOpComputeOptimalWindowSize:nM,computeOutShape:sM,collectGatherOpShapeInfo:aM});function oM(e){try{return e.map((e=>TC(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function iM(e){return e.map((e=>$C(e)))}var lM=Object.freeze({__proto__:null,slice_util:JO,segment_util:rM,fromUint8ToStringArray:oM,fromStringArrayToUint8:iM,upcastType:e$,axesAreInnerMostDims:oR,combineLocations:iR,computeOutAndReduceShapes:lR,expandShapeToKeepDim:uR,assertAxesAreInnerMostDims:cR,getAxesPermutation:hR,getUndoAxesPermutation:dR,getInnerMostAxes:pR,getBroadcastDims:KE,getReductionAxes:qE,assertAndGetBroadcastShape:YE,assertParamsConsistent:nD,computeOutShape:sD,computeDilation2DInfo:jT,computePool2DInfo:XT,computePool3DInfo:KT,computeConv2DInfo:qT,computeConv3DInfo:YT,computeDefaultPad:ZT,tupleValuesAreOne:nE,eitherStridesOrDilationsAreOne:sE,stridesOrDilationsArePositive:aE,convertConv2DDataFormat:rE,checkPadOnDimRoundingMode:oE,getFusedDyActivation:j_,getFusedBiasGradient:X_,applyActivation:K_,shouldFuse:q_,get RowPartitionType(){return aD},combineRaggedTensorToTensorShapes:rD,getRowPartitionTypesHelper:oD,getRaggedRank:iD,validateDefaultValueShape:lD,PARALLELIZE_THRESHOLD:uD,computeOptimalWindowSize:cD,getImageCenter:hD,getReshaped:dD,getPermuted:pD,getReshapedPermuted:fD,getSliceBeginCoords:mD,getSliceSize:gD,prepareAndValidate:OO,validateUpdateShape:I_,validateInput:N_,calculateShapes:S_,SELU_SCALEALPHA:xD,SELU_SCALE:bD,ERF_P:yD,ERF_A1:vD,ERF_A2:kD,ERF_A3:wD,ERF_A4:ID,ERF_A5:ND,warn:tC,log:function(...e){zw().getBool("IS_TEST")||zw().getBool("PROD")||console.log(...e)},mergeRealAndImagArrays:SD,splitRealAndImagArrays:CD,complexWithEvenIndex:$D,complexWithOddIndex:TD,getComplexWithIndex:ED,assignToTypedArray:RD,exponents:AD,exponent:_D,decodeEinsumEquation:LD,getEinsumPermutation:BD,checkEinsumDimSizes:PD,getEinsumComputePath:zD,isIdentityPermutation:WD,prepareSplitSize:UD,getSparseFillEmptyRowsIndicesDenseShapeMismatch:GD,getSparseFillEmptyRowsNegativeIndexErrorMessage:HD,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:jD,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:XD,getSparseReshapeNegativeOutputDimErrorMessage:KD,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:qD,getSparseReshapeInputOutputMultipleErrorMessage:YD,getSparseReshapeInputOutputMismatchErrorMessage:ZD,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:JD,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:QD,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:eM,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:tM});!function(){for(const e of gO)iO(e)}();const uM={kernelName:Hw,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_T(e,x_(vT(n,"float32"),-1))}}},cM={kernelName:jw,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=yR(vT(n,"float32")),s=bR(XR(xR(1),t));return GR(AT(e,s))}}}},hM={kernelName:Xw,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=bR(XR(yR(vT(n,"float32")),1));return AT(e,t)}}}},dM={kernelName:Kw,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=YE(n.shape,s.shape);return{a:()=>{let t=e;const s=qE(n.shape,a);return s.length>0&&(t=vR(t,s)),iE(t,n.shape)},b:()=>{let t=e;const n=qE(s.shape,a);return n.length>0&&(t=vR(t,n)),iE(t,s.shape)}}}},pM={kernelName:qw,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,s)=>{n[s]=()=>e.clone()})),n}},fM={kernelName:Jw,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>QE(n)}}},mM={kernelName:Qw,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>QE(n)}}},gM={kernelName:eI,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>AT(e,bR(XR(xR(1),yR(vT(n,"float32")))))}}},xM={kernelName:tI,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=bR(ET(xR(1),yR(vT(n,"float32"))));return AT(e,t)}}}},bM={kernelName:aI,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=YE(n.shape,s.shape);return{a:()=>{const t=ET(yR(n),yR(s));let r=_T(e,AT(s,t));const o=qE(n.shape,a);return o.length>0&&(r=vR(r,o)),iE(r,n.shape)},b:()=>{const t=ET(yR(n),yR(s));let r=GR(_T(e,AT(n,t)));const o=qE(s.shape,a);return o.length>0&&(r=vR(r,o)),iE(r,s.shape)}}}},yM={kernelName:nI,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>AT(e,ET(yR(vT(n,"float32")),1))}}},vM={kernelName:sI,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>AT(e,XR(xR(1),yR(vT(n,"float32"))))}}};const kM=w$({avgPool3dGrad_:function(e,t,n,s,a,r){const o=y$(e,"dy","avgPool3dGrad"),i=y$(t,"input","avgPool3dGrad");let l=o,u=i,c=!1;4===i.rank&&(c=!0,l=iE(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),u=iE(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),ow(5===l.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`)),ow(5===u.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`)),oE("avgPool3dGrad",a,r);const h={dy:l,input:u},d={filterSize:n,strides:s,pad:a,dimRoundingMode:r},p=h$.runKernel(lI,h,d);return c?iE(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),wM={kernelName:iI,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:a,strides:r,pad:o,dimRoundingMode:i}=n;return{x:()=>kM(e,s,a,r,o,i)}}};const IM=w$({avgPoolGrad_:function(e,t,n,s,a){const r=y$(e,"dy","avgPoolGrad"),o=y$(t,"input","avgPoolGrad");ow(o.rank===r.rank,(()=>`Rank of input (${o.rank}) does not match rank of dy (${r.rank})`));let i=o,l=r,u=!1;3===o.rank&&(u=!0,i=iE(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=iE(r,[1,r.shape[0],r.shape[1],r.shape[2]])),ow(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),ow(4===i.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`));const c={dy:l,input:i},h={filterSize:n,strides:s,pad:a},d=h$.runKernel(oI,c,h);return u?iE(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),NM={kernelName:rI,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:a,strides:r,pad:o}=n;return{x:()=>IM(e,s,a,r,o)}}},SM={kernelName:uI,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,a]=t,{transposeA:r,transposeB:o}=n;return r||o?!r&&o?{a:()=>hE(e,a,!1,!1),b:()=>hE(e,s,!0,!1)}:r&&!o?{a:()=>hE(a,e,!1,!0),b:()=>hE(s,e,!1,!1)}:{a:()=>hE(a,e,!0,!0),b:()=>hE(e,s,!0,!0)}:{a:()=>hE(e,a,!1,!0),b:()=>hE(s,e,!0,!1)}}},CM={kernelName:cI,gradFunc:(e,t,n)=>{const{blockShape:s,crops:a}=n;return{x:()=>NA(e,s,a)}}},$M={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const s=n,a=s.inputShape,r=s.shape,o=Array.from(r);for(let e=a.length-1;e>=0;e--)if(a[e]===r[e])o[e]=1;else if(1!==a[e])throw new Error(`broadcastTo(): [${a}] cannot be broadcast to [${r}].`);const i=[];for(let e=0;e<o.length;e++)o[e]>1&&i.push(e);return{x:()=>vR(e,i,!0)}}},TM={kernelName:fI,gradFunc:e=>({x:()=>e.clone()})},EM={kernelName:mI,gradFunc:e=>({x:()=>QE(e)})},RM={kernelName:gI,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:a,clipValueMax:r}=n;return{x:()=>JE(YR(_R(s,a),PR(s,r)),e,QE(e))}}},AM={kernelName:bI,inputsToSave:["x"],gradFunc:uM.gradFunc},_M={kernelName:yI,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map((e=>e.shape)),{axis:a}=n,r=gw(a,t[0].shape)[0],o=s.map((e=>e[r]));return d_(e,o,r).map((e=>()=>e))}},FM={kernelName:vI,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,a]=t,{dilations:r,strides:o,pad:i,dataFormat:l}=n;return ow(nE(r),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`)),{x:()=>OE(s.shape,e,a,o,i,l),filter:()=>H_(s,e,a.shape,o,i,l)}}},OM={kernelName:wI,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,a]=t,{strides:r,pad:o,dataFormat:i,dimRoundingMode:l}=n;return{dy:()=>_E(e,a,r,o,i,1,l),filter:()=>H_(e,s,a.shape,r,o,i,l)}}};const DM=w$({conv3DBackpropFilter_:function(e,t,n,s,a){let r=e;4===e.rank&&(r=iE(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let o=t;4===o.rank&&(o=iE(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),ow(5===r.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${r.shape}.`)),ow(5===o.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`)),ow(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),ow(r.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${r.shape[4]}) must match input depth in filter (${n[3]}.`)),ow(o.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${n[4]}).`));const i={x:r,dy:o},l={strides:s,pad:a,filterShape:n};return h$.runKernel(NI,i,l)}}),MM={kernelName:II,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:a,pad:r}=n;ow(nE(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[o,i]=t;return{x:()=>LE(o.shape,e,i,a,r),filter:()=>DM(o,e,i.shape,a,r)}}},LM={kernelName:CI,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_T(GR(n_(vT(n,"float32"))),e)}}},BM={kernelName:$I,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_T(s_(vT(n,"float32")),e)}}},PM={kernelName:EI,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:a,exclusive:r,reverse:o}=n;return{x:()=>{const t=hR([a],s.rank);let n=VE(e,a,r,!o);return null!=t&&(n=M_(n,t)),n}}}},zM={kernelName:FI,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:a,pad:r,dimRoundingMode:o}=n,i=null==s?[1,1]:s;ow(nE(i),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`));const[l,u]=t;return ow(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),ow(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),ow(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),ow(sE(a,i),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${a} and dilations '${i}'.`)),oE("depthwiseConv2d",r,o),{x:()=>J_(l.shape,e,u,a,r,i,o),filter:()=>Z_(l,e,u.shape,a,r,i,o)}}},WM={kernelName:LI,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,a]=t,r={x:s,filter:a,dy:e},o={x:s,filter:a,dy:e};return{x:()=>h$.runKernel(BI,r,n),filter:()=>h$.runKernel(PI,o,n)}}},VM={kernelName:VI,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>h$.runKernel(UI,s)}}},UM={kernelName:GI,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=_T(NR(GR(yR(n))),2/Math.sqrt(Math.PI));return{x:()=>_T(e,s)}}},GM={kernelName:jI,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_T(e,n)}}},HM={kernelName:XI,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>iE(e,n.shape)}}},jM={kernelName:KI,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_T(e,NR(n))}}},XM={kernelName:JI,gradFunc:e=>({x:()=>QE(e)})},KM={kernelName:QI,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=YE(n.shape,s.shape);return{a:()=>{const t=AT(e,vT(s,"float32")),r=qE(n.shape,a);return r.length>0?iE(vR(t,r),n.shape):t},b:()=>{let t=_T(e,vT(n,"float32"));const r=qE(s.shape,a);r.length>0&&(t=iE(vR(t,r),s.shape));const o=yR(s);return GR(AT(t,vT(o,"float32")))}}}},qM={kernelName:eN,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[a,r,o,i]=t,l=null==i?xR(1):i,u=qE(r.shape,a.shape),c=[];if(1===r.rank){for(let e=0;e<a.shape.length-1;++e)c.push(a.shape[e]);c.push(1)}const h=XR(a,r),d=_T(e,l),p=ZA(ET(o,xR(s))),f=_T(_T(_T(p,p),p),xR(-.5));return{x:()=>1===r.rank?iE(_T(_T(e,$R(iE(p,[1,1,1,r.shape[0]]),c)),l),a.shape):iE(_T(_T(e,p),l),a.shape),mean:()=>{let e=_T(_T(p,xR(-1)),d);return 1===r.rank&&(e=vR(e,u)),iE(e,r.shape)},variance:()=>{let e=_T(_T(f,h),d);return 1===r.rank&&(e=vR(e,u)),iE(e,r.shape)},scale:()=>{const t=_T(h,p);let n=_T(e,t);return 1===r.rank&&(n=vR(n,u)),iE(n,r.shape)},offset:()=>{let t=e;return 1===r.rank&&(t=vR(t,u)),iE(t,r.shape)}}}},YM={kernelName:tN,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,a]=t,{axis:r,batchDims:o}=n,i=gw(r,s.shape)[0],l=(e,t,n)=>()=>{const s=e.shape,a=t.size,o=s.slice(0,i),l=o.length,u=s.slice(r,s.length).slice(1),c=u.length,h=ZM(0,l),d=ZM(l+1,l+1+c),p=JM([o,[a],u]),f=iE(n,p),m=iE(t,[a]),g=JM([[l],h,d]),x=M_(f,g);let b=R_(x,m,e.shape[i]);const y=dR(g);return b=M_(b,y),b};if(1===o){const t=s.shape[0],n=s.split(t,0);return{x:()=>{const t=g_(n.map(((t,n)=>l(t,a.slice(n,1),e.slice(n,1))())));return t.reshape(s.shape)},indices:()=>a}}return{x:l(s,a,e),indices:()=>a}}};function ZM(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function JM(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const QM={kernelName:aN,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>QE(n),b:()=>QE(s)}}},eL={kernelName:rN,gradFunc:e=>({x:()=>vT(e,"float32")})},tL={kernelName:lN,gradFunc:e=>({x:()=>QE(e)})},nL={kernelName:uN,gradFunc:e=>({x:()=>QE(e)})},sL={kernelName:cN,gradFunc:e=>({x:()=>QE(e)})},aL={kernelName:hN,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:a}=n,r=AR(s,0);return{x:()=>JE(r,e,_T(e,a))}}},rL={kernelName:gN,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>AT(e,ET(n,1))}}},oL={kernelName:mN,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>AT(e,vT(n,"float32"))}}},iL={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:a}=n;return{logits:()=>{const t=NR(s);return XR(e,_T(vR(e,a,!0),t))}}}};const lL=w$({localResponseNormalizationBackprop_:function(e,t,n,s=5,a=1,r=1,o=.5){const i={x:e,y:t,dy:n},l={depthRadius:s,bias:a,alpha:r,beta:o};return h$.runKernel(kN,i,l)}}),uL={kernelName:vN,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,a]=t,{depthRadius:r,bias:o,alpha:i,beta:l}=n;return{x:()=>lL(s,a,e,r,o,i,l)}}};function cL(e,t,n,s){return t.rank<n.rank&&(t=iE(t,uR(t.shape,s))),e.rank<n.rank&&(e=iE(e,uR(e.shape,s))),{x:()=>_T(e,vT(ZE(n,t),e.dtype))}}const hL={kernelName:wN,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:a}=s,r=t[0],o=cL(e,t[1],r,gw(a,r.shape));return{x:()=>o.x()}}},dL={kernelName:IN,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>_T(e,vT(_R(n,s),"float32")),b:()=>_T(e,vT(BR(n,s),"float32"))}}};const pL=w$({maxPool3dGrad_:function(e,t,n,s,a,r,o){const i=y$(e,"dy","maxPool3dGrad"),l=y$(t,"input","maxPool3dGrad"),u=y$(n,"output","maxPool3dGrad");let c=i,h=l,d=u,p=!1;4===l.rank&&(p=!0,c=iE(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),h=iE(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=iE(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),ow(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),ow(5===h.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`)),ow(5===d.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`)),oE("maxPool3dGrad",r,o);const f={dy:c,input:h,output:d},m={filterSize:s,strides:a,pad:r,dimRoundingMode:o},g=h$.runKernel($N,f,m);return p?iE(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),fL={kernelName:CN,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,a]=t,{filterSize:r,strides:o,pad:i,dimRoundingMode:l}=n;return{x:()=>pL(e,s,a,r,o,i,l)}}};const mL=w$({maxPoolGrad_:function(e,t,n,s,a,r,o){const i=y$(e,"dy","maxPoolGrad"),l=y$(t,"input","maxPoolGrad"),u=y$(n,"output","maxPoolGrad");ow(l.rank===i.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${i.rank})`)),ow(4===i.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`)),ow(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),oE("maxPoolGrad",r,o);const c={dy:i,input:l,output:u},h={filterSize:s,strides:a,pad:r,dimRoundingMode:o};return h$.runKernel(SN,c,h)}}),gL={kernelName:NN,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,a]=t,{filterSize:r,strides:o,pad:i}=n;return{x:()=>mL(e,s,a,r,o,i)}}},xL={kernelName:_N,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:a}=n,r=a.map((e=>e[0]));return{x:()=>pE(e,r,s.shape)}}},bL={kernelName:GN,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:a}=n,r=a.map((e=>e[0]));return{x:()=>pE(e,r,s.shape)}}},yL={kernelName:HN,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,a]=t,r=n,o=s,i=YE(r.shape,o.shape);return{a:()=>{const t=vT(o,"float32");let n=_T(e,_T(t,gR(r,XR(t,xR(1)))));const s=qE(r.shape,i);return s.length>0&&(n=vR(n,s)),iE(n,r.shape)},b:()=>{const t=AR(r,0),n=JE(t,WR(r),QE(r));let s=_T(e,_T(a,n));const l=qE(o.shape,i);return l.length>0&&(s=vR(s,l)),iE(s,o.shape)}}}};function vL(e,t,n){const s=e.shape.length,a=s-n.length,r=hR(n,s);let o=e;null!=r&&(o=M_(e,r));const i=o.shape.slice(),l=i.splice(s-n.length,n.length).reduce(((e,t)=>e*t),1);i.push(l);let u=function(e,t,n){const s=e.shape.slice();s[n]=1;const a=iE(t,s),r=WE(e,n,!0,!1),o=WE(e,n,!0,!0),i=_T(r,o);return _T(a,i)}(o.reshape(i),t,a);if(u=u.reshape(o.shape),null!=r){const e=dR(r);u=M_(u,e)}return u}const kL={kernelName:fS,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=AR(n,xR(0)),s=xR(xD),a=xR(bD),r=_T(e,a),o=_T(_T(e,s),NR(vT(n,"float32")));return JE(t,r,o)}}}},wL={kernelName:IS,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:a}=n;return{x:()=>gE(e,s,a)}}},IL={kernelName:NS,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>cE(e,s)}}};const NL=[uM,cM,hM,dM,pM,fM,mM,gM,xM,bM,yM,vM,wM,NM,SM,CM,$M,TM,EM,RM,AM,_M,OM,FM,MM,LM,BM,PM,zM,WM,{kernelName:zI,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=YE(n.shape,s.shape);return{a:()=>{const t=AT(e,vT(s,"float32")),r=qE(n.shape,a);return r.length>0?iE(vR(t,r),n.shape):t},b:()=>{let t=_T(e,vT(n,"float32"));const r=qE(s.shape,a);r.length>0&&(t=iE(vR(t,r),s.shape));const o=yR(s);return GR(AT(t,vT(o,"float32")))}}}},VM,UM,GM,HM,jM,KM,XM,qM,YM,QM,eL,tL,nL,sL,aL,rL,oL,iL,uL,hL,hL,dL,fL,gL,{kernelName:EN,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:a}=n,r=gw(a,s.shape),o=uw(lR(s.shape,r)[1]);return{x:()=>{const t=s.shape.slice();r.forEach((e=>{t[e]=1}));const n=iE(e,t);return AT(_T(n,lA(s.shape,"float32")),o)}}}},{kernelName:RN,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:a}=s,[r,o]=t,i=cL(e,o,r,gw(a,r.shape));return{x:()=>i.x()}}},{kernelName:AN,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>_T(e,vT(PR(n,s),"float32")),b:()=>_T(e,vT(AR(n,s),"float32"))}}},xL,{kernelName:FN,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=YE(n.shape,s.shape);return{a:()=>{const t=qE(n.shape,a);return t.length>0?iE(vR(e,t),n.shape):e},b:()=>{const t=_T(e,GR(ER(AT(n,s)))),r=qE(s.shape,a);return r.length>0?iE(vR(t,r),s.shape):t}}}},{kernelName:DN,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=YE(n.shape,s.shape);return{a:()=>{const t=_T(e,vT(s,"float32")),r=qE(n.shape,a);return r.length>0?iE(vR(t,r),n.shape):t},b:()=>{const t=_T(e,vT(n,"float32")),r=qE(s.shape,a);return r.length>0?iE(vR(t,r),s.shape):t}}}},{kernelName:MN,gradFunc:e=>({x:()=>GR(e)})},{kernelName:VN,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>iA(n.shape,"float32")}}},{kernelName:WN,gradFunc:e=>({x:()=>QE(e)})},{kernelName:UN,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return A_(e,s).map((e=>()=>e))}},bL,bL,yL,{kernelName:jN,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,a=AR(n,0);return{x:()=>JE(a,e,_T(e,s)),alpha:()=>{let t=JE(a,QE(e),_T(e,n));const r=qE(s.shape,e.shape);return r.length>0&&(t=vR(t,r)),iE(t,s.shape)}}}},{kernelName:XN,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:a}=n;let r=[];return r=null==a?s.shape.map(((e,t)=>t)):"number"==typeof a?[a]:a,{x:()=>vL(s,e,r)}}},{kernelName:QN,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>AT(e,GR(yR(n)))}}},{kernelName:oS,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=_T(PR(n,6),x_(n));return{x:()=>_T(e,vT(s,"float32"))}}},{kernelName:eS,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_T(e,vT(x_(n),"float32"))}}},{kernelName:tS,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>iE(e,n.shape)}}},{kernelName:aS,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,a={dy:e,images:s};return{images:()=>h$.runKernel(rS,a,n)}}},{kernelName:nS,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,a={dy:e,images:s};return{images:()=>h$.runKernel(sS,a,n)}}},{kernelName:iS,gradFunc:(e,t,n)=>{const{dims:s}=n,a=gw(s,e.shape);return{x:()=>HA(e,a)}}},{kernelName:lS,gradFunc:e=>({x:()=>QE(e)})},{kernelName:uS,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>GR(AT(e,_T(gR(n,1.5),2)))}}},{kernelName:pS,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>vT(QE(n),"float32"),t:()=>_T(e,vT(n,e.dtype)),e:()=>_T(e,vT(ZR(n),e.dtype))}}},kL,{kernelName:yS,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_T(e,_T(n,XR(xR(1),n)))}}},{kernelName:bS,gradFunc:e=>({x:()=>QE(e)})},{kernelName:gS,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_T(PE(vT(n,"float32")),e)}}},{kernelName:xS,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_T(zE(vT(n,"float32")),e)}}},{kernelName:mS,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:a,size:r}=n,o=s.shape,[i,l]=qO(s,a,r),u=[];for(let t=0;t<e.rank;t++)u.push([i[t],o[t]-i[t]-l[t]]);return{x:()=>yA(e,u)}}},{kernelName:SS,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:a}=n,r=_T(e,s);return{logits:()=>XR(r,_T(vR(r,[a],true),s))}}},{kernelName:vS,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_T(e,dE(n))}}},wL,wL,IL,IL,{kernelName:kS,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>AT(e,_T(bR(vT(n,"float32")),2))}}},{kernelName:AS,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=xR(2);return{a:()=>_T(e,_T(a,XR(n,s))),b:()=>_T(e,_T(a,XR(s,n)))}}},{kernelName:_S,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_T(e,_T(vT(n,"float32"),2))}}},{kernelName:qS,gradFunc:e=>({x:()=>QE(e)})},{kernelName:BS,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=YE(n.shape,s.shape);return{a:()=>{let t=e;const s=qE(n.shape,a);return s.length>0&&(t=vR(t,s)),iE(t,n.shape)},b:()=>{let t=e;const n=qE(s.shape,a);return n.length>0&&(t=vR(t,n)),iE(GR(t),s.shape)}}}},{kernelName:wS,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,a=s.shape.slice(),{axis:r}=n;gw(r,s.shape).forEach((e=>{a[e]=1}));const o=iE(e,a),i=_T(o,lA(s.shape,"float32"));return{x:()=>i}}},{kernelName:PS,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>AT(e,yR(PE(n)))}}},{kernelName:zS,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_T(XR(xR(1),yR(n)),e)}}},{kernelName:WS,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:a}=n;return{x:()=>{let t=QE(s);if(1===s.rank)for(let n=0;n<a[0];++n)t=ET(t,pE(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<a[0];++n)for(let r=0;r<a[1];++r)t=ET(t,pE(e,[n*s.shape[0],r*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<a[0];++n)for(let r=0;r<a[1];++r)for(let o=0;o<a[2];++o)t=ET(t,pE(e,[n*s.shape[0],r*s.shape[1],o*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<a[0];++n)for(let r=0;r<a[1];++r)for(let o=0;o<a[2];++o)for(let i=0;i<a[3];++i)t=ET(t,pE(e,[n*s.shape[0],r*s.shape[1],o*s.shape[2],i*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},{kernelName:GS,gradFunc:(e,t,n)=>{const s=n,{perm:a}=s,r=dR(a);return{x:()=>M_(e,r)}}},{kernelName:jS,gradFunc:(e,t,n)=>{const s=n,{axis:a}=s;return{value:()=>g_(e,a)}}},{kernelName:XS,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=rA(t,QE(t)),s=RR(e,n);let a=_R(t,xR(0,"int32"));const r=s.rank-a.rank;for(let e=0;e<r;++e)a=SR(a,e+1);a=YR(a,lA(s.shape,"bool"));const o=QE(s);return JE(a,s,o)}(e,n)}}},{kernelName:KS,gradFunc:e=>({x:()=>QE(e)})}];for(const e of NL)lC(e);jC().prototype.abs=function(){return this.throwIfDisposed(),FT(this)},jC().prototype.acos=function(){return this.throwIfDisposed(),OT(this)},jC().prototype.acosh=function(){return this.throwIfDisposed(),DT(this)},jC().prototype.add=function(e){return this.throwIfDisposed(),ET(this,e)},jC().prototype.all=function(e,t){return this.throwIfDisposed(),LT(this,e,t)},jC().prototype.any=function(e,t){return this.throwIfDisposed(),BT(this,e,t)},jC().prototype.argMax=function(e){return this.throwIfDisposed(),PT(this,e)},jC().prototype.argMin=function(e){return this.throwIfDisposed(),zT(this,e)},jC().prototype.asScalar=function(){return this.throwIfDisposed(),ow(1===this.size,(()=>"The array must have only 1 element.")),iE(this,[])},jC().prototype.asType=function(e){return this.throwIfDisposed(),vT(this,e)},jC().prototype.as1D=function(){return this.throwIfDisposed(),iE(this,[this.size])},jC().prototype.as2D=function(e,t){return this.throwIfDisposed(),iE(this,[e,t])},jC().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),iE(this,[e,t,n])},jC().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),iE(this,[e,t,n,s])},jC().prototype.as5D=function(e,t,n,s,a){return this.throwIfDisposed(),iE(this,[e,t,n,s,a])},jC().prototype.asin=function(){return this.throwIfDisposed(),WT(this)},jC().prototype.asinh=function(){return this.throwIfDisposed(),VT(this)},jC().prototype.atan=function(){return this.throwIfDisposed(),UT(this)},jC().prototype.atan2=function(e){return this.throwIfDisposed(),GT(this,e)},jC().prototype.atanh=function(){return this.throwIfDisposed(),HT(this)},jC().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),lE(this,e,t,n,s)},jC().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),gE(this,e,t)},jC().prototype.batchNorm=function(e,t,n,s,a){return this.throwIfDisposed(),xE(this,e,t,n,s,a)},jC().prototype.broadcastTo=function(e){return this.throwIfDisposed(),NE(this,e)},jC().prototype.cast=function(e){return this.throwIfDisposed(),vT(this,e)},jC().prototype.ceil=function(){return this.throwIfDisposed(),SE(this)},jC().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),$E(this,e,t)},jC().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof HC&&(e=[e]),cE([this,...e],t)},jC().prototype.conv1d=function(e,t,n,s,a,r){return this.throwIfDisposed(),FE(this,e,t,n,s,a,r)},jC().prototype.conv2dTranspose=function(e,t,n,s,a){return this.throwIfDisposed(),DE(this,e,t,n,s,a)},jC().prototype.conv2d=function(e,t,n,s,a,r){return this.throwIfDisposed(),_E(this,e,t,n,s,a,r)},jC().prototype.cos=function(){return this.throwIfDisposed(),PE(this)},jC().prototype.cosh=function(){return this.throwIfDisposed(),zE(this)},jC().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),WE(this,e,t,n)},jC().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),VE(this,e,t,n)},jC().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),GE(this,e,t)},jC().prototype.depthwiseConv2d=function(e,t,n,s,a,r){return this.throwIfDisposed(),HE(this,e,t,n,s,a,r)},jC().prototype.dilation2d=function(e,t,n,s,a){return this.throwIfDisposed(),XE(this,e,t,n,s,a)},jC().prototype.divNoNan=function(e){return this.throwIfDisposed(),eR(this,e)},jC().prototype.div=function(e){return this.throwIfDisposed(),AT(this,e)},jC().prototype.dot=function(e){return this.throwIfDisposed(),tR(this,e)},jC().prototype.elu=function(){return this.throwIfDisposed(),sR(this)},jC().prototype.equal=function(e){return this.throwIfDisposed(),ZE(this,e)},jC().prototype.erf=function(){return this.throwIfDisposed(),rR(this)},jC().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),IR(this,e,t)},jC().prototype.exp=function(){return this.throwIfDisposed(),NR(this)},jC().prototype.expandDims=function(e){return this.throwIfDisposed(),SR(this,e)},jC().prototype.expm1=function(){return this.throwIfDisposed(),CR(this)},jC().prototype.fft=function(){return this.throwIfDisposed(),u_(this)},jC().prototype.flatten=function(){return this.throwIfDisposed(),iE(this,[this.size])},jC().prototype.floor=function(){return this.throwIfDisposed(),ER(this)},jC().prototype.floorDiv=function(e){return this.throwIfDisposed(),RT(this,e)},jC().prototype.gather=function(e,t,n){return this.throwIfDisposed(),RR(this,e,t,n)},jC().prototype.greaterEqual=function(e){return this.throwIfDisposed(),_R(this,e)},jC().prototype.greater=function(e){return this.throwIfDisposed(),AR(this,e)},jC().prototype.ifft=function(){return this.throwIfDisposed(),c_(this)},jC().prototype.irfft=function(){return this.throwIfDisposed(),h_(this)},jC().prototype.isFinite=function(){return this.throwIfDisposed(),OR(this)},jC().prototype.isInf=function(){return this.throwIfDisposed(),DR(this)},jC().prototype.isNaN=function(){return this.throwIfDisposed(),MR(this)},jC().prototype.leakyRelu=function(e){return this.throwIfDisposed(),LR(this,e)},jC().prototype.lessEqual=function(e){return this.throwIfDisposed(),PR(this,e)},jC().prototype.less=function(e){return this.throwIfDisposed(),BR(this,e)},jC().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),zR(this,e,t,n,s)},jC().prototype.logSigmoid=function(){return this.throwIfDisposed(),jR(this)},jC().prototype.logSoftmax=function(e){return this.throwIfDisposed(),KR(this,e)},jC().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),qR(this,e,t)},jC().prototype.log=function(){return this.throwIfDisposed(),WR(this)},jC().prototype.log1p=function(){return this.throwIfDisposed(),VR(this)},jC().prototype.logicalAnd=function(e){return this.throwIfDisposed(),YR(this,e)},jC().prototype.logicalNot=function(){return this.throwIfDisposed(),ZR(this)},jC().prototype.logicalOr=function(e){return this.throwIfDisposed(),JR(this,e)},jC().prototype.logicalXor=function(e){return this.throwIfDisposed(),QR(this,e)},jC().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),hE(this,e,t,n)},jC().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),nA(this,e,t,n,s)},jC().prototype.max=function(e,t){return this.throwIfDisposed(),fR(this,e,t)},jC().prototype.maximum=function(e){return this.throwIfDisposed(),rA(this,e)},jC().prototype.mean=function(e,t){return this.throwIfDisposed(),oA(this,e,t)},jC().prototype.min=function(e,t){return this.throwIfDisposed(),mR(this,e,t)},jC().prototype.minimum=function(e){return this.throwIfDisposed(),uA(this,e)},jC().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),cA(this,e,t)},jC().prototype.mod=function(e){return this.throwIfDisposed(),hA(this,e)},jC().prototype.mul=function(e){return this.throwIfDisposed(),_T(this,e)},jC().prototype.neg=function(){return this.throwIfDisposed(),GR(this)},jC().prototype.norm=function(e,t,n){return this.throwIfDisposed(),wR(this,e,t,n)},jC().prototype.notEqual=function(e){return this.throwIfDisposed(),mA(this,e)},jC().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),gA(this,e,t,n)},jC().prototype.onesLike=function(){return this.throwIfDisposed(),xA(this)},jC().prototype.pad=function(e,t){return this.throwIfDisposed(),yA(this,e,t)},jC().prototype.pool=function(e,t,n,s,a,r){return this.throwIfDisposed(),SA(this,e,t,n,s,a,r)},jC().prototype.pow=function(e){return this.throwIfDisposed(),gR(this,e)},jC().prototype.prelu=function(e){return this.throwIfDisposed(),CA(this,e)},jC().prototype.prod=function(e,t){return this.throwIfDisposed(),$A(this,e,t)},jC().prototype.reciprocal=function(){return this.throwIfDisposed(),VA(this)},jC().prototype.relu=function(){return this.throwIfDisposed(),UA(this)},jC().prototype.relu6=function(){return this.throwIfDisposed(),GA(this)},jC().prototype.reshapeAs=function(e){return this.throwIfDisposed(),iE(this,e.shape)},jC().prototype.reshape=function(e){return this.throwIfDisposed(),iE(this,e)},jC().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),$F(this,e,t,n)},jC().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),TF(this,e,t,n)},jC().prototype.reverse=function(e){return this.throwIfDisposed(),HA(this,e)},jC().prototype.rfft=function(){return this.throwIfDisposed(),p_(this)},jC().prototype.round=function(){return this.throwIfDisposed(),YA(this)},jC().prototype.rsqrt=function(){return this.throwIfDisposed(),ZA(this)},jC().prototype.selu=function(){return this.throwIfDisposed(),JA(this)},jC().prototype.separableConv2d=function(e,t,n,s,a,r){return this.throwIfDisposed(),QA(this,e,t,n,s,a,r)},jC().prototype.sigmoid=function(){return this.throwIfDisposed(),dE(this)},jC().prototype.sign=function(){return this.throwIfDisposed(),t_(this)},jC().prototype.sin=function(){return this.throwIfDisposed(),n_(this)},jC().prototype.sinh=function(){return this.throwIfDisposed(),s_(this)},jC().prototype.slice=function(e,t){return this.throwIfDisposed(),pE(this,e,t)},jC().prototype.softmax=function(e){return this.throwIfDisposed(),l_(this,e)},jC().prototype.softplus=function(){return this.throwIfDisposed(),HR(this)},jC().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),NA(this,e,t)},jC().prototype.split=function(e,t){return this.throwIfDisposed(),d_(this,e,t)},jC().prototype.sqrt=function(){return this.throwIfDisposed(),bR(this)},jC().prototype.square=function(){return this.throwIfDisposed(),yR(this)},jC().prototype.squaredDifference=function(e){return this.throwIfDisposed(),f_(this,e)},jC().prototype.squeeze=function(e){return this.throwIfDisposed(),m_(this,e)},jC().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof HC?[this,e]:[this,...e];return g_(n,t)},jC().prototype.step=function(e){return this.throwIfDisposed(),x_(this,e)},jC().prototype.stridedSlice=function(e,t,n,s,a,r,o,i){return this.throwIfDisposed(),b_(this,e,t,n,s,a,r,o,i)},jC().prototype.sub=function(e){return this.throwIfDisposed(),XR(this,e)},jC().prototype.sum=function(e,t){return this.throwIfDisposed(),vR(this,e,t)},jC().prototype.tan=function(){return this.throwIfDisposed(),y_(this)},jC().prototype.tanh=function(){return this.throwIfDisposed(),fE(this)},jC().prototype.tile=function(e){return this.throwIfDisposed(),$R(this,e)},jC().prototype.toBool=function(){return this.throwIfDisposed(),vT(this,"bool")},jC().prototype.toFloat=function(){return this.throwIfDisposed(),vT(this,"float32")},jC().prototype.toInt=function(){return this.throwIfDisposed(),vT(this,"int32")},jC().prototype.topk=function(e,t){return this.throwIfDisposed(),$_(this,e,t)},jC().prototype.transpose=function(e){return this.throwIfDisposed(),M_(this,e)},jC().prototype.unique=function(e){return this.throwIfDisposed(),E_(this,e)},jC().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),R_(this,e,t)},jC().prototype.unstack=function(e){return this.throwIfDisposed(),A_(this,e)},jC().prototype.where=function(e,t){return this.throwIfDisposed(),JE(e,this,t)},jC().prototype.zerosLike=function(){return this.throwIfDisposed(),QE(this)};class SL extends Error{constructor(e){super(e),Object.setPrototypeOf(this,SL.prototype)}}class CL extends Error{constructor(e){super(e),Object.setPrototypeOf(this,CL.prototype)}}class $L extends Error{constructor(e){super(e),Object.setPrototypeOf(this,$L.prototype)}}class TL extends Error{constructor(e){super(e),Object.setPrototypeOf(this,TL.prototype)}}class EL extends Error{constructor(e){super(e),Object.setPrototypeOf(this,EL.prototype)}}class RL{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function AL(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function _L(e,t){if(!e)throw new EL(t)}function FL(e,t){let n=0;for(const s of e)s===t&&n++;return n}function OL(e){return 1===e.length?e[0]:e}function DL(e){return Array.isArray(e)?e:[e]}function ML(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function LL(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let BL={};function PL(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function zL(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>zL(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?zL(t):e[n]=t.value)}}}function WL(e,t={},n={},s="object",a=!1){if("string"==typeof e){const a=e;let r;if(a in n)r=n[a];else if(a in BL)r=BL[a];else if(r=t[a],null==r)throw new $L(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return r}{const r=e;if(null==r.className||null==r.config)throw new $L(`${s}: Improper config format: ${JSON.stringify(r)}.\n'className' and 'config' must set.`);const o=r.className;let i,l;if(o in n?[i,l]=n[o]:o in BL?[i,l]=BL.className:o in t&&([i,l]=t[o]),null==i)throw new $L(`Unknown ${s}: ${o}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(BL))e[t]=BL[t];for(const t of Object.keys(n))e[t]=n[t];r.config.customObjects=e;const t=Object.assign({},BL);for(const e of Object.keys(n))BL[e]=n[e];zL(r.config);const s=l(i,r.config,n,a);return BL=Object.assign({},t),s}{const e=Object.assign({},BL);for(const e of Object.keys(n))BL[e]=n[e];const t=new i(r.config);return BL=Object.assign({},e),t}}}function VL(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function UL(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function GL(e){if(null==e)throw new $L(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function HL(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new $L(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function jL(e,t,n=0,s=1/0){return _L(n>=0),_L(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every((e=>typeof e===t))}function XL(e,t){Array.isArray(e)?(ow(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>XL(e,`element ${n+1} of ${t}`)))):ow(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${KL(e)}.`))}function KL(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>KL(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function qL(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}let YL=0;function ZL(){return YL++}const JL={};function QL(e=""){return e in JL||(JL[e]=0),JL[e]+=1,e+JL[e].toString()}const eB=["channelsFirst","channelsLast"],tB=["nearest","bilinear"],nB=["valid","same","causal"],sB=["max","avg"],aB=["sum","mul","concat","ave"],rB=new Map;function oB(e){HL(eB,"DataFormat",e)}function iB(e){HL(nB,"PaddingMode",e)}function lB(e){HL(sB,"PoolMode",e)}const uB=[],cB="/";function hB(e,t){uB.push(e);try{const e=t();return uB.pop(),e}catch(e){throw uB.pop(),e}}function dB(e){if(!mB(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===uB.length?"":uB.join(cB)+cB)+e}function pB(e){if(!mB(e))throw new Error("Not a valid tensor name: '"+e+"'");rB.has(e)||rB.set(e,0);const t=rB.get(e);if(rB.set(e,rB.get(e)+1),t>0){const n=`${e}_${t}`;return rB.set(n,1),n}return e}const fB=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function mB(e){return!!e.match(fB)}function gB(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let a=t;a<n;++a)s*=e[a];return s}function xB(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s<t&&(t=s)}return t}function bB(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s>t&&(t=s)}return t}function yB(e,t){if(t<e)throw new $L(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}let vB;function kB(){return null==vB&&(vB=h$.backend.epsilon()),vB}function wB(e,t){return vT(e,t)}function IB(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),iE(e,n)}function NB(e,t,n){return ST((()=>{switch(e.rank){case 1:return a_(e,t,n);case 2:return r_(e,[t,0],[n,e.shape[1]]);case 3:return o_(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return i_(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return pE(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return pE(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new $L(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function SB(e,t,n){return ST((()=>{switch(e.rank){case 1:return a_(e,t,n);case 2:return r_(e,[0,t],[e.shape[0],n]);case 3:return o_(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return i_(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new $L(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function CB(e,t,n,s){return ST((()=>{switch(e.rank){case 1:return a_(e,t,n);case 2:switch(s){case 1:return NB(e,t,n);case 2:return SB(e,t,n);default:throw new $L(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return NB(e,t,n);case 2:return o_(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return SB(e,t,n);default:throw new $L(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return NB(e,t,n);case 2:return i_(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return i_(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return SB(e,t,n);default:throw new $L(`The axis is not within the rank of the tensor ${s}`)}default:throw new $L(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function $B(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),cE(e,t)}function TB(e,t){switch(e.rank){case 1:return TE([e,t]);case 2:return EE([e,t],0);case 3:return RE([e,t],0);case 4:return AE([e,t],0);default:throw new $L(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function EB(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new $L(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return $R(e,t)}function RB(e,t=0,n=1,s,a){return MA(e,t,n,s,a)}function AB(e,t,n,s){if(e.rank<2||t.rank<2)throw new TL(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){if(e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new TL(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}if(2===e.rank&&2===t.rank){return eF({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?OB(e.rank,s,"channelsLast"):null,activation:n})}{const a=e.shape.slice(),r=a.pop();e=iE(e,[-1,r]);const o=t.shape.slice(),i=o.pop(),l=o.pop(),u=[...o,i],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=iE(M_(t,c),[l,-1]);const h=[...a,...u];return iE(eF({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?OB(e.rank,s,"channelsLast"):null,activation:n}),h)}}function _B(e,t,n){return ST((()=>(t=Array.isArray(t)?v_(t,"int32"):vT(t,"int32"),RR(e,t,n))))}function FB(e){return _T(e,e)}function OB(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new $L(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?iE(t,[1,s[0],1,1,1]):iE(t,[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?iE(t,[1,1,1,1,s[0]]):iE(t,[1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?iE(t,[1,s[0],1,1]):iE(t,[1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?iE(t,[1,1,1,s[0]]):iE(t,[1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?iE(t,[1,s[0],1]):iE(t,[1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?iE(t,[1,1,s[0]]):iE(t,[1].concat(s))}else if(e<3)return t;throw new $L(`Unsupported input rank by biasAdd: ${t.rank}`)}function DB(e,t,n){return ST((()=>(null==n&&(n="channelsLast"),oB(n),ET(e,OB(e.rank,t,n)))))}function MB(e,t,n,s){return ST((()=>W_(e,t,n,s)))}function LB(e,t,n=!1){return n?e():t()}const BB=["fanIn","fanOut","fanAvg"],PB=["normal","uniform","truncatedNormal"];class zB extends rO{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class WB extends zB{apply(e,t){return iA(e,t)}}WB.className="Zeros",iO(WB);class VB extends zB{apply(e,t){return lA(e,t)}}VB.className="Ones",iO(VB);class UB extends zB{constructor(e){if(super(),"object"!=typeof e)throw new $L(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new $L(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return ST((()=>_T(xR(this.value),lA(e,t))))}getConfig(){return{value:this.value}}}UB.className="Constant",iO(UB);class GB extends zB{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return BA(e,this.minval,this.maxval,t,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}GB.className="RandomUniform",iO(GB);class HB extends zB{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new TL(`randomNormal does not support dType ${t}.`);return RB(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}HB.className="RandomNormal",iO(HB);class jB extends zB{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new TL(`truncatedNormal does not support dType ${t}.`);return T_(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}jB.className="TruncatedNormal",iO(jB);class XB extends zB{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return ST((()=>{if(2!==e.length||e[0]!==e[1])throw new $L("Identity matrix initializer can only be used for 2D square matrices.");return _T(this.gain,TR(e[0]))}))}getConfig(){return{gain:this.gain}}}XB.className="Identity",iO(XB);class KB extends zB{constructor(e){if(super(),e.scale<0)throw new $L(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,HL(BB,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){HL(PB,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(oB(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=gB(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=gB(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=gB(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],a=n[1];let r=this.scale;if("fanIn"===this.mode?r/=Math.max(1,s):"fanOut"===this.mode?r/=Math.max(1,a):r/=Math.max(1,(s+a)/2),"normal"===this.distribution){const n=Math.sqrt(r);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new TL(`${this.getClassName()} does not support dType ${t}.`);return T_(e,0,n,t,this.seed)}{const n=Math.sqrt(3*r);return BA(e,-n,n,t,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}KB.className="VarianceScaling",iO(KB);class qB extends KB{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return KB.className}}qB.className="GlorotUniform",iO(qB);class YB extends KB{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return KB.className}}YB.className="GlorotNormal",iO(YB);class ZB extends KB{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return KB.className}}ZB.className="HeNormal",iO(ZB);class JB extends KB{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return KB.className}}JB.className="HeUniform",iO(JB);class QB extends KB{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return KB.className}}QB.className="LeCunNormal",iO(QB);class eP extends KB{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return KB.className}}eP.className="LeCunUniform",iO(eP);class tP extends zB{constructor(e){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed}apply(e,t){return ST((()=>{if(e.length<2)throw new TL("Shape must be at least 2D.");if("int32"!==t&&"float32"!==t&&void 0!==t)throw new TypeError(`Unsupported data type ${t}.`);const n=uw(e.slice(0,-1)),s=e[e.length-1],a=n*s;a>this.ELEMENTS_WARN_SLOW&&console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${a}) elements: Slowness may result.`);const r=RB([Math.max(s,n),Math.min(s,n)],0,1,t,this.seed),o=QF.qr(r,!1);let i=o[0];const l=o[1].flatten().stridedSlice([0],[Math.min(s,n)*Math.min(s,n)],[Math.min(s,n)+1]);return i=_T(i,l.sign()),n<s&&(i=i.transpose()),_T(xR(this.gain),i.reshape(e))}))}getConfig(){return{gain:this.gain,seed:this.seed}}}tP.className="Orthogonal",iO(tP);const nP={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function sP(e,t={}){return WL(e,oO.getMap().classNameMap,t,"initializer")}function aP(e){return PL(e)}function rP(e){if("string"==typeof e){const t=e in nP?nP[e]:e;if("GlorotNormal"===t)return new YB;if("GlorotUniform"===t)return new qB;if("HeNormal"===t)return new ZB;if("HeUniform"===t)return new JB;if("LeCunNormal"===t)return new QB;if("LeCunUniform"===t)return new eP;{const e={};return e.className=t,e.config={},sP(e)}}return e instanceof zB?e:sP(e)}function oP(e){return Array.isArray(e)&&Array.isArray(e[0])}function iP(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function lP(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new $L(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function uP(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new $L(`Expected exactly 1 Shape; got ${e.length}`)}return e}function cP(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}const hP="Variable";class dP{constructor(e,t="float32",n=hP,s=!0,a=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=ZL(),n=null==n?hP:n,this.originalName=dB(n),this.name=pB(this.originalName),this.trainable_=s,this.constraint=a,this.val=__(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function pP(e){return e.map((e=>e.read()))}function fP(e){e.forEach((e=>{e[0].write(e[1])}))}class mP{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class gP{constructor(e,t,n,s,a,r,o){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=a,this.outputTensorIndex=o,this.id=ZL(),null!=r&&(this.originalName=dB(r),this.name=pB(this.originalName)),this.rank=t.length}}let xP=0;class bP{constructor(e,t){this.callArgs=t,this.id=xP++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let yP=0;class vP extends rO{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=yP++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=ML(e)+"_"+QL(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new CL(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new $L(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return OL(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return OL(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new SL(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new SL(`Layer ${this.name} is not connected, no input to return.`);return OL(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new SL(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new SL(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return OL(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){const t=DL(e);if(null==this.inputSpec||0===this.inputSpec.length)return;const n=DL(this.inputSpec);if(t.length!==n.length)throw new $L(`Layer ${this.name} expects ${n.length} inputs, but it received ${t.length} input tensors. Input received: ${e}`);for(let e=0;e<t.length;e++){const s=t[e],a=n[e];if(null==a)continue;const r=s.rank;if(null!=a.ndim&&r!==a.ndim)throw new $L(`Input ${e} is incompatible with layer ${this.name}: expected ndim=${a.ndim}, found ndim=${r}`);if(null!=a.maxNDim&&r>a.maxNDim)throw new $L(`Input ${e} is incompatible with layer ${this.name}: expected max_ndim=${a.maxNDim}, found ndim=${r}`);if(null!=a.minNDim&&r<a.minNDim)throw new $L(`Input ${e} is incompatible with layer ${this.name}: expected min_ndim=${a.minNDim}, found ndim=${r}.`);if(null!=a.dtype&&s.dtype!==a.dtype)throw new $L(`Input ${e} is incompatible with layer ${this.name} : expected dtype=${a.dtype}, found dtype=${s.dtype}.`);if(a.axes){const t=s.shape;for(const n in a.axes){const s=Number(n),r=a.axes[n],o=s>=0?t[s]:t[t.length+s];if(null!=r&&-1===[r,null].indexOf(o))throw new $L(`Input ${e} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${r} but got shape ${t}.`)}}if(null!=a.shape)for(let t=0;t<a.shape.length;++t){const n=a.shape[t],r=s.shape[t];if(null!=n&&null!=r&&n!==r)throw new $L(`Input ${e} is incompatible with layer ${this.name}: expected shape=${a.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=DL(e),s=function(e){let t=!0;for(const n of DL(e))if(!(n instanceof gP)){t=!1;break}return t}(e),a=function(e){let t=!0;for(const n of DL(e))if(n instanceof gP){t=!1;break}return t}(e);if(s===a)throw new $L("Arguments to apply() must be all SymbolicTensors or all Tensors");return hB(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of DL(e))t.push(n.shape);this.build(OL(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&a&&(this._refCount=1)}if(this.assertInputCompatibility(e),a){let s=this.call(e,t);this.supportsMasking&&this.setMaskMetadata(e,s);const a=DL(s),r=[];for(let e of a)-1!==n.indexOf(e)&&(e=e.clone()),r.push(e);if(s=OL(r),null!=this.activityRegularizer)throw new TL("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=DL(e);const t=[];for(const n of e)t.push(n.shape);return OL(t)}(e),s=this.computeOutputShape(n);let a;const r="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),a=null!=s&&s.length>0&&Array.isArray(s[0])?s.map(((n,s)=>new gP(r,n,this,DL(e),t,this.name,s))):new gP(r,s,this,DL(e),t,this.name),this.addInboundNode(e,a,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new TL("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return a}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new SL(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new SL(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new CL(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return cP(this.weights)}build(e){this.built=!0}getWeights(e=!1){return pP(e?this.trainableWeights:this.weights)}setWeights(e){ST((()=>{const t=this.weights;if(t.length!==e.length)throw new $L(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=pP(t);for(let a=0;a<s.length;++a){const r=s[a],o=t[a],i=e[a];if(!cw(r.shape,i.shape))throw new $L(`Layer weight shape ${r.shape} not compatible with provided weight shape ${i.shape}`);n.push([o,i])}fP(n)}))}addWeight(e,t,n,s,a,r,o,i){if(-1!==this._addedWeightNames.indexOf(e))throw new $L(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=null!=i?i():rP("zeros"));const l=s.apply(t,n),u=new dP(l,n,e,r,o);return l.dispose(),null!=a&&this.addLoss((()=>a.apply(u.read()))),null==r&&(r=!0),r?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=DL(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}setMaskMetadata(e,t,n){if(!this.supportsMasking)return;const s=this.computeMask(e,n),a=DL(t),r=DL(s);if(a.length!==r.length)throw new Error(`${this.name} outputs ${a.length} tensors but ${a.length} masks for those tensors`);for(let e=0;e<a.length;e++)a[e].kerasMask=r[e]}addInboundNode(e,t,n,s,a,r,o=null){const i=DL(e);t=DL(t),n=DL(n),s=DL(s),a=iP(a),r=iP(r);const l=[],u=[],c=[];for(const e of i)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new bP({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:i,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:a,outputShapes:r},o);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function kP(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=kP(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class wP extends vP{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:QL("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new $L("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new $L("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new $L("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new gP(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new bP({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new $L(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}wP.className="InputLayer",iO(wP);class IP{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof IP)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new $L(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return vT(t,e.dtype)}catch(n){throw new $L(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof gP){if(null==this.id2Value[e.id])throw new $L(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new $L(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof gP){if(null==this.id2Value[e.id])throw new $L(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new $L(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&CT(this.id2Mask)}}const NP=new RL,SP=new RL;function CP(e,t,n,s){const a=null!=n&&n.training,r=Array.isArray(e),o=r?e:[e],i=o.map((e=>e.name)),l=[],u=t.names();for(const e of i)-1!==u.indexOf(e)?l.push(t.getValue(e)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=i.join(",")+"|"+t.names().sort().join(",");let h,d=NP.get(c);if(null==d){const e=function(e,t){ow(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],s={};if(1===e.length){const a=TP(e[0],t);n=a.sorted,s=a.recipientMap}else{const a=new Set;for(const r of e){const{sorted:e,recipientMap:o}=TP(r,t);for(const t of e)a.has(t.name)||(n.push(t),a.add(t.name));for(const e in o)null==s[e]&&(s[e]=new Set),o[e].forEach((t=>s[e].add(t)))}}return{sorted:n,recipientCounts:$P(s)}}(o,t);d=e.sorted,h=e.recipientCounts,NP.put(c,d),SP.put(c,h)}h={},a||Object.assign(h,SP.get(c));const p=new IP(t);for(let e=0;e<d.length;++e){if(null!=s){const e=NT().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const r=d[e],o=r.sourceLayer;if(o instanceof wP)continue;const u=[],c=[],f=[];let m=!1;for(const e of r.inputs){const n=p.getValue(e),s=p.getMask(e);u.push(n),c.push(s),null!=s&&(m=!0),a||(h[e.name]--,0!==h[e.name]||t.hasKey(e)||-1!==i.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=DL(o.apply(u,n));let x=null;o.supportsMasking&&(x=o.computeMask(u,c));const b=EP(r),y=Array.isArray(b)?b:[b];for(let e=0;e<y.length;++e){p.hasKey(y[e])||p.add(y[e],g[e],Array.isArray(x)?x[0]:x);const t=i.indexOf(y[e].name);-1!==t&&(l[t]=g[e])}a||CT(f)}return p.disposeMasks(),r?l:l[0]}function $P(e){const t={};for(const n in e)t[n]=e[n].size;return t}function TP(e,t){const n=new Set,s=[],a={};for(const e of t.names())n.add(e);const r=[],o=[];for(r.push(e);r.length>0;){const e=r[r.length-1];if(n.has(e.name)){r.pop();continue}const t=o[o.length-1]===r.length-1;if(0===e.inputs.length||t)r.pop(),s.push(e),n.add(e.name),t&&o.pop();else{o.push(r.length-1);for(const t of e.inputs)null==a[t.name]&&(a[t.name]=new Set),a[t.name].add(e.name),n.has(t.name)||r.push(t)}}return{sorted:s,recipientMap:a}}function EP(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}function RP(e,t){return ST((()=>bR(vR(_T(e,e),t,!0))))}zw().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",(()=>100),(function(e){null!=NP&&NP.setMaxEntries(e),null!=SP&&SP.setMaxEntries(e)}));class AP extends rO{getConfig(){return{}}}class _P extends AP{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return ST((()=>{const t=RP(e,this.axis),n=$E(t,0,this.maxValue);return _T(e,AT(n,ET(kB(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}_P.className="MaxNorm",iO(_P);class FP extends AP{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return ST((()=>AT(e,ET(kB(),RP(e,this.axis)))))}getConfig(){return{axis:this.axis}}}FP.className="UnitNorm",iO(FP);class OP extends AP{apply(e){return UA(e)}}OP.className="NonNeg",iO(OP);class DP extends AP{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return ST((()=>{const t=RP(e,this.axis),n=ET(_T(this.rate,$E(t,this.minValue,this.maxValue)),_T(1-this.rate,t));return _T(e,AT(n,ET(kB(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}DP.className="MinMaxNorm",iO(DP);const MP={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function LP(e){return PL(e)}function BP(e,t={}){return WL(e,oO.getMap().classNameMap,t,"constraint")}function PP(e){if(null==e)return null;if("string"==typeof e){return BP({className:e in MP?MP[e]:e,config:{}})}return e instanceof AP?e:BP(e)}async function zP(e){if(null==e)return;const t=[],n=[],s=[];for(const a in e){const r=e[a];if("number"!=typeof r){const e=r;t.push(e.data()),n.push(a),s.push(e)}}if(t.length>0){const a=await Promise.all(t);for(let t=0;t<a.length;++t)e[n[t]]=a[t][0];CT(s)}}function WP(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var VP;!function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(VP||(VP={}));class UP{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class GP{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class HP extends UP{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const s=t[e];if("number"==typeof s)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+s*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const a=ST((()=>ET(this.totals[e],_T(s,n))));this.totals[e]=a,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:ST((()=>{const n=_T(AT(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),$T(t[e])})))}}class jP extends UP{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const a=this.history[s];for(let r=0;r<a.length;++r)if("number"!=typeof a[r]){const o=a[r];e.push(o.data()),t.push(s),n.push(r)}}const s=await Promise.all(e);for(let e=0;e<s.length;++e){this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=s[e][0]}}}class XP extends UP{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||tD,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");Iw(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let s,a=null!=n?n():CC();return(...r)=>{const o=null!=n?n():CC();return o-a<t||(a=o,s=e(...r)),s}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await zP(n),s.push(this.yield(e,t,n))),s.push(this.nextFrameFunc()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await zP(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await zP(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await zP(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await zP(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):Iw(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await zP(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await zP(e),await this.trainEnd(e))}}function KP(e,t){if(null==e&&(e={}),e instanceof UP)return[e];if(Array.isArray(e)&&e[0]instanceof UP)return e;return DL(e).map((e=>new XP(e,t)))}class qP{constructor(){}static registerCallbackConstructor(e,t){ow(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),qP.checkForDuplicate(t),null==qP.constructors[e]&&(qP.constructors[e]=[]),qP.constructors[e].push(t)}static checkForDuplicate(e){for(const t in qP.constructors){qP.constructors[+t].forEach((t=>{if(t===e)throw new $L("Duplicate callback constructor.")}))}}static clear(){qP.constructors={}}static createCallbacks(e){const t=[];for(const n in qP.constructors){const s=+n;e>=s&&t.push(...qP.constructors[s])}return t.map((e=>new e))}}function YP(e,t,n,s,a,r,o,i,l){const u=new jP,c=[new HP,...qP.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new GP(c);return h.setParams({epochs:n,initialEpoch:s,samples:a,steps:r,batchSize:o,verbose:t,doValidation:i,metrics:l}),{callbackList:h,history:u}}function ZP(e,t={},n=!1){return WL(e,oO.getMap().classNameMap,t,"layer",n)}function JP(e,t){return ST((()=>{"float32"!==e.dtype&&(e=vT(e,"float32"));const n=vR(FB(e),t,!0),s=CE(n.shape,kB()),a=bR(rA(n,s));return AT(e,a)}))}function QP(e,t){return ST((()=>oA(FB(XR(t,e)),-1)))}function ez(e,t){return ST((()=>oA(FT(XR(t,e)),-1)))}function tz(e,t){return ST((()=>{const n=XR(e,t),s=$E(FT(e),kB(),Number.MAX_VALUE),a=FT(AT(n,s));return _T(100,oA(a,-1))}))}function nz(e,t,n=!1){return ST((()=>{if(n)t=l_(t);else{const e=vR(t,t.shape.length-1,!0);t=AT(t,e)}return t=$E(t,kB(),1-kB()),GR(vR(_T(vT(e,"float32"),WR(t)),t.shape.length-1))}))}function sz(e,t,n=!1){return ST((()=>{const s=vT(ER(function(e){const t=[gB(e.shape)];return iE(e,t)}(e)),"int32"),a=(t=$E(t,kB(),1-kB())).shape;return nz(iE(gA(s,a[a.length-1]),a),t,n)}))}function az(e,t){return ST((()=>{let n;return n=$E(t,kB(),1-kB()),n=WR(AT(n,XR(1,n))),oA(function(e,t){if(!cw(e.shape,t.shape))throw new $L(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return ST((()=>{const n=UA(t),s=GR(FT(t));return ET(XR(n,_T(t,e)),VR(NR(s)))}))}(e,n),-1)}))}function rz(e,t){return ST((()=>{const n=JP(e,-1),s=JP(t,-1),a=_T(n,s);return GR(vR(a,-1))}))}qP.constructors={};const oz={meanSquaredError:QP,meanAbsoluteError:ez,meanAbsolutePercentageError:tz,meanSquaredLogarithmicError:function(e,t){return ST((()=>{const n=$E(t,kB(),Number.MAX_VALUE),s=WR(ET(1,n)),a=$E(e,kB(),Number.MAX_VALUE),r=WR(ET(1,a));return oA(FB(XR(s,r)),-1)}))},squaredHinge:function(e,t){return ST((()=>{const n=rA(0,XR(1,_T(e,t)));return oA(FB(n),-1)}))},hinge:function(e,t){return ST((()=>{const n=rA(0,XR(1,_T(e,t)));return oA(n,-1)}))},categoricalHinge:function(e,t){return ST((()=>{const n=vR(_T(e,t),-1),s=fR(_T(XR(1,e),t),-1);return rA(0,ET(1,XR(s,n)))}))},logcosh:function(e,t){return ST((()=>{const n=Math.log(2),s=XR(t,e),a=XR(ET(s,HR(_T(-2,s))),n);return oA(a,-1)}))},categoricalCrossentropy:nz,sparseCategoricalCrossentropy:sz,binaryCrossentropy:az,kullbackLeiblerDivergence:function(e,t){return ST((()=>{const n=$E(e,kB(),1),s=$E(t,kB(),1);return vR(_T(e,WR(AT(n,s))),-1)}))},poisson:function(e,t){return ST((()=>{const n=WR(ET(kB(),t));return oA(XR(t,_T(e,n)),-1)}))},cosineProximity:rz};function iz(e){if("string"==typeof e){if(e in oz)return oz[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new $L(t)}return e}function lz(e,t){return ST((()=>{const n=_T(.5,xA(t)),s=wB(AR(t,n),e.dtype);return oA(ZE(e,s),-1)}))}function uz(e,t){return ST((()=>wB(ZE(PT(e,-1),PT(t,-1)),"float32")))}function cz(e,t){return az(e,t)}function hz(e,t){return e.rank===t.rank&&(e=m_(e,[e.rank-1])),(t=PT(t,-1)).dtype!==e.dtype&&(t=vT(t,e.dtype)),vT(ZE(e,t),"float32")}const dz=nz,pz=sz,fz={binaryAccuracy:lz,categoricalAccuracy:uz,precision:function(e,t){return ST((()=>{const n=function(e,t){return ST((()=>vT(vR(YR(ZE(e,1),ZE(t,1))),"float32")))}(e,t),s=function(e,t){return ST((()=>vT(vR(YR(ZE(e,0),ZE(t,1))),"float32")))}(e,t),a=ET(n,s);return vT(JE(AR(a,0),AT(n,a),0),"float32")}))},categoricalCrossentropy:dz,sparseCategoricalCrossentropy:pz,mse:QP,MSE:QP,mae:ez,MAE:ez,mape:tz,MAPE:tz,cosine:rz};function mz(e){if("string"==typeof e&&e in fz)return fz[e];if("string"!=typeof e&&null!=e)return e;throw new $L(`Unknown metric ${e}`)}function gz(e){if(_L(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(oz))if(oz[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(fz))if(fz[n]===e){t=n;break}return void 0!==t?t:e.name}}const xz=1048576;function bz(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!yz(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>xz&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function yz(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!yz(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!yz(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function vz(e,t,n,s=console.log){const a=function(e){let t=!0;const n=[],s=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const a of n.inboundNodes)if(-1!==s.indexOf(a)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),r=["Layer (type)","Input Shape","Output shape","Param #"];let o;if(a?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!a){r.push("Receives inputs"),o=[];for(const t in e.nodesByDepth)o.push(...e.nodesByDepth[t])}s("_".repeat(t)),kz(r,n,s),s("=".repeat(t));const i=e.layers;for(let e=0;e<i.length;++e)a?wz(i[e],n,s):Iz(i[e],n,o,s),s((e===i.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;t=null!=e.collectedTrainableWeights?cP(e.collectedTrainableWeights):cP(e.trainableWeights);return t}(e),u=cP(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}function kz(e,t,n=console.log){let s="";for(let n=0;n<e.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=e[n],s=s.slice(0,t[n]),s+=" ".repeat(t[n]-s.length);n(s)}function wz(e,t,n){let s,a;try{a=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){a="multiple"}try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}kz([`${e.name} (${e.getClassName()})`,a,s,e.countParams().toString()],t,n)}function Iz(e,t,n,s){let a,r;try{r=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){r="multiple"}try{a=JSON.stringify(e.outputShape)}catch(e){a="multiple"}const o=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,s=t.nodeIndices[e],a=t.tensorIndices[e];o.push(`${n}[${s}][${a}]`)}const i=e.name,l=e.getClassName(),u=0===o.length?"":o[0];kz([`${i} (${l})`,r,a,e.countParams().toString(),u],t,s);for(let e=1;e<o.length;++e)kz(["","","","",o[e]],t,s)}function Nz(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function Sz(e,t){if(null===e)return null;if("string"==typeof e)return LL(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let a=0;a<s;++a){const s=e[a];Nz(t,a,s)?n.push(s):n.push(Sz(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=LL(n);t[e]=Sz(s,e)}}return t}}function Cz(e,t){if(null==e)return null;if("string"==typeof e)return ML(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let a=0;a<s;++a){const s=e[a];Nz(t,a,s)?n.push(s):n.push(Cz(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n],a=ML(n);t[a]="name"!==n&&"className"!==n||"string"!=typeof s?Cz(s,n):s}return t}}const $z="4.13.0";class Tz extends vP{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=QL(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],UL(this.inputs).length!==this.inputs.length)throw new $L(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);UL(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;_L(0===n,"input layer has >1 nodes"),_L(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof wP))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},s={},a={},r={},o=[],i=(e,t,n,s,a,l)=>{null!=s&&null!=a&&null!=l||(s=e.sourceLayer,a=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[a];if(-1!==n.indexOf(u))throw new CL(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(Tz.nodeKey(s,a)),s.id in r||(r[s.id]=Object.keys(r).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const s=u.inputTensors[e],a=u.inboundLayers[e],r=u.nodeIndices[e],o=u.tensorIndices[e];i(s,t,n,a,r,o)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);o.push(u)},l=[],u=[];for(const e of this.outputs)i(e,l,u);const c=o.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let r=t[e.id];const o=null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id];r=Math.max(r,o),s[e.outboundLayer.id]=r,a[e.outboundLayer.id]=e.outboundLayer,t[e.id]=r;for(let s=0;s<e.inboundLayers.length;s++){const a=e.inboundLayers[s],o=e.nodeIndices[s],i=a.inboundNodes[o],l=null==t[i.id]?0:t[i.id];t[i.id]=Math.max(r+1,l),n[i.id]=i}}const h={};for(const e in t){const s=t[e];s in h||(h[s]=[]),h[s].push(n[e])}const d={};for(const e in s){const t=s[e];t in d||(d[t]=[]),d[t].push(a[e])}let p=Object.keys(d).map((e=>parseInt(e,10))).sort(VL);this.layers=[];for(const e of p){const t=d[e];t.sort(((e,t)=>{const n=r[e.id],s=r[t.id];return n<s?-1:n>s?1:0}));for(const e of t)e instanceof Tz&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=d,p=Object.keys(h).map((e=>parseInt(e,10))).sort(VL);const f=this.inputs.slice(),m=[];for(const e of p)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new CL(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new CL(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new bP({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new $L("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;const a=(e=>{const t=Object.keys(e);if(0===t.length)return!1;const n=t[0].split("/");return!isNaN(parseInt(n[n.length-1],10))})(e);a&&this.parseWeights(e);for(const e of this.layers)for(const[t,r]of e.weights.entries()){const e=a?`${r.name.split("/").slice(0,-1).join("/")+"/"}${t}`:r.originalName;if(null!=n[e])throw new $L(`Duplicate weight name: ${e}`);n[e]=r,s++}const r=[];for(const s in e){let a=s;if(null==n[s]){const e=s.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])r.push([n[a],e[s]]);else if(t)throw new $L(`Provided weight data has no target variable: ${s}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new $L(`${e.length} of ${s} weights are not set: ${e}`)}fP(r)}parseWeights(e){for(const t in Object.keys(e)){const n=t.split("/"),s=["vars","layer_checkpoint_dependencies"],a=n.map((e=>e.startsWith("_")?e.slice(1):e)).filter((e=>!s.includes(e))).join("/");a!==t&&(e[a]=e[t],delete e[t])}}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${$z}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=Cz(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return ST((()=>{e=DL(e);const n=new IP;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return CP(this.outputs,n,t)}))}computeMask(e,t){return ST((()=>{let n;return e=DL(e),n=null==t?AL(null,e.length):DL(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=iP(e);if(t.length!==this.inputLayers.length)throw new $L(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const s=this.inputLayers[e],a=t[e];n[s.name+"_0_0"]=a}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(VL);if(s.length>1)for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const s=[];for(let t=0;t<e.inboundLayers.length;t++){const a=e.inboundLayers[t],r=e.nodeIndices[t],o=e.tensorIndices[t],i=n[`${a.name}_${r}_${o}`];s.push(i)}const a=iP(t.computeOutputShape(OL(s))),r=t.inboundNodes.indexOf(e);for(let e=0;e<a.length;e++){n[`${t.name}_${r}_${e}`]=a[e]}}}const a=[],r=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],s=this.outputLayersTensorIndices[e],a=`${t.name}_${n}_${s}`;r.push(a)}for(let e=0;e<r.length;e++){const t=r[e];_L(t in n),a.push(n[t])}return OL(a)}runInternalGraph(e,t){null==t&&(t=AL(null,e.length));const n={};for(let s=0;s<this.inputs.length;++s){const a=this.inputs[s],r=e[s],o=t[s];n[a.id]=[r,o]}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(VL);for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,s=e.inputTensors,a=e.outputTensors,r=new Array;for(const e of s)e.id in n&&r.push(n[e.id]);if(r.length===s.length){let s,o,i,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===r.length){const[e,n]=r[0];null==u.mask&&(u.mask=n),i=DL(t.call(e,u)),l=DL(t.computeMask(e,n)),s=[e],o=[n]}else s=r.map((e=>e[0])),o=r.map((e=>e[1])),null==u.mask&&(u.mask=o),i=DL(t.call(s,u)),l=DL(t.computeMask(s,o));if(t.activityRegularizer)throw new TL("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<a.length;++e){const t=a[e],s=i[e],r=l[e];n[t.id]=[s,r]}}}}const a=[],r=[],o=[];for(const e of this.outputs){_L(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,s]=n[e.id];o.push(t.shape),a.push(t),r.push(s)}return[a,r,o]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof Tz?1:0;for(let s=0;s<e.inboundNodes.length;s++){const a=Tz.nodeKey(e,s);this.containerNodes.has(a)&&(t[a]=n,n+=1)}}return t}getLayer(e,t){if(null!=t)return this.findLayer(t);if(null==e)throw new $L("Provide either a layer name or layer index");if("number"==typeof e)return this.findLayer(e);for(const t of this.layers)if(t.name===e)return t;throw new $L(`No such layer: ${e}`)}findLayer(e){if(this.layers.length<=e)throw new $L(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}calculateLosses(){return ST((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=Tz.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const s=e.getClassName(),a=e.getConfig(),r=[];for(let n=0;n<e.inboundNodes.length;n++){const s=e.inboundNodes[n],a=Tz.nodeKey(e,n);let o={};if(this.containerNodes.has(a)){if(s.callArgs)try{JSON.stringify(s.callArgs),o=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),o={}}if(s.inboundLayers.length>0){const e=[];for(let n=0;n<s.inboundLayers.length;n++){const a=s.inboundLayers[n],r=s.nodeIndices[n],i=s.tensorIndices[n];let l=t[Tz.nodeKey(a,r)];null==l&&(l=0),e.push([a.name,l,i,o])}r.push(e)}}}const o={};o.name=e.name,o.className=s,o.config=a,o.inboundNodes=r,n.push(o)}e.layers=n;const s=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],a=this.inputLayersNodeIndices[e],r=Tz.nodeKey(n,a);if(!this.containerNodes.has(r))continue;let o=t[r];null==o&&(o=0);const i=this.inputLayersTensorIndices[e];s.push([n.name,o,i])}e.inputLayers=s;const a=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],s=this.outputLayersNodeIndices[e],r=Tz.nodeKey(n,s);if(!this.containerNodes.has(r))continue;let o=t[r];null==o&&(o=0);const i=this.outputLayersTensorIndices[e];a.push([n.name,o,i])}return e.outputLayers=a,e}static fromConfig(e,t,n={},s=!1){const a={},r={};function o(e,t){e.name in r?r[e.name].push(t):r[e.name]=[t]}function i(e,t){const n=[];let s;for(const r of t){const i=r[0],l=r[1],u=r[2];if(s=null==r[3]?{}:r[3],!(i in a))return void o(e,t);const c=a[i];if(c.inboundNodes.length<=l)return void o(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(OL(n),s)}function l(e){const n=e.name,r=ZP(e,null!=t.customObjects?t.customObjects:{});r.setFastWeightInitDuringBuild(s),a[n]=r;e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new $L(`Corrupted configuration, expected array for nodeData: ${e}`);o(r,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!GL(r);)for(const e of c){const t=a[e.name];if(t.name in r){const e=r[t.name];delete r[t.name];for(const n of e)i(t,n)}}const h=[],d=[],p=t.inputLayers;for(const e of p){const t=e[0],n=e[1],s=e[2];_L(t in a);const r=a[t].inboundNodes[n].outputTensors;h.push(r[s])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],s=e[2];_L(t in a);const r=a[t].inboundNodes[n].outputTensors;d.push(r[s])}return new e({inputs:h,outputs:d,name:u})}get stateful(){if(this._stateful)throw new $L("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){ST((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function Ez(e,t){return function(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}async function Rz(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=ST((()=>{if(1===e.shape.length)return kT(e);if(2===e.shape.length){if(e.shape[1]>1){return PT(e,1)}if(1===e.shape[1])return iE(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),s=Array.from(await t.data());CT(t);const a=[];return s.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);a.push(n[e])})),v_(a,"float32")}return null}function Az(e,t){return _T(e,t)}function _z(e,t){let n,s;const a=t;n=a.xs,s=a.ys,ow(null!=n&&null!=s,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const r=Fz("input",e.inputNames,n),o=Fz("output",e.outputNames,s),i=r[0].shape[0];ow(r.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${r.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),ow(o.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<r.length;t++)ow(r[t].shape[0]===i,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${r[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`));for(let t=0;t<o.length;t++)ow(o[t].shape[0]===i,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${o[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`));return{xs:r,ys:o}}function Fz(e,t,n){if(n instanceof HC)return[n];if(Array.isArray(n))return ow(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const s=[];for(const a of t){if(null==n[a])throw new $L(`The feature data generated by the dataset lacks the required ${e} key '${a}'.`);s.push(n[a])}return s}}async function Oz(e,t,n){const s=null!=n.batchesPerEpoch;if(ow(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),ow(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),ow(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),ow(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),ow(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const a=null!=n.validationData;let r,o;if(a)if(Dz(n.validationData))ow(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new TL("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);r=e.xs,o=e.ys}const i=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=a?l.slice().concat(l.map((e=>"val_"+e))):l.slice();const c=KP(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:d,history:p}=YP(c,h,n.epochs,null,null,function(e,t){let n=null;null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size);return n}(t,n),null,a,u);d.setModel(e),e.history=p,await d.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const u={};await d.onEpochBegin(f);let c=0,h=0;for(s||(m=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await m.next();if(s&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:a}=_z(e,t.value),r={};r.batch=h,r.size=s[0].shape[0],await d.onBatchBegin(h,r);const o=[];if(null!=n.classWeight){const t=Ez(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)o.push(await Rz(a[e],null,t[e]))}const u=s.concat(a).concat(o),p=i(u);CT(u);for(let e=0;e<l.length;++e){const t=l[e],n=p[e];r[t]=n,$T(n)}await d.onBatchEnd(h,r),WP(r),h++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(a){let t;t=Dz(n.validationData)?DL(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):DL(e.evaluate(r,o,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await d.onEpochEnd(f,u),f++,e.stopTraining_)break}return await d.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function Dz(e){return"function"==typeof e.iterator}function Mz(e){ow(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function Lz(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>NB(e,t,n-t))):NB(e,t,n-t)}function Bz(e,t){return ST((()=>null==e?null:Array.isArray(e)?e.map((e=>Bz(e,t))):_B(e,"int32"===t.dtype?t:vT(t,"int32"))))}function Pz(e,t){const n=[];let s=0,a=null;for(;s<e;)a=s+t,a>=e&&(a=e),n.push([s,a]),s=a;return n}function zz(e){const t=[];e instanceof HC&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(IB(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function Wz(e,t){if(null==e)return;const n=[];if(t instanceof HC)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const s=t[e];n.push(s.id)}const s=[];if(e instanceof HC)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&s.push(e)}));else if(null!=e)for(const t in e){const a=e[t];-1===n.indexOf(a.id)&&s.push(a)}s.forEach((e=>{e.isDisposed||e.dispose()}))}function Vz(e){return Array.isArray(e)}function Uz(e){return!function(e){return e instanceof HC}(e)&&!Vz(e)}function Gz(e,t,n,s=!0,a=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(Vz(e)&&e.length>0)t=!0;else if(Uz(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new $L(`Error when checking model ${a} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let r;if(Uz(e)){r=[];for(const n of t){if(null==e[n])throw new $L(`No data provided for "${n}". Need data for each key in: ${t}`);r.push(e[n])}}else if(Vz(e)){if(e.length!==t.length)throw new $L(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);r=e}else{if(t.length>1)throw new $L(`The model ${a} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);r=[e]}if(r=zz(r),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const o=r[e];if(o.shape.length!==n[e].length)throw new $L(`Error when checking ${a}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${o.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!s)continue;const r=o.shape[t],i=n[e][t];if(null!=i&&i>=0&&r!==i)throw new $L(`${a} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${a} received an input with ${o.shape[0]} examples, each with shape [${o.shape.slice(1,o.shape.length)}] (tensor shape [${o.shape}])`)}}return r}function Hz(e,t,n,s=!0,a=""){let r;if(Array.isArray(e)){if(e.length!==t.length)throw new $L(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);r=e}else{if(t.length>1)throw new $L(`The model expects ${t.length} ${a} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);r=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const o=r[e];if(o.shape.length!==n[e].length)throw new $L(`Error when checking ${a}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(o.shape)}`);for(let r=0;r<n[e].length;++r){if(0===r&&!s)continue;const i=o.shape[r],l=n[e][r];if(null!=l&&l!==i)throw new $L(`Error when checking ${a}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(o.shape)}.`)}}}class jz extends Tz{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new $L("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");vz(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>QO.adagrad(.01),Adadelta:()=>QO.adadelta(1,.95,kB()),Adam:()=>QO.adam(.001,.9,.999,kB()),Adamax:()=>QO.adamax(.002,.9,.999,kB(),0),RMSProp:()=>QO.rmsprop(.001,.9,0,kB()),SGD:()=>QO.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new $L(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof lO))throw new $L("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new $L(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>iz(e)))}else{const n=iz(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new $L(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(iz(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],hB("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),a=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};hB("metric",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;(t=>{let n,s,r;for(const o of t){if("string"==typeof o&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(o)){const t=this.internalOutputShapes[e];let a;1===t[t.length-1]||this.lossFunctions[e]===az?-1!==["accuracy","acc"].indexOf(o)?s=lz:-1!==["crossentropy","ce"].indexOf(o)&&(s=cz):this.lossFunctions[e]===sz?-1!==["accuracy","acc"].indexOf(o)?s=hz:-1!==["crossentropy","ce"].indexOf(o)&&(s=pz):-1!==["accuracy","acc"].indexOf(o)?s=uz:-1!==["crossentropy","ce"].indexOf(o)&&(s=dz),-1!==["accuracy","acc"].indexOf(o)?a="acc":-1!==["crossentropy","ce"].indexOf(o)&&(a="ce"),r=s,n=""+a}else{const e=mz(o);r=e,n=""+gz(o)}let t;hB(n,(()=>{t=r})),a(e,n,t)}})(s[e])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;Mz(s);const a=this.standardizeUserDataXY(e,t,!0,s);try{const e=a[0].concat(a[1]);this.makeTestFunction();const t=this.testFunction;return OL(this.testLoop(t,e,s,n.verbose,n.steps))}finally{Wz(a[0],e),Wz(a[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,a=e.testFunction;let r=[];if(n.verbose>0)throw new TL("Verbose mode is not implemented yet.");ow(!s||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const o="function"==typeof t.next?t:await t.iterator();let i=0,l=0;for(;!s||l<n.batches;){const t=await o.next();if(r=ST((()=>{if(t.value){const{xs:n,ys:s}=_z(e,t.value),o=n.concat(s),u=ST((()=>a(o)));if(CT(o),0===l)for(let e=0;e<u.length;++e)r.push(xR(0));const c=o[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=r[e];r[e]=ST((()=>ET(r[e],_T(c,t)))),l>0&&CT(n)}CT(u),i+=c,++l}return r})),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<r.length;++e){const t=r[e];r[e]=AT(r[e],i),CT(t)}return OL(r)}(this,e,t)}checkNumSamples(e,t,n,s="steps"){let a;if(null!=n){if(a=null,null!=t)throw new $L(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new $L(`Either the input data should have a defined shape, or ${s} shoud be specified.`);a=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return a}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new $L("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=n?t:[t],a=this.retrieveSymbolicTensors(s),r=new IP;if(e instanceof HC&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new $L(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)r.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new $L(`No value is provided for the model's input ${t.name}`);r.add(t,n)}const o=CP(a,r);return n?o:o[0]}retrieveSymbolicTensors(e){const t=AL(null,e.length);let n=e.length;for(const s of this.layers){const a=Array.isArray(s.output)?s.output:[s.output],r=a.map((e=>e.name));for(let s=0;s<e.length;++s){const o=r.indexOf(e[s]);if(-1!==o&&(t[s]=a[o],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,s)=>{null==t&&n.push(e[s])})),new $L(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return ST((()=>{const s=this.checkNumSamples(e);if(n)throw new TL("Verbose predictLoop() is not implemented yet.");const a=Pz(s,t),r=this.outputs.map((e=>[]));for(let t=0;t<a.length;++t){ST((()=>{const n=a[t][0],s=a[t][1],r=Lz(e,n,s),o=[];if(Array.isArray(r))for(let e=0;e<r.length;++e)o.push({key:this.inputs[e],value:r[e]});else o.push({key:this.inputs[0],value:r});const i=new IP(o);return CP(this.outputs,i)})).forEach(((e,t)=>r[t].push(e)))}return OL(r.map((e=>cE(e,0))))}))}predict(e,t={}){const n=zz(e);Hz(n,this.inputNames,this.feedInputShapes,!1);try{const e=null==t.batchSize?32:t.batchSize;return Mz(e),this.predictLoop(n,e)}finally{Wz(n,e)}}predictOnBatch(e){Hz(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new CL("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const a=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===sz?a.push(t.slice(0,t.length-1).concat([1])):a.push(t)}if(function(e,t,n){const s=UL(e.map((e=>e.shape[0])));s.sort();const a=UL(t.map((e=>e.shape[0])));if(a.sort(),s.length>1)throw new $L(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(a.length>1)throw new $L(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(s.length>0&&a.length>0&&!cw(s,a))throw new $L(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${a[0]} target sample(s).`)}(e=Gz(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=Gz(t,this.feedOutputNames,a,!1,"target")),function(e,t,n){const s=[QP,az,nz];for(let a=0;a<e.length;++a){const r=e[a],o=t[a],i=n[a];if(null!=o){if(o===nz&&1===r.shape[r.shape.length-1])throw new $L(`You are passing a target array of shape ${r.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(o)){const e=r.shape.slice(1),t=i.slice(1);for(let n=0;n<e.length;++n){const s=e[n],a=t[n];if(null!=a&&s!==a)throw new $L(`A target Tensor with shape ${r.shape} was passed for an output of shape ${i}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new $L(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s,a=!0,r){const[o,i]=this.standardizeUserDataXY(e,t,a,r);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=Ez(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await Rz(i[t],null,e[t]))}return[o,i,l]}testLoop(e,t,n,s=0,a){return ST((()=>{const r=this.checkNumSamples(t,n,a,"steps"),o=[];if(s>0)throw new TL("Verbose mode is not implemented yet.");if(null!=a)throw new TL("steps mode in testLoop() is not implemented yet");{const s=Pz(r,n),a=v_(yB(0,r));for(let n=0;n<s.length;++n){const r=s[n][0],i=s[n][1],l=NB(a,r,i-r),u=Bz(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)o.push(xR(0));for(let e=0;e<c.length;++e){const t=c[e];o[e]=ET(o[e],_T(i-r,t))}}for(let e=0;e<o.length;++e)o[e]=AT(o[e],r)}return o}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let a=s;if(FL(e,s)>1){a+=`_${FL(e.slice(0,n),s)}`}t.push(a)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),r=[],o=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const o=new IP(e),i=CP(this.outputs,o,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(s[e],i[e]);null!=a[e]&&(n=Az(n,a[e]));const r=oA(n);t.push(r),l=0===e?n:ET(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],a=this.metricsTensors[e][1];n=oA(t(s[a],i[a]))}$T(n),r.push(n)}return l=oA(l),this.calculateLosses().forEach((e=>{l=ET(l,e)})),l}),!0,o)].concat(r)}}makeTestFunction(){this.testFunction=e=>ST((()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=[];for(let e=0;e<this.inputs.length;++e)r.push({key:this.inputs[e],value:s[e]});const o=new IP(r),i=CP(this.outputs,o);for(let e=0;e<this.lossFunctions.length;++e){const s=this.lossFunctions[e],r=oA(s(a[e],i[e]));n=0===e?r:ET(n,r),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],s=this.metricsTensors[e][1],r=oA(n(a[s],i[s]));t.push(r)}return t}))}async fit(e,t,n={}){if(this.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,a,r,o,i,l,u,c,h;this.isTraining=!0;try{const d=null==n.batchSize?32:n.batchSize;Mz(d);const p=!1,f=await this.standardizeUserData(e,t,n.sampleWeight,n.classWeight,p,d);s=f[0],a=f[1],h=f[2];let m,g=!1;if(null!=n.validationData&&n.validationData.length>0){if(g=!0,2!==n.validationData.length)throw 3===n.validationData.length?new TL("validationData including sample weights is not supported yet."):new $L(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${n.validationData} is invalid.`);i=n.validationData[0],l=n.validationData[1];const e=!0,t=await this.standardizeUserData(i,l,null,null,e,d);u=t[0],c=t[1],m=u.concat(c)}else if(null!=n.validationSplit&&n.validationSplit>0&&n.validationSplit<1){g=!0;const e=Math.floor(s[0].shape[0]*(1-n.validationSplit)),t=s[0].shape[0];u=Lz(s,e,t),r=s,s=Lz(s,0,e),c=Lz(a,e,t),o=a,a=Lz(a,0,e),m=u.concat(c)}else null!=n.validationSteps&&(g=!0);const x=s.concat(a).concat(h);this.checkTrainableWeightsConsistency();const b=this.makeTrainFunction(),y=this.getDedupedMetricsNames();let v,k;g?(this.makeTestFunction(),v=this.testFunction,k=y.slice().concat(y.map((e=>"val_"+e)))):(v=null,m=[],k=y.slice());const w=KP(n.callbacks,n.yieldEvery);return await this.fitLoop(b,x,y,d,n.epochs,n.verbose,w,v,m,n.shuffle,k,n.initialEpoch,null,null)}finally{this.isTraining=!1,Wz(s,e),Wz(a,t),Wz(r,e),Wz(o,t),Wz(u,i),Wz(c,l),null!=h&&CT(h)}}async fitLoop(e,t,n,s,a,r,o,i,l,u,c,h,d,p){null==s&&(s=32),null==a&&(a=1),null==u&&(u=!0),null==h&&(h=0);let f=!1;if(null!=i&&null!=l&&(f=!0),null!=p&&(f=!0,null==d))throw new $L("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const m=this.checkNumSamples(t,s,d,"steps_per_epoch");let g;null!=m&&(g=yB(0,m)),null==r&&(r=1);const{callbackList:x,history:b}=YP(o,r,a,h,m,d,s,f,c);x.setModel(this),this.history=b,await x.onTrainBegin(),this.stopTraining_=!1;for(let r=h;r<a;++r){await x.onEpochBegin(r);const a={};if(null!=d)throw new TL("stepsPerEpoch mode is not implemented yet.");{if("batch"===u)throw new TL("batch shuffling is not implemneted yet");u&&nw(g);const r=v_(g),o=Pz(m,s);for(let u=0;u<o.length;++u){const c={};if(await x.onBatchBegin(u,c),ST((()=>{const h=o[u][0],d=o[u][1],p=NB(r,h,d-h);c.batch=u,c.size=d-h;const m=Bz(t,p),g=e(m);for(let e=0;e<n.length;++e){const t=n[e],s=g[e];c[t]=s,$T(s)}if(u===o.length-1&&f){const e=this.testLoop(i,l,s);for(let t=0;t<n.length;++t){const s=n[t],r=e[t];$T(r),a["val_"+s]=r}}})),await x.onBatchEnd(u,c),WP(c),this.stopTraining_)break}r.dispose()}if(await x.onEpochEnd(r,a),this.stopTraining_)break}return await x.onTrainEnd(),await this.history.syncData(),this.history}async fitDataset(e,t){return Oz(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],a=n[1],r=this.makeTrainFunction()(s.concat(a)),o=[];for(const e of r){const t=await e.data();o.push(t[0])}return CT(r),Wz(n[0],e),Wz(n[1],t),OL(o)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,a=this.getWeights(n);for(let e=0;e<s.length;++e)n&&!s[e].trainable||t.push({name:s[e].originalName,tensor:a[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=NT().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-NT().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=ML(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>ML(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=ML(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[ML(gz(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>ML(gz(e))));{const e={};for(const t in this.metrics)e[t]=ML(gz(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=ZP(Sz(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=LL(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>LL(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=LL(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map((e=>LL(e)));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=LL(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"==typeof e){const t=U$(e);if(0===t.length)throw new $L(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new $L(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new $L("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await E$(this.getNamedWeights(t)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${$z}`,convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:a}=await E$(await this.optimizer.getWeights(),e);n.specs.push(...a),n.data=O$([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;bz(this.userDefinedMetadata,this.name,e),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=n.data,s.weightSpecs=n.specs,e.save(s)}setUserDefinedMetadata(e){bz(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}jz.className="Model",iO(jz);class Xz extends jz{}Xz.className="Functional",iO(Xz);class Kz extends jz{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:QL("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new $L(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Kz||e instanceof jz;let n;if(t){if(n=e,1!==n.outputs.length)throw new $L("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new $L("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new $L("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=function(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new $L("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new wP({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new $L(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new $L("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=kP(this.outputs[0])}this.inboundNodes=[],new bP({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:AL(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(uP(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new jz({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new CL("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new CL("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new CL("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new CL("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let a,r={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new $L("Legacy serialization format not supported yet.");a=t}else ow(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),a=t.layers,delete t.layers,r=t;const o=new e(r);if(!(o instanceof Kz))throw new TL(`Sequential.fromConfig called on non-Sequential input: ${o}`);for(const e of a){const t=ZP(e,void 0,s);s&&t.setFastWeightInitDuringBuild(!0),o.add(t)}return o}set stopTraining(e){if(null==this.model)throw new $L("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new $L("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}Kz.className="Sequential",iO(Kz);class qz extends rO{getConfig(){return{}}}class Yz extends qz{apply(e,t=1){return function(e,t=1){if(1!==t)throw new TL(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return sR(e)}(e,t)}}Yz.className="elu",iO(Yz);class Zz extends qz{apply(e){return JA(e)}}Zz.className="selu",iO(Zz);class Jz extends qz{apply(e){return UA(e)}}Jz.className="relu",iO(Jz);class Qz extends qz{apply(e){return ST((()=>uA(6,UA(e))))}}Qz.className="relu6",iO(Qz);class eW extends qz{apply(e){return e}}eW.className="linear",iO(eW);class tW extends qz{apply(e){return dE(e)}}tW.className="sigmoid",iO(tW);class nW extends qz{apply(e){return function(e){return ST((()=>{const t=ET(.5,_T(.2,e));return $E(t,0,1)}))}(e)}}nW.className="hardSigmoid",iO(nW);class sW extends qz{apply(e){return HR(e)}}sW.className="softplus",iO(sW);class aW extends qz{apply(e){return function(e){return ST((()=>AT(e,ET(FT(e),1))))}(e)}}aW.className="softsign",iO(aW);class rW extends qz{apply(e){return fE(e)}}rW.className="tanh",iO(rW);class oW extends qz{apply(e,t=-1){return l_(e,t)}}oW.className="softmax",iO(oW);class iW extends qz{apply(e,t=-1){return KR(e,t)}}iW.className="logSoftmax",iO(iW);class lW extends qz{apply(e,t=1){return ST((()=>_T(dE(_T(e,t)),e)))}}lW.className="swish",iO(lW);class uW extends qz{apply(e){return ST((()=>_T(e,fE(HR(e)))))}}function cW(e){return e.getClassName()}function hW(e,t={}){return WL(e,oO.getMap().classNameMap,t,"activation")}function dW(e){if(null==e){const e={className:"linear",config:{}};return hW(e)}if("string"==typeof e){const t={};return t.className=e,t.config={},hW(t)}return e instanceof qz?e:hW(e)}uW.className="mish",iO(uW);class pW extends rO{}class fW extends pW{constructor(e){super(),function(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return ST((()=>{let t=iA([1]);return this.hasL1&&(t=ET(t,vR(_T(this.l1,FT(e))))),this.hasL2&&(t=ET(t,vR(_T(this.l2,FB(e))))),iE(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}fW.className="L1L2",iO(fW);const mW={l1l2:"L1L2"};function gW(e){return PL(e)}function xW(e,t={}){return WL(e,oO.getMap().classNameMap,t,"regularizer")}function bW(e){if(null==e)return null;if("string"==typeof e){return xW({className:e in mW?mW[e]:e,config:{}})}return e instanceof pW?e:xW(e)}class yW extends vP{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=lP(e);let n=UA(e);return null!=this.maxValue&&(n=$E(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}yW.className="ReLU",iO(yW);class vW extends vP{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=lP(e);return LR(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}vW.className="LeakyReLU",iO(vW);class kW extends vP{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=rP(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=bW(e.alphaRegularizer),this.alphaConstraint=PP(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new $L(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=uP(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new mP({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=lP(e),CA(e,this.alpha.read())}getConfig(){const e={alphaInitializer:aP(this.alphaInitializer),alphaRegularizer:gW(this.alphaRegularizer),alphaConstraint:LP(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}kW.className="PReLU",iO(kW);class wW extends vP{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new TL(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=lP(e);return sR(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}wW.className="ELU",iO(wW);class IW extends vP{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=lP(e);return _T(n,vT(AR(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}IW.className="ThresholdedReLU",iO(IW);class NW extends vP{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new oW).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){return ST((()=>{let n=lP(e);const s=t.mask;if(null!=s){const e=_T(XR(lA(n.shape),vT(s,n.dtype)),xR(-1e9));n=ET(n,e)}return this.axis instanceof Array?this.axis.length>1?NR(XR(n,qR(n,this.axis,!0))):this.softmax(n,this.axis[0]):this.softmax(n,this.axis)}))}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function SW(e,t,n){if("number"==typeof e)return AL(e,t);if(e.length!==t)throw new $L(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let a=0;a<t;++a){const r=e[a];if((s=r)!==parseInt(s.toString(),10))throw new $L(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${r}`)}return e;var s}function CW(e,t,n,s,a=1){if(null==e)return e;let r;return r="same"===n?e:e-(t+(t-1)*(a-1))+1,Math.floor((r+s-1)/s)}function $W(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+bB([n-t,0]);else{if("same"!==s)throw new $L(`Unsupport padding mode: ${s}.`);e*=t}return e}function TW(e,t){return ST((()=>(oB(t),"channelsFirst"===t?M_(e,[0,2,3,1]):e)))}function EW(e,t){return ST((()=>(oB(t),"channelsFirst"===t?M_(e,[0,2,3,4,1]):e)))}function RW(e,t,n,s=[1,1],a="valid",r,o,i=null){return ST((()=>{if(null==r&&(r="channelsLast"),oB(r),3!==e.rank&&4!==e.rank)throw new $L(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new $L(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=TW(e,r);if("causal"===a)throw new TL("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Y_({x:l,filter:t,strides:s,pad:"same"===a?"same":"valid",dilations:o,dataFormat:"NHWC",bias:n,activation:i}),"channelsFirst"===r&&(l=M_(l,[0,3,1,2])),l}))}NW.className="Softmax",iO(NW);class AW extends vP{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",AW.verifyArgs(t),this.rank=e,XL(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new TL(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=SW(t.kernelSize,e,"kernelSize"),this.strides=SW(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,iB(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,oB(this.dataFormat),this.activation=dW(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=rP(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=PP(t.biasConstraint),this.biasRegularizer=bW(t.biasRegularizer),this.activityRegularizer=bW(t.activityRegularizer),this.dilationRate=SW(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new $L(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new $L(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new $L(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(_L("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!jL(e.kernelSize,"number",1,3))throw new $L(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:cW(this.activation),useBias:this.useBias,biasInitializer:aP(this.biasInitializer),biasRegularizer:gW(this.biasRegularizer),activityRegularizer:gW(this.activityRegularizer),biasConstraint:LP(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class _W extends AW{constructor(e,t){super(e,t),this.kernel=null,_W.verifyArgs(t),this.filters=t.filters,XL(this.filters,"filters"),this.kernelInitializer=rP(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=PP(t.kernelConstraint),this.kernelRegularizer=bW(t.kernelRegularizer)}build(e){e=uP(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new $L(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return ST((()=>{let t;e=lP(e);const n=null==this.bias?null:this.bias.read(),s=qL(this.activation.getClassName());if(null!=s&&2===this.rank)t=RW(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=function(e,t,n,s=1,a="valid",r,o=1){return ST((()=>{if(null==r&&(r="channelsLast"),oB(r),3!==e.shape.length)throw new $L(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new $L(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new $L(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===r&&(e=M_(e,[0,2,1])),"causal"===a)throw new TL("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let i=FE(e,t,s,"same"===a?"same":"valid","NWC",o);return null!=n&&(i=DB(i,n)),i}))}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=RW(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new TL("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,s=[1,1,1],a="valid",r,o){return ST((()=>{if(null==r&&(r="channelsLast"),oB(r),4!==e.rank&&5!==e.rank)throw new $L(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new $L(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let i=EW(e,r);if("causal"===a)throw new TL("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return i=ME(i,t,s,"same"===a?"same":"valid","NDHWC",o),null!=n&&(i=DB(i,n)),"channelsFirst"===r&&(i=M_(i,[0,4,1,2,3])),i}))}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=uP(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const s=CW(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:aP(this.kernelInitializer),kernelRegularizer:gW(this.kernelRegularizer),kernelConstraint:LP(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new $L(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class FW extends _W{constructor(e){super(2,e),FW.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!jL(e.kernelSize,"number",1,2))throw new $L(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}FW.className="Conv2D",iO(FW);class OW extends _W{constructor(e){super(3,e),OW.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new $L(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}OW.className="Conv3D",iO(OW);class DW extends FW{constructor(e){if(super(e),this.inputSpec=[new mP({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new $L(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=uP(e)).length)throw new $L("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new $L("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new mP({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return ST((()=>{let t=lP(e);if(4!==t.shape.length)throw new $L(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let a,r;"channelsFirst"===this.dataFormat?(a=2,r=3):(a=1,r=2);const o=n[a],i=n[r],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],d=[s,$W(o,c,l,this.padding),$W(i,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=M_(t,[0,2,3,1]));let p=DE(t,this.kernel.read(),d,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(p=M_(p,[0,3,1,2])),null!=this.bias&&(p=DB(p,this.bias.read(),this.dataFormat)),null!=this.activation&&(p=this.activation.apply(p)),p}))}computeOutputShape(e){const t=(e=uP(e)).slice();let n,s,a;"channelsFirst"===this.dataFormat?(n=1,s=2,a=3):(n=3,s=1,a=2);const r=this.kernelSize[0],o=this.kernelSize[1],i=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=$W(t[s],i,r,this.padding),t[a]=$W(t[a],l,o,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}DW.className="Conv2DTranspose",iO(DW);class MW extends OW{constructor(e){if(super(e),this.inputSpec=[new mP({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new $L(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=uP(e)).length)throw new $L("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new $L("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new mP({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return ST((()=>{let t=lP(e);if(5!==t.shape.length)throw new $L(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let a,r,o;"channelsFirst"===this.dataFormat?(o=2,a=3,r=4):(o=1,a=2,r=3);const i=n[o],l=n[a],u=n[r],c=this.kernelSize[0],h=this.kernelSize[1],d=this.kernelSize[2],p=this.strides[0],f=this.strides[1],m=this.strides[2],g=[s,$W(i,p,c,this.padding),$W(l,f,h,this.padding),$W(u,m,d,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=M_(t,[0,2,3,4,1]));let x=BE(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(x=M_(x,[0,4,1,2,3])),null!==this.bias&&(x=DB(x,this.bias.read(),this.dataFormat)),null!==this.activation&&(x=this.activation.apply(x)),x}))}computeOutputShape(e){const t=(e=uP(e)).slice();let n,s,a,r;"channelsFirst"===this.dataFormat?(n=1,s=2,a=3,r=4):(n=4,s=1,a=2,r=3);const o=this.kernelSize[0],i=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],h=this.strides[2];return t[n]=this.filters,t[s]=$W(t[s],u,o,this.padding),t[a]=$W(t[a],c,i,this.padding),t[r]=$W(t[r],h,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}MW.className="Conv3DTranspose",iO(MW);class LW extends _W{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new $L("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new $L("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new $L(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=rP(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=bW(t.depthwiseRegularizer),this.depthwiseConstraint=PP(t.depthwiseConstraint),this.pointwiseInitializer=rP(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=bW(t.pointwiseRegularizer),this.pointwiseConstraint=PP(t.pointwiseConstraint)}build(e){if((e=uP(e)).length<this.rank+2)throw new $L(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new $L(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),a=[];for(let e=0;e<this.rank;++e)a.push(1);a.push(n*this.depthMultiplier,this.filters);const r=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,r,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,r,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,r,this.biasConstraint):this.bias=null,this.inputSpec=[new mP({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return ST((()=>{let t;if(e=lP(e),1===this.rank)throw new TL("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=M_(e,[0,2,3,1])),t=QA(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=DB(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=M_(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=aP(this.depthwiseInitializer),e.pointwiseInitializer=aP(this.pointwiseInitializer),e.depthwiseRegularizer=gW(this.depthwiseRegularizer),e.pointwiseRegularizer=gW(this.pointwiseRegularizer),e.depthwiseConstraint=LP(this.depthwiseConstraint),e.pointwiseConstraint=LP(this.pointwiseConstraint),e}}LW.className="SeparableConv";class BW extends LW{constructor(e){super(2,e)}}BW.className="SeparableConv2D",iO(BW);class PW extends _W{constructor(e){super(1,e),PW.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!jL(e.kernelSize,"number",1,1))throw new $L(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}PW.className="Conv1D",iO(PW);class zW extends vP{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return ST((()=>{if(e=lP(e),"channelsLast"===this.dataFormat){const t=CB(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return CB(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=CB(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return CB(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}zW.className="Cropping2D",iO(zW);class WW extends vP{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,oB(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,HL(tB,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return ST((()=>{let t=lP(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=M_(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],a="nearest"===this.interpolation?JF.resizeNearestNeighbor(t,[e,s]):JF.resizeBilinear(t,[e,s]);return M_(a,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?JF.resizeNearestNeighbor(t,[e,s]):JF.resizeBilinear(t,[e,s])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}WW.className="UpSampling2D",iO(WW);class VW extends AW{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=rP(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=PP(e.depthwiseConstraint),this.depthwiseRegularizer=bW(e.depthwiseRegularizer)}build(e){if((e=uP(e)).length<4)throw new $L(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new $L(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return ST((()=>{let t=function(e,t,n=[1,1],s="valid",a,r){return ST((()=>{null==a&&(a="channelsLast"),oB(a);let o=TW(e,a);if(4!==e.rank)throw new $L(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new $L(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return o=HE(o,t,n,"same"===s?"same":"valid","NHWC",r),"channelsFirst"===a&&(o=M_(o,[0,3,1,2])),o}))}(e=lP(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=DB(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=uP(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,a=CW(t,this.kernelSize[0],this.padding,this.strides[0]),r=CW(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,a,r]:[e[0],a,r,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=aP(this.depthwiseInitializer),e.depthwiseRegularizer=gW(this.depthwiseRegularizer),e.depthwiseConstraint=LP(this.depthwiseRegularizer),e}}function UW(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new $L("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function a(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=a(t),constants:n=a(n)}}function GW(e,t,n,s=!1,a,r,o=!1,i=!1){return ST((()=>{const l=t.shape.length;if(l<3)throw new $L(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(yB(2,l));if(t=M_(t,u),null!=r)throw new TL("The rnn() functoin of the deeplearn.js backend does not support constants yet.");o&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=a&&((a=vT(vT(a,"bool"),"float32")).rank===l-1&&(a=SR(a,-1)),a=M_(a,u)),s&&(t=HA(t,0),null!=a&&(a=HA(a,0)));const c=[];let h,d=n;const p=t.shape[0],f=A_(t);let m,g;null!=a&&(m=A_(a));for(let t=0;t<p;++t){const n=f[t],s=ST((()=>e(n,d)));if(null==a)h=s[0],d=s[1];else{const e=ST((()=>{const e=m[t],n=XR(xA(e),e);return{output:ET(_T(s[0],e),_T(d[0],n)),newStates:d.map(((t,a)=>ET(_T(s[1][a],e),_T(t,n))))}}));h=e.output,d=e.newStates}i&&c.push(h)}if(i){g=g_(c,1)}return[h,g,d]}))}VW.className="DepthwiseConv2D",iO(VW);class HW extends vP{constructor(e){let t;if(super(e),null==e.cell)throw new $L("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new QW({cells:e.cell}):e.cell,null==t.stateSize)throw new $L("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new mP({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return yB(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null))}return this.states_}setStates(e){this.states_=e}computeOutputShape(e){oP(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return ST((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new TL("Constants support is not implemented in RNN yet.");oP(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new mP({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let a;if(this.cell.build(s),a=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!cw(this.stateSpec.map((e=>e.shape[e.shape.length-1])),a))throw new $L(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=a.map((e=>new mP({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){ST((()=>{if(!this.stateful)throw new SL("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new $L("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>iA([n,e]))):this.states_=[iA([n,this.cell.stateSize])];else if(null==e)CT(this.states_),null!=this.keptStates&&(CT(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>iA([n,e]))):this.states_[0]=iA([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new $L(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):CT(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],a=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,r=[n,a];if(!cw(s.shape,r))throw new $L(`State ${t} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map((e=>$T(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const a=UW(e,n,s,this.numConstants);e=a.inputs,n=a.initialState,s=a.constants;let r=[],o=[];if(null!=n){t.initialState=n,r=r.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new mP({shape:e.shape}));o=o.concat(this.stateSpec)}null!=s&&(t.constants=s,r=r.concat(s),this.numConstants=s.length);if(r[0]instanceof gP){const n=[e].concat(r),s=this.inputSpec.concat(o),a=this.inputSpec;this.inputSpec=s;const i=super.apply(n,t);return this.inputSpec=a,i}return super.apply(e,t)}call(e,t){return ST((()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let a=null==t?null:t.initialState;e=lP(e),null==a&&(a=this.stateful?this.states_:this.getInitialState(e));const r=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(a.length!==r)throw new $L(`RNN Layer has ${r} state(s) but was passed ${a.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const o={training:s},i=GW(((e,t)=>{const n=this.cell.call([e].concat(t),o);return[n[0],n.slice(1)]}),e,a,this.goBackwards,n,null,this.unroll,this.returnSequences),l=i[0],u=i[1],c=i[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(e){return ST((()=>{let t=iA(e.shape);return t=vR(t,[1,2]),t=IB(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?EB(t,[1,e]):t)):this.cell.stateSize>1?[EB(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===HW.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign(Object.assign(Object.assign({},n),e),t)}static fromConfig(e,t,n={}){const s=ZP(t.cell,n);return new e(Object.assign(t,{cell:s}))}}HW.className="RNN",iO(HW);class jW extends vP{}class XW extends jW{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,XL(this.units,"units"),this.activation=dW(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=rP(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=rP(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=rP(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=bW(e.kernelRegularizer),this.recurrentRegularizer=bW(e.recurrentRegularizer),this.biasRegularizer=bW(e.biasRegularizer),this.kernelConstraint=PP(e.kernelConstraint),this.recurrentConstraint=PP(e.recurrentConstraint),this.biasConstraint=PP(e.biasConstraint),this.dropout=xB([1,bB([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=xB([1,bB([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=uP(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return ST((()=>{if(2!==e.length)throw new $L(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let a;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=eV({ones:()=>xA(e),rate:this.dropout,training:s,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=eV({ones:()=>xA(n),rate:this.recurrentDropout,training:s,dropoutFunc:this.dropoutFunc}));const r=this.dropoutMask,o=this.recurrentDropoutMask;a=AB(null!=r?_T(e,r):e,this.kernel.read()),null!=this.bias&&(a=DB(a,this.bias.read())),null!=o&&(n=_T(n,o));let i=ET(a,AB(n,this.recurrentKernel.read()));return null!=this.activation&&(i=this.activation.apply(i)),[i,i]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:cW(this.activation),useBias:this.useBias,kernelInitializer:aP(this.kernelInitializer),recurrentInitializer:aP(this.recurrentInitializer),biasInitializer:aP(this.biasInitializer),kernelRegularizer:gW(this.kernelRegularizer),recurrentRegularizer:gW(this.recurrentRegularizer),biasRegularizer:gW(this.biasRegularizer),activityRegularizer:gW(this.activityRegularizer),kernelConstraint:LP(this.kernelConstraint),recurrentConstraint:LP(this.recurrentConstraint),biasConstraint:LP(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),t)}}XW.className="SimpleRNNCell",iO(XW);class KW extends HW{constructor(e){e.cell=new XW(e),super(e)}call(e,t){return ST((()=>{null!=this.cell.dropoutMask&&(CT(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(CT(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})}))}static fromConfig(e,t){return new e(t)}}KW.className="SimpleRNN",iO(KW);class qW extends jW{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new $L("GRUCell does not support reset_after parameter set to true.");this.units=e.units,XL(this.units,"units"),this.activation=dW(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=dW(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=rP(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=rP(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=rP(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=bW(e.kernelRegularizer),this.recurrentRegularizer=bW(e.recurrentRegularizer),this.biasRegularizer=bW(e.biasRegularizer),this.kernelConstraint=PP(e.kernelConstraint),this.recurrentConstraint=PP(e.recurrentConstraint),this.biasConstraint=PP(e.biasConstraint),this.dropout=xB([1,bB([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=xB([1,bB([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=uP(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return ST((()=>{if(2!==e.length)throw new $L(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=eV({ones:()=>xA(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=eV({ones:()=>xA(s),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,r=this.recurrentDropoutMask;let o,i,l;0<this.dropout&&this.dropout<1&&(e=_T(e,a[0]));let u=AB(e,this.kernel.read());this.useBias&&(u=DB(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=_T(s,r[0]));const c=this.recurrentKernel.read(),[h,d]=d_(c,[2*this.units,this.units],c.rank-1),p=AB(s,h),[f,m,g]=d_(u,3,u.rank-1),[x,b]=d_(p,2,p.rank-1);o=this.recurrentActivation.apply(ET(f,x)),i=this.recurrentActivation.apply(ET(m,b));const y=AB(_T(i,s),d);l=this.activation.apply(ET(g,y));const v=ET(_T(o,s),_T(ET(1,GR(o)),l));return[v,v]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:cW(this.activation),recurrentActivation:cW(this.recurrentActivation),useBias:this.useBias,kernelInitializer:aP(this.kernelInitializer),recurrentInitializer:aP(this.recurrentInitializer),biasInitializer:aP(this.biasInitializer),kernelRegularizer:gW(this.kernelRegularizer),recurrentRegularizer:gW(this.recurrentRegularizer),biasRegularizer:gW(this.biasRegularizer),activityRegularizer:gW(this.activityRegularizer),kernelConstraint:LP(this.kernelConstraint),recurrentConstraint:LP(this.recurrentConstraint),biasConstraint:LP(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),t)}}qW.className="GRUCell",iO(qW);class YW extends HW{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new qW(e),super(e)}call(e,t){return ST((()=>{null!=this.cell.dropoutMask&&(CT(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(CT(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}YW.className="GRU",iO(YW);class ZW extends jW{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,XL(this.units,"units"),this.activation=dW(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=dW(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=rP(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=rP(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=rP(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=bW(e.kernelRegularizer),this.recurrentRegularizer=bW(e.recurrentRegularizer),this.biasRegularizer=bW(e.biasRegularizer),this.kernelConstraint=PP(e.kernelConstraint),this.recurrentConstraint=PP(e.recurrentConstraint),this.biasConstraint=PP(e.biasConstraint),this.dropout=xB([1,bB([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=xB([1,bB([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=uP(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends zB{apply(t,s){const a=e.apply([n]),r=(new VB).apply([n]),o=e.apply([2*n]);return TB(TB(a,r),o)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return ST((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new $L(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const a=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=eV({ones:()=>xA(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=eV({ones:()=>xA(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const r=this.dropoutMask,o=this.recurrentDropoutMask;let i,l,u,c;0<this.dropout&&this.dropout<1&&(e=_T(e,r[0]));let h=AB(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=_T(s,o[0])),h=ET(h,AB(s,this.recurrentKernel.read())),this.useBias&&(h=DB(h,this.bias.read()));const[d,p,f,m]=d_(h,4,h.rank-1);i=this.recurrentActivation.apply(d),l=this.recurrentActivation.apply(p),u=ET(_T(l,a),_T(i,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=_T(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:cW(this.activation),recurrentActivation:cW(this.recurrentActivation),useBias:this.useBias,kernelInitializer:aP(this.kernelInitializer),recurrentInitializer:aP(this.recurrentInitializer),biasInitializer:aP(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:gW(this.kernelRegularizer),recurrentRegularizer:gW(this.recurrentRegularizer),biasRegularizer:gW(this.biasRegularizer),activityRegularizer:gW(this.activityRegularizer),kernelConstraint:LP(this.kernelConstraint),recurrentConstraint:LP(this.recurrentConstraint),biasConstraint:LP(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),t)}}ZW.className="LSTMCell",iO(ZW);class JW extends HW{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new ZW(e),super(e)}call(e,t){return ST((()=>{null!=this.cell.dropoutMask&&(CT(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(CT(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}JW.className="LSTM",iO(JW);class QW extends jW{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return ST((()=>{let n=e.slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const a=[];let r;for(let o=0;o<this.cells.length;++o){const i=this.cells[o];n=s[o],r=0===o?[e[0]].concat(n):[r[0]].concat(n),r=i.call(r,t),a.push(r.slice(1))}n=[];for(const e of a.slice().reverse())n.push(...e);return[r[0]].concat(n)}))}build(e){let t;oP(e)&&(e=e[0]),this.cells.forEach(((n,s)=>{hB(`RNNCell_${s}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign(Object.assign({},e),t)}static fromConfig(e,t,n={}){const s=[];for(const e of t.cells)s.push(ZP(e,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return pP(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,a=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],a[e]])}fP(t)}}function eV(e){const{ones:t,rate:n,training:s=!1,count:a=1,dropoutFunc:r}=e,o=()=>null!=r?r(t(),n):MB(t(),n),i=()=>LB(o,t,s);if(!a||a<=1)return $T(i().clone());return Array(a).fill(void 0).map(i).map((e=>$T(e.clone())))}QW.className="StackedRNNCells",iO(QW);var tV=window&&window.__rest||function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(s=Object.getOwnPropertySymbols(e);a<s.length;a++)t.indexOf(s[a])<0&&Object.prototype.propertyIsEnumerable.call(e,s[a])&&(n[s[a]]=e[s[a]])}return n};class nV extends HW{constructor(e){if(e.unroll)throw new TL("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new TL("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new mP({ndim:5})]}call(e,t){return ST((()=>{if(null!=this.cell.dropoutMask&&(CT(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(CT(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new $L("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return ST((()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),a=iA([s[0],...s.slice(2)]);return Array.isArray(t)?Array(t.length).fill(a):[a]}))}resetStates(e,t=!1){ST((()=>{if(!this.stateful)throw new SL("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),a=[s[0],...s.slice(2)];if(null==n[0])throw new $L("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>iA(a))):this.states_=[iA(a)];else if(null==e)CT(this.states_),null!=this.keptStates&&(CT(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>iA(a))):this.states_[0]=iA(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new $L(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):CT(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=a;if(!cw(n.shape,s))throw new $L(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>$T(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:a,strides:r,dilationRate:o}=this.cell,i="channelsFirst"===t,l=e[i?3:2],u=e[i?4:3],c=CW(l,s[0],a,r[0],o[0]),h=CW(u,s[1],a,r[1],o[1]);return[...e.slice(0,2),...i?[n,c,h]:[c,h,n]]}}nV.className="ConvRNN2D";class sV extends ZW{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:a,dataFormat:r,dilationRate:o}=e;super(Object.assign(Object.assign({},e),{units:t})),this.filters=t,XL(this.filters,"filters"),this.kernelSize=SW(n,2,"kernelSize"),this.kernelSize.forEach((e=>XL(e,"kernelSize"))),this.strides=SW(s||1,2,"strides"),this.strides.forEach((e=>XL(e,"strides"))),this.padding=a||"valid",iB(this.padding),this.dataFormat=r||"channelsLast",oB(this.dataFormat),this.dilationRate=SW(o||1,2,"dilationRate"),this.dilationRate.forEach((e=>XL(e,"dilationRate")))}build(e){var t;e=uP(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new $L(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=e[n],a=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",a,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const r=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",r,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends zB{apply(e,t){return $B([n.apply([s]),lA([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return ST((()=>{if(3!==e.length)throw new $L(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],a=e[1],r=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=eV({ones:()=>xA(s),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const o=this.dropoutMask,i=(e,t,n)=>t&&t[n]?_T(t[n],e):e;let l=i(s,o,0),u=i(s,o,1),c=i(s,o,2),h=i(s,o,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=eV({ones:()=>xA(a),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const d=this.recurrentDropoutMask;let p=i(a,d,0),f=i(a,d,1),m=i(a,d,2),g=i(a,d,3);const[x,b,y,v]=d_(this.kernel.read(),4,3),[k,w,I,N]=this.useBias?d_(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,x,k,this.padding),u=this.inputConv(u,b,w,this.padding),c=this.inputConv(c,y,I,this.padding),h=this.inputConv(h,v,N,this.padding);const[S,C,$,T]=d_(this.recurrentKernel.read(),4,3);p=this.recurrentConv(p,S),f=this.recurrentConv(f,C),m=this.recurrentConv(m,$),g=this.recurrentConv(g,T);const E=this.recurrentActivation.apply(ET(l,p)),R=this.recurrentActivation.apply(ET(u,f)),A=ET(_T(R,r),_T(E,this.activation.apply(ET(c,m)))),_=_T(this.recurrentActivation.apply(ET(h,g)),this.activation.apply(A));return[_,_,A]}))}getConfig(){const e=super.getConfig(),t=tV(e,["units"]),n={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},t),n)}inputConv(e,t,n,s){const a=_E(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?DB(a,n,this.dataFormat):a}recurrentConv(e,t){return _E(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}sV.className="ConvLSTM2DCell",iO(sV);class aV extends nV{constructor(e){const t=new sV(e);super(Object.assign(Object.assign({},e),{cell:t}))}static fromConfig(e,t){return new e(t)}}aV.className="ConvLSTM2D",iO(aV);class rV extends vP{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return ST((()=>{this.invokeCallHook(e,t);const n=lP(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return LB((()=>MB(n,this.rate,s,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}rV.className="Dropout",iO(rV);class oV extends rV{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}oV.className="SpatialDropout1D",iO(oV);class iV extends vP{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,XL(this.units,"units"),this.activation=dW(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=rP(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=rP(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=PP(e.kernelConstraint),this.biasConstraint=PP(e.biasConstraint),this.kernelRegularizer=bW(e.kernelRegularizer),this.biasRegularizer=bW(e.biasRegularizer),this.activityRegularizer=bW(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=uP(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=uP(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return ST((()=>{this.invokeCallHook(e,t);const n=lP(e),s=qL(this.activation.getClassName());let a;return null!=s?a=AB(n,this.kernel.read(),s,this.bias?this.bias.read():null):(a=AB(n,this.kernel.read()),null!=this.bias&&(a=DB(a,this.bias.read())),null!=this.activation&&(a=this.activation.apply(a))),a}))}getConfig(){const e={units:this.units,activation:cW(this.activation),useBias:this.useBias,kernelInitializer:aP(this.kernelInitializer),biasInitializer:aP(this.biasInitializer),kernelRegularizer:gW(this.kernelRegularizer),biasRegularizer:gW(this.biasRegularizer),activityRegularizer:gW(this.activityRegularizer),kernelConstraint:LP(this.kernelConstraint),biasConstraint:LP(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}iV.className="Dense",iO(iV);class lV extends vP{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=uP(e);for(const t of e.slice(1))if(null==t)throw new $L(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],gB(e,1)]}call(e,t){return ST((()=>{this.invokeCallHook(e,t);let n=lP(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=M_(n,e)}return function(e){if(e.rank<=1)throw new $L(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],gB(e.shape,1)];return iE(e,t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}lV.className="Flatten",iO(lV);class uV extends vP{constructor(e){super(e),this.supportsMasking=!0,this.activation=dW(e.activation)}call(e,t){return ST((()=>{this.invokeCallHook(e,t);const n=lP(e);return this.activation.apply(n)}))}getConfig(){const e={activation:cW(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}uV.className="Activation",iO(uV);class cV extends vP{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return ST((()=>{return e=lP(e),t=e,n=this.n,ST((()=>{if(2!==t.shape.length)throw new $L(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return EB(IB(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}cV.className="RepeatVector",iO(cV);class hV extends vP{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let a=1,r=null;for(let e=0;e<s.length;++e){const t=s[e];if(this.isUnknown(t)){if(null!==r)throw new $L("Can only specifiy one unknown dimension.");r=e}else a*=t}const o=gB(e);if(null!==r){if(0===a||o%a!=0)throw new $L(n);s[r]=o/a}else if(o!==a)throw new $L(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return ST((()=>{this.invokeCallHook(e,t);const n=lP(e),s=n.shape,a=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return iE(n,a)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}hV.className="Reshape",iO(hV);class dV extends vP{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=yB(1,e.dims.length+1);if(!cw(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new mP({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=uP(e)).slice();return this.dims.forEach(((n,s)=>{t[s+1]=e[n]})),t}call(e,t){return M_(lP(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}dV.className="Permute",iO(dV);class pV extends vP{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=lP(e);return BT(mA(n,this.maskValue),-1)}call(e,t){return ST((()=>{this.invokeCallHook(e,t);const n=lP(e),s=BT(mA(n,this.maskValue),-1,!0);return _T(n,vT(s,n.dtype))}))}}pV.className="Masking",iO(pV);class fV extends vP{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(DL(e.inputLength))}this.inputDim=e.inputDim,XL(this.inputDim,"inputDim"),this.outputDim=e.outputDim,XL(this.outputDim,"outputDim"),this.embeddingsInitializer=rP(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=bW(e.embeddingsRegularizer),this.activityRegularizer=bW(e.activityRegularizer),this.embeddingsConstraint=PP(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return ST((()=>this.maskZero?(e=lP(e),mA(e,QE(e))):null))}computeOutputShape(e){if(e=uP(e),null==this.inputLength)return[...e,this.outputDim];const t=DL(this.inputLength);if(t.length!==e.length-1)throw new $L(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const a=t[s],r=e[s+1];if(null!=a&&null!=r&&a!==r)throw new $L(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==a&&(t[n]=r),n++}}return[e[0],...t,this.outputDim]}call(e,t){return ST((()=>{this.invokeCallHook(e,t);let n=lP(e);"int32"!==n.dtype&&(n=wB(n,"int32"));const s=_B(this.embeddings.read(),iE(n,[n.size]));return iE(s,uP(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:aP(this.embeddingsInitializer),embeddingsRegularizer:gW(this.embeddingsRegularizer),activityRegularizer:gW(this.activityRegularizer),embeddingsConstraint:LP(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}fV.className="Embedding",iO(fV);class mV extends vP{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new TL}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const a=e[e.length-t.length+s],r=t[s];if(null==a||null==r||a<0||r<0)n.push(null);else if(1===a)n.push(r);else if(1===r)n.push(a);else{if(a!==r)throw new $L("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(a)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[uP(e)]),e.length<2)throw new $L(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=UL(t),t.length>1)throw new $L(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const s=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=e.map((e=>e.length));-1===e.indexOf(null)&&1===UL(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return ST((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const s=bB(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=IB(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const s of e){const e=s.rank;if(null==e){const e=s.shape,a=e[0],r=e.slice(1).concat([a]);let o=iE(s,[a].concat(gB(e.slice(1))));o=M_(o,[1,0]),o=iE(o,r),t.push(o),n=!0}else if(e>1){const a=yB(1,e).concat([0]);t.push(M_(s,a)),n=!0}else t.push(s)}let s=this.mergeFunction(t);const a=s.rank;if(n)if(null==a){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=iE(M_(iE(s,[-1,t]),[1,0]),n)}else if(a>1){const e=[a-1].concat(yB(0,a-1));s=M_(s,e)}return s}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const s=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=UL(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return ST((()=>{if(null==t)return null;if(!Array.isArray(t))throw new $L("`mask` should be an Array");if(!Array.isArray(e))throw new $L("`inputs` should be an Array");if(t.length!==e.length)throw new $L(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:SR(e,0))))[0];for(let e=1;e<t.length-1;++e)n=YR(n,t[e]);return n}))}}class gV extends mV{constructor(e){super(e)}mergeFunction(e){return ST((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=ET(t,e[n]);return t}))}}gV.className="Add",iO(gV);class xV extends mV{constructor(e){super(e)}mergeFunction(e){return ST((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=_T(t,e[n]);return t}))}}xV.className="Multiply",iO(xV);class bV extends mV{constructor(e){super(e)}mergeFunction(e){return ST((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=ET(t,e[n]);return _T(1/e.length,t)}))}}bV.className="Average",iO(bV);class yV extends mV{constructor(e){super(e)}mergeFunction(e){return ST((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=rA(t,e[n]);return t}))}}yV.className="Maximum",iO(yV);class vV extends mV{constructor(e){super(e)}mergeFunction(e){return ST((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=uA(t,e[n]);return t}))}}vV.className="Minimum",iO(vV);class kV extends mV{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new $L("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const s=e[t].slice();s.splice(this.axis,1);let a=!1;for(const e of n)if(cw(e,s)){a=!0;break}a||n.push(s)}if(n.length>1)throw new $L("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return ST((()=>$B(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new $L("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[s]||null==e[s]){n[s]=null;break}n[s]+=e[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new $L("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new $L("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new $L(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return ST((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const s=[];for(let n=0;n<e.length;++n)null==t[n]?s.push(vT(xA(e[n]),"bool")):t[n].rank<e[n].rank?s.push(SR(t[n],-1)):s.push(t[n]);const a=cE(s,this.axis);return LT(a,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function wV(e,t){for(;e<0;)e+=t;return e}kV.className="Concatenate",iO(kV);class IV extends mV{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){ow(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new TL("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new $L(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new $L(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>wV(t,e[n].shape.length))):[wV(this.axes,n.shape.length),wV(this.axes,s.shape.length)],this.normalize&&(n=JP(n,t[0]),s=JP(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new TL("batchDot is not implemented for tensors of 4D or higher rank yet");if(ow(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),ow(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new TL("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,a=t.shape.length;null==n&&(n=[s-1,a-2]);const r=n;return ST((()=>{let n,o;if(s>a){n=s-a;const e=[];for(let t=0;t<n;++t)e.push(1);t=iE(t,t.shape.concat(e))}else if(a>s){n=a-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=iE(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)o=r[0]===r[1]?vR(_T(e,t),r[0]):vR(_T(M_(e,[1,0]),t),r[1]);else{const n=r[0]!==e.shape.length-1,s=r[1]===t.shape.length-1;o=hE(e,t,n,s)}if(n>0){let e;e=s>a?s+a-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);o=m_(o,t)}return 1===o.shape.length&&(o=SR(o,1)),o}))}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[wV(this.axes,e.length),wV(this.axes,t.length)],n}computeOutputShape(e){ow(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new TL("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const a=t.concat(n);return 1===a.length&&a.push(1),a}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}IV.className="Dot",iO(IV);class NV extends vP{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return ST((()=>{this.invokeCallHook(e,t);const n=lP(e);return LB((()=>ET(RB(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}NV.className="GaussianNoise",iO(NV);class SV extends vP{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return ST((()=>{this.invokeCallHook(e,t);const n=lP(e);if(this.rate>0&&this.rate<1){return LB((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return _T(n,RB(n.shape,1,e))}),(()=>n),t.training||!1)}return n}))}}SV.className="GaussianDropout",iO(SV);class CV extends vP{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||lP(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return ST((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return LB((()=>{const t=lP(e),s=-1.7580993408473766;let a=_R(BA(n),this.rate);a=wB(a,"float32");const r=((1-this.rate)*(1+this.rate*s**2))**-.5,o=-r*s*this.rate,i=ET(_T(t,a),_T(ET(a,-1),s));return ET(_T(i,r),o)}),(()=>lP(e)),t.training||!1)}return e}))}}function $V(e,t,n,s,a,r=.001){let o;if(2===e.rank)o=bE(e,t,n,s,a,r);else if(3===e.rank)o=yE(e,t,n,s,a,r);else{if(4!==e.rank)throw new TL(`batchNormalization is not implemented for array of rank ${e.rank} yet`);o=vE(e,t,n,s,a,r)}return o}function TV(e,t,n,s,a=.001){return cw(s.slice().sort(),yB(0,e.rank-1))?function(e,t,n,s,a=.001){return ST((()=>{const r=dA(e,s),o=r.mean,i=r.variance;return[$V(e,o,i,n,t,a),o,i]}))}(e,t,n,s,a):function(e,t,n,s,a=.001){return ST((()=>{const r=dA(e,s),o=r.mean,i=r.variance,l=[];for(const t of yB(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=iE(o,l),c=iE(i,l),h=null==t?null:iE(t,l),d=null==n?null:iE(n,l);return[$V(e,u,c,d,h,a),o,i]}))}(e,t,n,s,a)}CV.className="AlphaDropout",iO(CV);class EV extends vP{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=rP(e.betaInitializer||"zeros"),this.gammaInitializer=rP(e.gammaInitializer||"ones"),this.movingMeanInitializer=rP(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=rP(e.movingVarianceInitializer||"ones"),this.betaConstraint=PP(e.betaConstraint),this.gammaConstraint=PP(e.gammaConstraint),this.betaRegularizer=bW(e.betaRegularizer),this.gammaRegularizer=bW(e.gammaRegularizer)}build(e){e=uP(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new $L(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new mP({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return ST((()=>{const n=null!=t.training&&t.training,s=lP(e),a=s.shape,r=a.length,o=yB(0,r),i=this.axis>=0?this.axis:this.axis+r;o.splice(i,1);const l=AL(1,r);l[i]=a[i];const u=o.slice();u.sort();const c=!cw(u,yB(0,r).slice(0,r-1));if(!n)return(()=>{if(c){const e=iE(this.movingMean.read(),l),t=iE(this.movingVariance.read(),l),n=this.center?iE(this.beta.read(),l):null,a=this.scale?iE(this.gamma.read(),l):null;return $V(s,e,t,n,a,this.epsilon)}return $V(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,d,p]=TV(s,this.gamma.read(),this.beta.read(),o,this.epsilon),f=(e,t,n)=>{ST((()=>{const s=1-n,a=e.read(),r=_T(XR(a,t),s);e.write(XR(a,r))}))};return(()=>{f(this.movingMean,d,this.momentum),f(this.movingVariance,p,this.momentum)})(),h}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:aP(this.betaInitializer),gammaInitializer:aP(this.gammaInitializer),movingMeanInitializer:aP(this.movingMeanInitializer),movingVarianceInitializer:aP(this.movingVarianceInitializer),betaRegularizer:gW(this.betaRegularizer),gammaRegularizer:gW(this.gammaRegularizer),betaConstraint:LP(this.betaConstraint),gammaConstraint:LP(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}EV.className="BatchNormalization",iO(EV);class RV extends vP{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=rP(e.betaInitializer||"zeros"),this.gammaInitializer=rP(e.gammaInitializer||"ones"),this.betaRegularizer=bW(e.betaRegularizer),this.gammaRegularizer=bW(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=uP(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==UL(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(e,t){const n=lP(e),s=n.shape,a=s.length;return ST((()=>{let{mean:e,variance:t}=dA(n,this.axis,!0);const r=AL(1,a);for(const e of this.axis)r[e]=s[e];const o=e=>null!=e&&e.shape.length!==a?iE(e,r):e;let i=this.scale?o(this.gamma.read()):null,l=this.center?o(this.beta.read()):null;const u=[],c=[];for(let e=0;e<a;++e)-1!==this.axis.indexOf(e)?(u.push(s[e]),c.push(1)):(u.push(1),c.push(s[e]));return e=$R(e,u),t=$R(t,u),null!=i&&(i=$R(i,c)),null!=l&&(l=$R(l,c)),$V(n,e,t,l,i,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:aP(this.betaInitializer),gammaInitializer:aP(this.gammaInitializer),betaRegularizer:gW(this.betaRegularizer),gammaRegularizer:gW(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}RV.className="LayerNormalization",iO(RV);class AV extends vP{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new $L(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new $L(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new $L(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new mP({ndim:4})]}computeOutputShape(e){let t,n;return e=uP(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return ST((()=>{return t=lP(e),n=this.padding,s=this.dataFormat,ST((()=>{if(4!==t.rank)throw new $L(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new $L("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new $L(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],yA(t,e)}));var t,n,s}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function _V(e,t,n,s,a,r){return ST((()=>{let o;oB(a),lB(r),iB(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==a&&(a="channelsLast"),null==r&&(r="max"),e=TW(e,a);const i="same"===s?"same":"valid";return o="max"===r?nA(e,t,n,i):lE(e,t,n,i),"channelsFirst"===a&&(o=M_(o,[0,3,1,2])),o}))}function FV(e,t,n,s,a,r){return ST((()=>{let o;oB(a),lB(r),iB(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==a&&(a="channelsLast"),null==r&&(r="max"),e=EW(e,a);const i="same"===s?"same":"valid";return o="max"===r?sA(e,t,n,i):uE(e,t,n,i),"channelsFirst"===a&&(o=M_(o,[0,4,1,2,3])),o}))}AV.className="ZeroPadding2D",iO(AV);class OV extends vP{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new $L(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(XL(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new $L(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}XL(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,iB(this.padding),this.inputSpec=[new mP({ndim:3})]}computeOutputShape(e){const t=CW((e=uP(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return ST((()=>{this.invokeCallHook(e,t),e=IB(lP(e),2);const n=this.poolingFunction(lP(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return m_(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class DV extends OV{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return oB(a),iB(s),_V(e,t,n,s,a,"max")}}DV.className="MaxPooling1D",iO(DV);class MV extends OV{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return oB(a),iB(s),_V(e,t,n,s,a,"avg")}}MV.className="AveragePooling1D",iO(MV);class LV extends vP{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new $L(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];XL(this.poolSize,"poolSize"),XL(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,oB(this.dataFormat),iB(this.padding),this.inputSpec=[new mP({ndim:4})]}computeOutputShape(e){e=uP(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=CW(t,this.poolSize[0],this.padding,this.strides[0]),n=CW(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return ST((()=>(this.invokeCallHook(e,t),this.poolingFunction(lP(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class BV extends LV{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return oB(a),iB(s),_V(e,t,n,s,a,"max")}}BV.className="MaxPooling2D",iO(BV);class PV extends LV{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return oB(a),iB(s),_V(e,t,n,s,a,"avg")}}PV.className="AveragePooling2D",iO(PV);class zV extends vP{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new $L(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];XL(this.poolSize,"poolSize"),XL(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,oB(this.dataFormat),iB(this.padding),this.inputSpec=[new mP({ndim:5})]}computeOutputShape(e){e=uP(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=CW(t,this.poolSize[0],this.padding,this.strides[0]),n=CW(n,this.poolSize[1],this.padding,this.strides[1]),s=CW(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return ST((()=>(this.invokeCallHook(e,t),this.poolingFunction(lP(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class WV extends zV{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return oB(a),iB(s),FV(e,t,n,s,a,"max")}}WV.className="MaxPooling3D",iO(WV);class VV extends zV{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return oB(a),iB(s),FV(e,t,n,s,a,"avg")}}VV.className="AveragePooling3D",iO(VV);class UV extends vP{constructor(e){super(e),this.inputSpec=[new mP({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new TL}}class GV extends UV{constructor(e){super(e||{})}call(e,t){return ST((()=>{const t=lP(e);return oA(t,1)}))}}GV.className="GlobalAveragePooling1D",iO(GV);class HV extends UV{constructor(e){super(e||{})}call(e,t){return ST((()=>{const t=lP(e);return fR(t,1)}))}}HV.className="GlobalMaxPooling1D",iO(HV);class jV extends vP{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,oB(this.dataFormat),this.inputSpec=[new mP({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new TL}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class XV extends jV{call(e,t){return ST((()=>{const t=lP(e);return"channelsLast"===this.dataFormat?oA(t,[1,2]):oA(t,[2,3])}))}}XV.className="GlobalAveragePooling2D",iO(XV);class KV extends jV{call(e,t){return ST((()=>{const t=lP(e);return"channelsLast"===this.dataFormat?fR(t,[1,2]):fR(t,[2,3])}))}}KV.className="GlobalMaxPooling2D",iO(KV);class qV extends vP{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=ZP(t.layer,n);delete t.layer;const a={layer:s};return Object.assign(a,t),new e(a)}}class YV extends qV{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=uP(e)).length<3)throw new $L(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=uP(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,t){return ST((()=>GW(((e,n)=>[lP(this.layer.call(e,t)),[]]),e=lP(e),[],!1,null,null,!1,!0)[1]))}}YV.className="TimeDistributed",iO(YV);class ZV extends qV{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=ZP(n),t.goBackwards=!0!==t.goBackwards;const s={};var a;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=ZP(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,a=this.mergeMode,HL(aB,"BidirectionalMergeMode",a),e.weights)throw new TL("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,a=this.forwardLayer.computeOutputShape(e);return Array.isArray(a)&&Array.isArray(a[0])||(a=[a]),this.returnState?(s=a.slice(1),t=a[0]):t=a[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):OL(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const a=UW(e,n,s,this.numConstants);if(e=a.inputs,n=a.initialState,s=a.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const r=[],o=[];if(null!=n){const e=n.length;if(e%2>0)throw new $L("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,r.push(...n);const s=n.map((e=>new mP({shape:e.shape})));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),o.push(...s)}if(null!=s)throw new TL("Support for constants in Bidirectional layers is not implemented yet.");const i=r[0]instanceof gP;for(const e of r)if(e instanceof gP!==i)throw new $L("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(i){const n=[e].concat(r),s=this.inputSpec.concat(o),a=this.inputSpec;this.inputSpec=s;const i=super.apply(n,t);return this.inputSpec=a,i}return super.apply(e,t)}call(e,t){return ST((()=>{const n=t.initialState;let s,a,r,o;if(null==n)s=this.forwardLayer.call(e,t),a=this.backwardLayer.call(e,t);else{const r=n.slice(0,n.length/2),o=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:r})),a=this.backwardLayer.call(e,Object.assign(t,{initialState:o}))}return this.returnState&&(Array.isArray(s)&&(r=s.slice(1).concat(a.slice(1))),s=s[0],a=a[0]),this.returnSequences&&(a=HA(a,1)),"concat"===this.mergeMode?o=$B([s,a]):"sum"===this.mergeMode?o=ET(s,a):"ave"===this.mergeMode?o=_T(.5,ET(s,a)):"mul"===this.mergeMode?o=_T(s,a):null==this.mergeMode&&(o=[s,a]),this.returnState?null==this.mergeMode?o.concat(r):[o].concat(r):o}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){hB(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),hB(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=ZP(t.layer);if(delete t.layer,null!=t.numConstants)throw new TL("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}ZV.className="Bidirectional",iO(ZV);class JV extends vP{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){const e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return ST((()=>("float32"!==(e=lP(e)).dtype&&(e=wB(e,"float32")),ET(_T(e,this.scale),this.offset))))}}JV.className="Rescaling",iO(JV);const{resizeBilinear:QV,cropAndResize:eU}=JF;class tU extends vP{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,t,n,s,a,r,o,i){return ST((()=>{let l,u=!1;const c=[t/r,n/o,(s+t)/r,(a+n)/o],h=[];3===e.rank?(u=!0,l=g_([e])):l=e;for(let e=0;e<l.shape[0];e++)h.push(c);const d=S$(h,[h.length,4]),p=zA(0,h.length,1,"int32"),f=eU(l,d,p,[s,a],"nearest");return wB(u?lP(A_(f)):f,i)}))}upsize(e,t,n,s){return ST((()=>wB(QV(e,[t,n]),s)))}call(e,t){return ST((()=>{const t=lP(e),n=t.dtype,s=t.shape,a=s[s.length-3],r=s[s.length-2];let o=0;a!==this.height&&(o=Math.floor((a-this.height)/2));let i=0;return r!==this.width&&(i=Math.floor((r-this.width)/2),0===i&&(i=1)),o>=0&&i>=0?this.centerCrop(t,o,i,this.height,this.width,a,r,n):this.upsize(e,this.height,this.width,n)}))}getConfig(){const e={height:this.height,width:this.width},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=uP(e)).length-3,n=e.length-2;return e[t]=this.height,e[n]=this.width,e}}tU.className="CenterCrop",iO(tU);class nU extends vP{constructor(e){super(e),this.numTokens=e.numTokens,e.outputMode?this.outputMode=e.outputMode:this.outputMode="multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){return null==(e=uP(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,t){return ST((()=>{let n;if("int32"!==(e=lP(e)).dtype&&(e=wB(e,"int32")),void 0!==t.countWeights){if("count"!==this.outputMode)throw new $L(`countWeights is not used when outputMode !== count.\n              Received countWeights=${t.countWeights}`);n=lP(t.countWeights)}const s=fR(e),a=mR(e),r=AR(this.numTokens,s).bufferSync().get(0),o=_R(a,0).bufferSync().get(0);if(!r||!o)throw new $L(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function(e,t,n,s){let a=lP(e);if("int32"!==a.dtype&&(a=wB(a,"int32")),"int"===t)return a;const r=a.shape;if(0===a.rank&&(a=SR(a,-1)),"oneHot"===t&&1!==a.shape[a.shape.length-1]&&(a=SR(a,-1)),a.rank>2)throw new $L(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${r} which would result in output rank ${a.rank}.`);const o=["multiHot","oneHot"].includes(t);let i;if(i=UE(a,void 0!==s&&"count"===t?s:[],n,o),"tfIdf"!==t)return i;if(s)return _T(i,s);throw new $L("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,n)}))}}nU.className="CategoryEncoding",iO(nU);const sU=new Set(["bilinear","nearest"]);class aU extends vP{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!sU.has(e.interpolation))throw new $L(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=Boolean(e.cropToAspectRatio)}computeOutputShape(e){const t=(e=uP(e))[2];return[this.height,this.width,t]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return ST((()=>{const t=[this.height,this.width];if("bilinear"===this.interpolation)return JF.resizeBilinear(e,t,!this.cropToAspectRatio);if("nearest"===this.interpolation)return JF.resizeNearestNeighbor(e,t,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...sU]} are supported`)}))}}aU.className="Resizing",iO(aU);class rU{constructor(e){this.seed=e}next(){if(void 0!==this.seed)return this.seed++}}rU.className="RandomSeed";class oU extends vP{constructor(e){super(e),this.randomGenerator=new rU(e.seed)}getConfig(){const e={seed:this.randomGenerator.seed},t=super.getConfig();return Object.assign(e,t),e}}oU.className="BaseRandomLayer";const iU=new Set(["bilinear","nearest"]);class lU extends oU{constructor(e){super(e);const{factor:t,interpolation:n="bilinear"}=e;if(this.factor=t,Array.isArray(this.factor)&&2===this.factor.length)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else{if(Array.isArray(this.factor)||!(this.factor>0))throw new $L(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);this.widthLower=-this.factor,this.widthUpper=this.factor}if(this.widthLower<-1||this.widthUpper<-1)throw new $L(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new $L(`factor cannot have upper bound less than lower bound.\n        Got upper bound: ${this.widthUpper}.\n        Got lower bound: ${this.widthLower}\n      `);if(n){if(!iU.has(n))throw new $L(`Invalid interpolation parameter: ${n} is not implemented`);this.interpolation=n}}getConfig(){const e={factor:this.factor,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=uP(e))[2];return[this.imgHeight,-1,t]}call(e,t){return ST((()=>{const t=lP(e);this.imgHeight=t.shape[t.shape.length-3];const n=t.shape[t.shape.length-2];this.widthFactor=BA([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let s=this.widthFactor.dataSync()[0]*n;s=Math.round(s);const a=[this.imgHeight,s];switch(this.interpolation){case"bilinear":return JF.resizeBilinear(e,a);case"nearest":return JF.resizeNearestNeighbor(e,a);default:throw new Error(`Interpolation is ${this.interpolation}\n          but only ${[...iU]} are supported`)}}))}}lU.className="RandomWidth",iO(lU);var uU,cU;zw().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(uU||(uU={})),function(e){var t;(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(cU||(cU={}));const hU={};function dU(e){return hU[e]}function pU(e,t,n,s,a){const r=t.inputParams[e];if(r&&void 0!==r.inputIndexStart){const e=r.inputIndexStart,o=0===r.inputIndexEnd?void 0:void 0===r.inputIndexEnd?e+1:r.inputIndexEnd,i=e<0?t.inputNames.length+e:e;if("tensor"===r.type)return fU(t.inputNames[i],n,s,a);if("tensors"===r.type){const r=t.inputs.slice(e,o);return t.inputNames.slice(e,o).filter(((e,t)=>{var n;return"NoOp"!==(null===(n=r[t])||void 0===n?void 0:n.op)})).map((e=>fU(e,n,s,a)))}const l=fU(t.inputNames[i],n,s,a),u=l.dataSync();return"number"===r.type?u[0]:Ew(l.shape,u)}const o=t.attrParams[e];return o&&o.value}function fU(e,t,n,s){const[a,r]=bU(e,n);if(null!=s){const e=s.getHashTableHandleByName(a);if(null!=e)return e}const o=n.currentContextIds.find((e=>!!t[xU(a,e)]));return void 0!==o?t[xU(a,o)][r]:void 0}function mU(e,t,n){return t[xU(e,n.currentContextId)]}function gU(e,t){const[n,s,a]=bU(e,t);return[xU(n,t&&t.currentContextId),s,a]}function xU(e,t){return t?`${e}-${t}`:e}function bU(e,t){if(""===e)return["",0,void 0];const n=null!=t&&null!=t.parseNodeNameCache;if(n){const n=t.parseNodeNameCache.get(e);if(null!=n)return n}const s=e.split(":");let a;if(1===s.length)a=[e,0,void 0];else{const e=s[0],t=3===s.length?s[1]:void 0;a=[e,Number(s[s.length-1]),t]}return n&&t.parseNodeNameCache.set(e,a),a}function yU(e,t,n){let s=pU("pad",e,t,n);if("explicit"===s){s=pU("explicitPaddings",e,t,n);const a=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)a[e][0]=s[2*e],a[e][1]=s[2*e+1];return a}return s}function vU(e){return e.kept?e:kT(e)}var kU=Object.freeze({__proto__:null,json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var wU=Object.freeze({__proto__:null,json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var IU=Object.freeze({__proto__:null,json:[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}]});var NU=Object.freeze({__proto__:null,json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]});var SU=Object.freeze({__proto__:null,json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]});var CU=Object.freeze({__proto__:null,json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var $U=Object.freeze({__proto__:null,json:[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}]});var TU=Object.freeze({__proto__:null,json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]});var EU=Object.freeze({__proto__:null,json:[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}]});var RU=Object.freeze({__proto__:null,json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}]});var AU=Object.freeze({__proto__:null,json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}]});var _U=Object.freeze({__proto__:null,json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}]});var FU=Object.freeze({__proto__:null,json:[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}]});var OU=Object.freeze({__proto__:null,json:[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]});var DU=Object.freeze({__proto__:null,json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}]});var MU=Object.freeze({__proto__:null,json:[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}]});var LU=Object.freeze({__proto__:null,json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]});var BU=Object.freeze({__proto__:null,json:[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}]});var PU=Object.freeze({__proto__:null,json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}]});class zU{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[kU,wU,IU,NU,SU,CU,$U,TU,EU,RU,AU,_U,FU,OU,DU,MU,LU,BU,PU].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,s=[],a=[],r=[],o=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?s.push(e[t.name]):"Const"===t.op?a.push(e[t.name]):null!=t.input&&0!==t.input.length||r.push(e[t.name]),e)),{});let i=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(o);h.forEach((e=>{const t=o[e];t.inputNames.forEach(((e,n)=>{const[s,,a]=gU(e),r=o[s];if(null!=r.outputs){const e=r.outputs.indexOf(a);if(-1!==e){const a=`${s}:${e}`;t.inputNames[n]=a}}t.inputs.push(r),r.children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=o[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=gU(e),n=o[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=gU(e),n=o[t];n&&(n.signatureKey=u[e],i.push(n))})):i=s;let d={};null!=e.library&&null!=e.library.function&&(d=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const p={nodes:o,inputs:i,outputs:l,weights:a,placeholders:s,signature:t,functions:d};return r.length>0&&(p.initNodes=r),p}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=dU(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const s=n.type;let a;switch(n.type){case"string":a=VU(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=VU(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":a=JU(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=JU(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":a=GU(e.attr,n.tfName,n.defaultValue||0),void 0===a&&n.tfDeprecatedName&&(a=GU(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":a=ZU(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ZU(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":a=UU(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=UU(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":a=eG(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=eG(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":a=YU(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=YU(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":a=QU(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=QU(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":a=XU(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=XU(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":a=KU(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=KU(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":a=jU(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=jU(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:a,type:s},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let s={};null!=t&&(s=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const a=[],r=[];e.signature.inputArg.forEach((e=>{const[t]=gU(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:HU(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,a.push(n),s[t]=n}));Object.keys(s).forEach((e=>{const t=s[e];t.inputNames.forEach(((e,n)=>{const[a,,r]=gU(e),o=s[a];if(null!=o.outputs){const e=o.outputs.indexOf(r);if(-1!==e){const s=`${a}:${e}`;t.inputNames[n]=s}}t.inputs.push(o),o.children.push(t)}))}));const o=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=gU(o[e.name]),a=s[t];null!=a&&(a.defaultOutput=n,r.push(a))}));const i=this.mapArgsToSignature(e);return{nodes:s,inputs:a,outputs:r,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function WU(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=zw().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function VU(e,t,n,s=!1){const a=e[t];return null!=a?WU(a.s,s):n}function UU(e,t,n){const s=e[t];return s?s.b:n}function GU(e,t,n){const s=e[t]||{},a=null!=s.i?s.i:null!=s.f?s.f:n;return"number"==typeof a?a:parseInt(a,10)}function HU(e){switch("string"==typeof e&&(e=uU[e]),e){case uU.DT_FLOAT:case uU.DT_HALF:return"float32";case uU.DT_INT32:case uU.DT_INT64:case uU.DT_INT8:case uU.DT_UINT8:return"int32";case uU.DT_BOOL:return"bool";case uU.DT_DOUBLE:return"float32";case uU.DT_STRING:return"string";default:return null}}function jU(e,t,n){const s=e[t];return s&&s.func?s.func.name:n}function XU(e,t,n){const s=e[t];return s&&s.type?HU(s.type):n}function KU(e,t,n){const s=e[t];return s&&s.list&&s.list.type?s.list.type.map((e=>HU(e))):n}function qU(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function YU(e,t,n){const s=e[t];return s&&s.shape?qU(s.shape):n}function ZU(e,t,n){const s=e[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function JU(e,t,n,s=!1){const a=e[t];return a&&a.list&&a.list.s?a.list.s.map((e=>WU(e,s))):n}function QU(e,t,n){const s=e[t];return s&&s.list&&s.list.shape?s.list.shape.map((e=>qU(e))):n}function eG(e,t,n){const s=e[t];return s&&s.list&&s.list.b?s.list.b:n}class tG{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return fU(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return fU(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return GU(this.node.rawAttrs,e,t);if(null!=n.s)return VU(this.node.rawAttrs,e,t);if(null!=n.b)return UU(this.node.rawAttrs,e,t);if(null!=n.shape)return YU(this.node.rawAttrs,e,t);if(null!=n.type)return XU(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return ZU(this.node.rawAttrs,e,t);if(null!=n.list.s)return JU(this.node.rawAttrs,e,t);if(null!=n.list.shape)return QU(this.node.rawAttrs,e,t);if(null!=n.list.b)return eG(this.node.rawAttrs,e,t);if(null!=n.list.type)return KU(this.node.rawAttrs,e,t)}return t}}var nG=Object.freeze({__proto__:null,abs:FT,acos:OT,acosh:DT,add:ET,addN:MT,all:LT,any:BT,argMax:PT,argMin:zT,asin:WT,asinh:VT,atan:UT,atan2:GT,atanh:HT,avgPool:lE,avgPool3d:uE,basicLSTMCell:mE,batchToSpaceND:gE,batchNorm:xE,batchNorm2d:bE,batchNorm3d:yE,batchNorm4d:vE,bincount:kE,bitwiseAnd:wE,broadcastArgs:IE,broadcastTo:NE,buffer:yT,cast:vT,ceil:SE,clipByValue:$E,clone:kT,complex:I$,concat:cE,concat1d:TE,concat2d:EE,concat3d:RE,concat4d:AE,conv1d:FE,conv2d:_E,conv2dTranspose:DE,conv3d:ME,conv3dTranspose:BE,cos:PE,cosh:zE,cumprod:WE,cumsum:VE,denseBincount:UE,depthToSpace:GE,depthwiseConv2d:HE,diag:jE,dilation2d:XE,div:AT,divNoNan:eR,dot:tR,einsum:nR,elu:sR,ensureShape:aR,equal:ZE,erf:rR,euclideanNorm:IR,exp:NR,expandDims:SR,expm1:CR,eye:TR,fill:CE,floor:ER,floorDiv:RT,gather:RR,greater:AR,greaterEqual:_R,imag:FR,isFinite:OR,isInf:DR,isNaN:MR,leakyRelu:LR,less:BR,lessEqual:PR,linspace:function(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return h$.runKernel(fN,{},s)},localResponseNormalization:zR,log:WR,log1p:VR,logSigmoid:jR,logSoftmax:KR,logSumExp:qR,logicalAnd:YR,logicalNot:ZR,logicalOr:JR,logicalXor:QR,lowerBound:function(e,t){return tA(e,t,"left")},matMul:hE,max:fR,maxPool:nA,maxPool3d:sA,maxPoolWithArgmax:aA,maximum:rA,mean:oA,meshgrid:function(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let s=y$(e,"x","meshgrid",e instanceof HC?e.dtype:"float32");if(void 0===t)return[s];let a=y$(t,"y","meshgrid",t instanceof HC?t.dtype:"float32");const r=uw(s.shape),o=uw(a.shape);return"xy"===n?(s=iE(s,[1,-1]),a=iE(a,[-1,1]),[hE(lA([o,1],s.dtype),s),hE(a,lA([1,r],a.dtype))]):(s=iE(s,[-1,1]),a=iE(a,[1,-1]),[hE(s,lA([1,o],s.dtype)),hE(lA([r,1],a.dtype),a)])},min:mR,minimum:uA,mirrorPad:cA,mod:hA,moments:dA,mul:_T,multiRNNCell:pA,multinomial:fA,neg:GR,notEqual:mA,oneHot:gA,ones:lA,onesLike:xA,outerProduct:bA,pad:yA,pad1d:vA,pad2d:kA,pad3d:wA,pad4d:IA,pool:SA,pow:gR,prelu:CA,print:wT,prod:$A,raggedGather:TA,raggedRange:EA,raggedTensorToTensor:RA,rand:AA,randomGamma:DA,randomNormal:MA,randomStandardNormal:LA,randomUniform:BA,randomUniformInt:PA,range:zA,real:WA,reciprocal:VA,relu:UA,relu6:GA,reshape:iE,reverse:HA,reverse1d:jA,reverse2d:XA,reverse3d:KA,reverse4d:qA,round:YA,rsqrt:ZA,scalar:xR,selu:JA,separableConv2d:QA,setdiff1dAsync:e_,sigmoid:dE,sign:t_,sin:n_,sinh:s_,slice:pE,slice1d:a_,slice2d:r_,slice3d:o_,slice4d:i_,softmax:l_,softplus:HR,spaceToBatchND:NA,fft:u_,ifft:c_,irfft:h_,rfft:p_,split:d_,sqrt:bR,square:yR,squaredDifference:f_,squeeze:m_,stack:g_,step:x_,stridedSlice:b_,sub:XR,sum:vR,tan:y_,tanh:fE,tensor:S$,tensor1d:v_,tensor2d:k_,tensor3d:w_,tensor4d:function(e,t,n){if(lw(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const s=g$(e,n);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return N$(e,t,s,n)},tensor5d:function(e,t,n){if(lw(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const s=g$(e,n);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return N$(e,t,s,n)},tensor6d:function(e,t,n){if(lw(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const s=g$(e,n);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return N$(e,t=t||s,s,n)},tensorScatterUpdate:C_,tile:$R,topk:$_,truncatedNormal:T_,unique:E_,unsortedSegmentSum:R_,unstack:A_,upperBound:function(e,t){return tA(e,t,"right")},variable:__,where:JE,whereAsync:O_,zeros:iA,zerosLike:QE,op:w$,OP_SCOPE_SUFFIX:k$,booleanMaskAsync:D_,transpose:M_,norm:wR,movingAverage:L_,scatterND:B_,searchSorted:tA,sparseToDense:P_,gatherND:z_,dropout:W_,enclosingPowerOfTwo:V_,cosineWindow:U_,inTopKAsync:G_,image:JF,linalg:QF,losses:eO,spectral:YF,fused:tF,signal:ZF,sparse:tO,string:nO});function sG(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){ow(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let s=0;s<e.length;s++){const a=e[s],r=t[s];ow(a<0||r<0||a===r,(()=>n+` Shapes ${e} and ${t} must match`))}}}function aG(e){return"number"!=typeof e&&!e.some((e=>e<0))}function rG(e,t,n){let s=oG(e,n);const a=!aG(s);if(a&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(a&&t.forEach((e=>{s=oG(e.shape,s)})),!aG(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function oG(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let s=0;s<e.length;++s){const a=e[s],r=t[s];if(a>=0&&r>=0&&a!==r)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[s]=a>=0?a:r}return n}class iG{constructor(e,t,n,s,a,r,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=a,this.dynamicSize=r,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=xR(0),$T(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),sG(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,$T(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return S$([],[0].concat(this.elementShape));const n=this.readMany(e);return sG(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),g_(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return S$([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return sG(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),cE(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,A_(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const s=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const a=0===n?0:t.size/n,r=[];ST((()=>{t=iE(t,[1,n,a]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:s[n-1],0],i=[1,e[n],a];r[n]=iE(pE(t,o,i),this.elementShape)}return r}));const o=[];for(let t=0;t<e.length;t++)o[t]=t;this.writeMany(o,r)}}class lG{get id(){return this.idTensor.id}constructor(e,t,n,s=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);sG(t,e.shape,"TensorList shape mismatch: "),$T(e)})),this.idTensor=xR(0),this.maxNumElements=s,$T(this.idTensor)}copy(){return new lG([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);sG(e,this.elementShape,"TensorList shape mismatch: ");const s=rG(this.elementShape,this.tensors,e);return ST((()=>{const e=this.tensors.map((e=>iE(e,s)));return g_(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=rG(this.elementShape,this.tensors,e),s=this.tensors.pop();return s.kept=!1,sG(s.shape,e,"TensorList shape mismatch: "),iE(s,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(sG(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");$T(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new lG([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);sG(this.tensors[e].shape,t,"TensorList shape mismatch: ");const s=rG(this.elementShape,this.tensors,t);return iE(this.tensors[e],s)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);sG(this.elementShape,t.shape,"TensorList shape mismatch: "),$T(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);sG(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const s=rG(this.elementShape,this.tensors,n);return 0===e.length?S$([],[0].concat(s)):ST((()=>{const t=e.map((e=>iE(this.tensors[e],s)));return g_(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);sG(this.elementShape,t,"TensorList shape mismatch: ");const n=rG(this.elementShape,this.tensors,t);return 0===this.size()?S$([],[0].concat(n)):ST((()=>{const e=this.tensors.map((e=>iE(e,n)));return cE(e,0)}))}}const uG=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const s=pU("thenBranch",e,t,n),a=pU("elseBranch",e,t,n),r=pU("cond",e,t,n),o=pU("args",e,t,n);return(await r.data())[0]?n.functionMap[s].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[a].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const s=pU("body",e,t,n),a=pU("cond",e,t,n),r=pU("args",e,t,n),o=await n.functionMap[a].executeFunctionAsync(r,n.tensorArrayMap,n.tensorListMap),i=r.map((e=>e.id));let l=await o[0].data();o.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()}));let u=r;for(;l[0];){const e=u;u=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const r=await n.functionMap[a].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await r[0].data(),r.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[vU(pU("pred",e,t,n))];case"Switch":{const s=pU("pred",e,t,n);let a=pU("data",e,t,n);return a.kept||(a=vU(a)),(await s.data())[0]?[void 0,a]:[a,void 0]}case"Merge":{const s=e.inputNames.find((e=>void 0!==fU(e,t,n)));if(s){return[vU(fU(s,t,n))]}return}case"Enter":{const s=pU("frameName",e,t,n),a=pU("tensor",e,t,n);return n.enterFrame(s),[vU(a)]}case"Exit":{const s=pU("tensor",e,t,n);return n.exitFrame(),[vU(s)]}case"NextIteration":{const s=pU("tensor",e,t,n);return n.nextIteration(),[vU(s)]}case"TensorArrayV3":{const s=pU("size",e,t,n),a=pU("dtype",e,t,n),r=pU("elementShape",e,t,n),o=pU("dynamicSize",e,t,n),i=pU("clearAfterRead",e,t,n),l=pU("identicalElementShapes",e,t,n),u=pU("name",e,t,n),c=new iG(u,a,s,r,l,o,i);return n.addTensorArray(c),[c.idTensor,xR(1)]}case"TensorArrayWriteV3":{const s=pU("tensorArrayId",e,t,n),a=pU("index",e,t,n),r=pU("tensor",e,t,n),o=n.getTensorArray(s.id);return o.write(a,r),[o.idTensor]}case"TensorArrayReadV3":{const s=pU("tensorArrayId",e,t,n),a=pU("index",e,t,n);return[n.getTensorArray(s.id).read(a)]}case"TensorArrayGatherV3":{const s=pU("tensorArrayId",e,t,n),a=pU("indices",e,t,n),r=pU("dtype",e,t,n);return[n.getTensorArray(s.id).gather(a,r)]}case"TensorArrayScatterV3":{const s=pU("tensorArrayId",e,t,n),a=pU("indices",e,t,n),r=pU("tensor",e,t,n),o=n.getTensorArray(s.id);return o.scatter(a,r),[o.idTensor]}case"TensorArrayConcatV3":{const s=pU("tensorArrayId",e,t,n),a=n.getTensorArray(s.id),r=pU("dtype",e,t,n);return[a.concat(r)]}case"TensorArraySplitV3":{const s=pU("tensorArrayId",e,t,n),a=pU("tensor",e,t,n),r=pU("lengths",e,t,n),o=n.getTensorArray(s.id);return o.split(r,a),[o.idTensor]}case"TensorArraySizeV3":{const s=pU("tensorArrayId",e,t,n);return[xR(n.getTensorArray(s.id).size(),"int32")]}case"TensorArrayCloseV3":{const s=pU("tensorArrayId",e,t,n),a=n.getTensorArray(s.id);return a.clearAndClose(),[a.idTensor]}case"TensorListSetItem":{const s=pU("tensorListId",e,t,n),a=pU("index",e,t,n),r=pU("tensor",e,t,n),o=n.getTensorList(s.id);return o.setItem(a,r),[o.idTensor]}case"TensorListGetItem":{const s=pU("tensorListId",e,t,n),a=pU("index",e,t,n),r=pU("elementShape",e,t,n),o=pU("elementDType",e,t,n);return[n.getTensorList(s.id).getItem(a,r,o)]}case"TensorListScatterV2":case"TensorListScatter":{const s=pU("indices",e,t,n),a=function(e,t,n,s){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const a=Math.max(...t);if(null!=s&&-1!==s&&a>=s)throw new Error(`Max index must be < array size (${a}  vs. ${s})`);const r=new lG([],n,e.dtype,s),o=A_(e,0);return t.forEach(((e,t)=>{r.setItem(e,o[t])})),r}(pU("tensor",e,t,n),s,pU("elementShape",e,t,n),pU("numElements",e,t,n));return n.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const s=pU("elementShape",e,t,n),a=pU("elementDType",e,t,n);let r;r="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=pU(r,e,t,n),i=function(e,t,n,s){return new lG([],e,t,s)}(s,a,0,"TensorListReserve"===e.op?-1:o);return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const s=pU("tensorListId",e,t,n),a=pU("indices",e,t,n),r=pU("elementShape",e,t,n),o=pU("elementDType",e,t,n);return[n.getTensorList(s.id).gather(a,o,r)]}case"TensorListStack":{const s=pU("tensorListId",e,t,n),a=pU("elementShape",e,t,n),r=pU("elementDType",e,t,n),o=pU("numElements",e,t,n);return[n.getTensorList(s.id).stack(a,r,o)]}case"TensorListFromTensor":{const s=function(e,t,n){const s=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);sG(e.shape.slice(1),t,"TensorList shape mismatch: ");const a=A_(e);return new lG(a,t,s)}(pU("tensor",e,t,n),pU("elementShape",e,t,n),pU("elementDType",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const s=pU("tensorListId",e,t,n),a=n.getTensorList(s.id),r=pU("dtype",e,t,n),o=pU("elementShape",e,t,n);return[a.concat(r,o)]}case"TensorListPushBack":{const s=pU("tensorListId",e,t,n),a=pU("tensor",e,t,n),r=n.getTensorList(s.id);return r.pushBack(a),[r.idTensor]}case"TensorListPopBack":{const s=pU("tensorListId",e,t,n),a=pU("elementShape",e,t,n),r=pU("elementDType",e,t,n);return[n.getTensorList(s.id).popBack(a,r)]}case"TensorListSplit":{const s=pU("tensor",e,t,n),a=pU("elementShape",e,t,n),r=function(e,t,n){let s=0;const a=t.map((e=>(s+=e,s)));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const r=oG(e.shape.slice(1),n),o=0===s?0:e.size/s,i=ST((()=>{const n=[];e=iE(e,[1,s,o]);for(let s=0;s<t.length;++s){const i=[0,0===s?0:a[s-1],0],l=[1,t[s],o];n[s]=iE(pE(e,i,l),r)}return e.dispose(),n})),l=new lG([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)l.setItem(e,i[e]);return l}(s,pU("lengths",e,t,n),a);return n.addTensorList(r),[r.idTensor]}case"TensorListLength":{const s=pU("tensorListId",e,t,n);return[xR(n.getTensorList(s.id).size(),"int32")]}case"TensorListResize":{const s=pU("tensorListId",e,t,n),a=pU("size",e,t,n),r=n.getTensorList(s.id).resize(a);return n.addTensorList(r),[r.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function cG(e,t,n){const[s,a]=pU("fusedOps",e,t,n),r="biasadd"===s,o=!r,i="prelu"===a,l="fusedbatchnorm"===s,u=pU("numArgs",e,t,n);if(r){if(i&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&r&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=pU("strides",e,t,n),h=yU(e,t,n),d=pU("dataFormat",e,t,n).toUpperCase(),p=pU("dilations",e,t,n);let[f,m]=pU("args",e,t,n);o&&(m=f,f=void 0);return{stride:c,pad:h,dataFormat:d,dilations:p,biasArg:f,preluArg:m,activationFunc:a,leakyreluAlpha:pU("leakyreluAlpha",e,t,n)}}function hG(e,t,n){return{boxes:pU("boxes",e,t,n),scores:pU("scores",e,t,n),maxOutputSize:pU("maxOutputSize",e,t,n),iouThreshold:pU("iouThreshold",e,t,n),scoreThreshold:pU("scoreThreshold",e,t,n),softNmsSigma:pU("softNmsSigma",e,t,n)}}class dG{get id(){return this.handle.id}constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=xR(0),this.tensorMap=new Map,$T(this.handle)}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return xR(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),ST((()=>{const e=A_(t),s=n.length,a=e.length;ow(s===a,(()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${a} elements.`));for(let t=0;t<s;t++){const s=n[t],a=e[t];$T(a),this.tensorMap.set(s,a)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return ST((()=>{const e=[];for(let s=0;s<n.length;s++){const a=n[s],r=this.findWithDefault(a,t);e.push(r)}return g_(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function pG(e,t,n,s,a=ST){const r=((e,t,n)=>{switch(e.category){case"arithmetic":return a((()=>((e,t,n,s=nG)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[s.add(pU("a",e,t,n),pU("b",e,t,n))];case"AddN":return[s.addN(pU("tensors",e,t,n))];case"FloorMod":case"Mod":return[s.mod(pU("a",e,t,n),pU("b",e,t,n))];case"Mul":return[s.mul(pU("a",e,t,n),pU("b",e,t,n))];case"RealDiv":case"Div":return[s.div(pU("a",e,t,n),pU("b",e,t,n))];case"DivNoNan":return[s.divNoNan(pU("a",e,t,n),pU("b",e,t,n))];case"FloorDiv":return[s.floorDiv(pU("a",e,t,n),pU("b",e,t,n))];case"Sub":return[s.sub(pU("a",e,t,n),pU("b",e,t,n))];case"Minimum":return[s.minimum(pU("a",e,t,n),pU("b",e,t,n))];case"Maximum":return[s.maximum(pU("a",e,t,n),pU("b",e,t,n))];case"Pow":return[s.pow(pU("a",e,t,n),pU("b",e,t,n))];case"SquaredDifference":return[s.squaredDifference(pU("a",e,t,n),pU("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return a((()=>((e,t,n,s=nG)=>{switch(e.op){case"Abs":case"ComplexAbs":return[s.abs(pU("x",e,t,n))];case"Acos":return[s.acos(pU("x",e,t,n))];case"Acosh":return[s.acosh(pU("x",e,t,n))];case"Asin":return[s.asin(pU("x",e,t,n))];case"Asinh":return[s.asinh(pU("x",e,t,n))];case"Atan":return[s.atan(pU("x",e,t,n))];case"Atan2":return[s.atan2(pU("x",e,t,n),pU("y",e,t,n))];case"Atanh":return[s.atanh(pU("x",e,t,n))];case"Ceil":return[s.ceil(pU("x",e,t,n))];case"Complex":return[s.complex(pU("real",e,t,n),pU("imag",e,t,n))];case"Cos":return[s.cos(pU("x",e,t,n))];case"Cosh":return[s.cosh(pU("x",e,t,n))];case"Elu":return[s.elu(pU("x",e,t,n))];case"Erf":return[s.erf(pU("x",e,t,n))];case"Exp":return[s.exp(pU("x",e,t,n))];case"Expm1":return[s.expm1(pU("x",e,t,n))];case"Floor":return[s.floor(pU("x",e,t,n))];case"Log":return[s.log(pU("x",e,t,n))];case"Log1p":return[s.log1p(pU("x",e,t,n))];case"Imag":return[s.imag(pU("x",e,t,n))];case"Neg":return[s.neg(pU("x",e,t,n))];case"Reciprocal":return[s.reciprocal(pU("x",e,t,n))];case"Real":return[s.real(pU("x",e,t,n))];case"Relu":return[s.relu(pU("x",e,t,n))];case"Round":return[s.round(pU("x",e,t,n))];case"Selu":return[s.selu(pU("x",e,t,n))];case"Sigmoid":return[s.sigmoid(pU("x",e,t,n))];case"Sin":return[s.sin(pU("x",e,t,n))];case"Sign":return[s.sign(pU("x",e,t,n))];case"Sinh":return[s.sinh(pU("x",e,t,n))];case"Softplus":return[s.softplus(pU("x",e,t,n))];case"Sqrt":return[s.sqrt(pU("x",e,t,n))];case"Square":return[s.square(pU("x",e,t,n))];case"Tanh":return[s.tanh(pU("x",e,t,n))];case"Tan":return[s.tan(pU("x",e,t,n))];case"ClipByValue":return[s.clipByValue(pU("x",e,t,n),pU("clipValueMin",e,t,n),pU("clipValueMax",e,t,n))];case"Relu6":return[s.relu6(pU("x",e,t,n))];case"Rsqrt":return[s.rsqrt(fU(e.inputNames[0],t,n))];case"LeakyRelu":return[s.leakyRelu(pU("x",e,t,n),pU("alpha",e,t,n))];case"Prelu":return[s.prelu(pU("x",e,t,n),pU("alpha",e,t,n))];case"IsNan":return[s.isNaN(fU(e.inputNames[0],t,n))];case"IsInf":return[s.isInf(fU(e.inputNames[0],t,n))];case"IsFinite":return[s.isFinite(fU(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return uG(e,t,n);case"convolution":return a((()=>((e,t,n,s=nG)=>{switch(e.op){case"Conv1D":{const a=pU("stride",e,t,n),r=pU("pad",e,t,n),o=pU("dataFormat",e,t,n).toUpperCase(),i=pU("dilation",e,t,n);return[s.conv1d(pU("x",e,t,n),pU("filter",e,t,n),a,r,o,i)]}case"Conv2D":{const a=pU("strides",e,t,n),r=yU(e,t,n),o=pU("dataFormat",e,t,n).toUpperCase(),i=pU("dilations",e,t,n);return[s.conv2d(pU("x",e,t,n),pU("filter",e,t,n),[a[1],a[2]],r,o,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:a,pad:r,dataFormat:o,dilations:i,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:h}=cG(e,t,n);return[s.fused.conv2d({x:pU("x",e,t,n),filter:pU("filter",e,t,n),strides:[a[1],a[2]],pad:r,dataFormat:o,dilations:[i[1],i[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:h})]}case"FusedDepthwiseConv2dNative":{const{stride:a,pad:r,dataFormat:o,dilations:i,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:h}=cG(e,t,n);return[s.fused.depthwiseConv2d({x:pU("x",e,t,n),filter:pU("filter",e,t,n),strides:[a[1],a[2]],pad:r,dataFormat:o,dilations:[i[1],i[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:h})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const a=pU("outputShape",e,t,n),r=pU("strides",e,t,n),o=yU(e,t,n);return[s.conv2dTranspose(pU("x",e,t,n),pU("filter",e,t,n),a,[r[1],r[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const a=pU("strides",e,t,n),r=yU(e,t,n),o=pU("dilations",e,t,n),i=pU("dataFormat",e,t,n).toUpperCase();return[s.depthwiseConv2d(pU("input",e,t,n),pU("filter",e,t,n),[a[1],a[2]],r,i,[o[1],o[2]])]}case"Conv3D":{const a=pU("strides",e,t,n),r=pU("pad",e,t,n),o=pU("dataFormat",e,t,n).toUpperCase(),i=pU("dilations",e,t,n);return[s.conv3d(pU("x",e,t,n),pU("filter",e,t,n),[a[1],a[2],a[3]],r,o,[i[1],i[2],i[3]])]}case"AvgPool":{const a=pU("strides",e,t,n),r=pU("pad",e,t,n),o=pU("kernelSize",e,t,n);return[s.avgPool(pU("x",e,t,n),[o[1],o[2]],[a[1],a[2]],r)]}case"MaxPool":{const a=pU("strides",e,t,n),r=pU("pad",e,t,n),o=pU("kernelSize",e,t,n);return[s.maxPool(pU("x",e,t,n),[o[1],o[2]],[a[1],a[2]],r)]}case"MaxPoolWithArgmax":{const a=pU("strides",e,t,n),r=pU("pad",e,t,n),o=pU("kernelSize",e,t,n),i=pU("includeBatchInIndex",e,t,n),{result:l,indexes:u}=s.maxPoolWithArgmax(pU("x",e,t,n),[o[1],o[2]],[a[1],a[2]],r,i);return[l,u]}case"AvgPool3D":{const a=pU("strides",e,t,n),r=pU("pad",e,t,n),o=pU("kernelSize",e,t,n);return[s.avgPool3d(pU("x",e,t,n),[o[1],o[2],o[3]],[a[1],a[2],a[3]],r)]}case"MaxPool3D":{const a=pU("strides",e,t,n),r=pU("pad",e,t,n),o=pU("kernelSize",e,t,n);return[s.maxPool3d(pU("x",e,t,n),[o[1],o[2],o[3]],[a[1],a[2],a[3]],r)]}case"Dilation2D":{const a=pU("strides",e,t,n),r=pU("pad",e,t,n),o=pU("dilations",e,t,n),i=a[1],l=a[2],u=o[1],c=o[2];return[s.dilation2d(pU("x",e,t,n),pU("filter",e,t,n),[i,l],r,[u,c],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return a((()=>((e,t,n,s=nG)=>{switch(e.op){case"Fill":{const a=pU("shape",e,t,n),r=pU("dtype",e,t,n),o=pU("value",e,t,n);return[s.fill(a,o,r)]}case"LinSpace":{const a=pU("start",e,t,n),r=pU("stop",e,t,n),o=pU("num",e,t,n);return[s.linspace(a,r,o)]}case"Multinomial":{const a=pU("logits",e,t,n),r=pU("numSamples",e,t,n),o=pU("seed",e,t,n);return[s.multinomial(a,r,o)]}case"OneHot":{const a=pU("indices",e,t,n),r=pU("depth",e,t,n),o=pU("onValue",e,t,n),i=pU("offValue",e,t,n),l=pU("dtype",e,t,n);return[s.oneHot(a,r,o,i,l)]}case"Ones":return[s.ones(pU("shape",e,t,n),pU("dtype",e,t,n))];case"OnesLike":return[s.onesLike(pU("x",e,t,n))];case"RandomStandardNormal":return[s.randomStandardNormal(pU("shape",e,t,n),pU("dtype",e,t,n),pU("seed",e,t,n))];case"RandomUniform":return[s.randomUniform(pU("shape",e,t,n),pU("minval",e,t,n),pU("maxval",e,t,n),pU("dtype",e,t,n))];case"RandomUniformInt":return[s.randomUniformInt(pU("shape",e,t,n),pU("minval",e,t,n),pU("maxval",e,t,n),pU("seed",e,t,n))];case"Range":{const a=pU("start",e,t,n),r=pU("stop",e,t,n),o=pU("step",e,t,n);return[s.range(a,r,o,pU("dtype",e,t,n))]}case"TruncatedNormal":{const a=pU("shape",e,t,n),r=pU("mean",e,t,n),o=pU("stdDev",e,t,n),i=pU("seed",e,t,n);return[s.truncatedNormal(a,r,o,pU("dtype",e,t,n),i)]}case"Zeros":return[s.zeros(pU("shape",e,t,n),pU("dtype",e,t,n))];case"ZerosLike":return[s.zerosLike(pU("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n,s,a=nG)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:r,maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=hG(e,t,n),c=await a.image.nonMaxSuppressionWithScoreAsync(s,r,o,i,l,u);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:r,maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=hG(e,t,n),u=pU("padToMaxOutputSize",e,t,n),c=await a.image.nonMaxSuppressionPaddedAsync(s,r,o,i,l,u);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:r,maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=hG(e,t,n);return[await a.image.nonMaxSuppressionAsync(s,r,o,i,l)]}case"Where":{const s=a.cast(pU("condition",e,t,n),"bool"),r=[await a.whereAsync(s)];return s.dispose(),r}case"ListDiff":return a.setdiff1dAsync(pU("x",e,t,n),pU("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return a((()=>((e,t,n,s=nG)=>{switch(e.op){case"LowerBound":{const a=pU("sortedSequence",e,t,n),r=pU("values",e,t,n);return[s.lowerBound(a,r)]}case"TopKV2":{const a=pU("x",e,t,n),r=pU("k",e,t,n),o=pU("sorted",e,t,n),i=s.topk(a,r,o);return[i.values,i.indices]}case"UpperBound":{const a=pU("sortedSequence",e,t,n),r=pU("values",e,t,n);return[s.upperBound(a,r)]}case"Unique":{const a=pU("x",e,t,n),r=s.unique(a);return[r.values,r.indices]}case"UniqueV2":{const a=pU("x",e,t,n),r=pU("axis",e,t,n),o=s.unique(a,r);return[o.values,o.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return a((()=>((e,t,n,s=nG)=>{switch(e.op){case"ResizeBilinear":{const a=pU("images",e,t,n),r=pU("size",e,t,n),o=pU("alignCorners",e,t,n),i=pU("halfPixelCenters",e,t,n);return[s.image.resizeBilinear(a,[r[0],r[1]],o,i)]}case"ResizeNearestNeighbor":{const a=pU("images",e,t,n),r=pU("size",e,t,n),o=pU("alignCorners",e,t,n),i=pU("halfPixelCenters",e,t,n);return[s.image.resizeNearestNeighbor(a,[r[0],r[1]],o,i)]}case"CropAndResize":{const a=pU("image",e,t,n),r=pU("boxes",e,t,n),o=pU("boxInd",e,t,n),i=pU("cropSize",e,t,n),l=pU("method",e,t,n),u=pU("extrapolationValue",e,t,n);return[s.image.cropAndResize(a,r,o,i,l,u)]}case"ImageProjectiveTransformV3":{const a=pU("images",e,t,n),r=pU("transforms",e,t,n),o=pU("outputShape",e,t,n),i=pU("fillValue",e,t,n),l=pU("interpolation",e,t,n),u=pU("fillMode",e,t,n);return[s.image.transform(a,r,l.toLowerCase(),u.toLowerCase(),i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return a((()=>((e,t,n,s=nG)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const a=pU("default",e,t,n);return[fU(e.name,t,n)||a];case"Placeholder":return[fU(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[vU(pU("x",e,t,n))];case"IdentityN":return pU("x",e,t,n).map((e=>vU(e)));case"Shape":return[s.tensor1d(pU("x",e,t,n).shape,"int32")];case"ShapeN":return pU("x",e,t,n).map((e=>s.tensor1d(e.shape)));case"Size":return[s.scalar(pU("x",e,t,n).size,"int32")];case"Rank":return[s.scalar(pU("x",e,t,n).rank,"int32")];case"NoOp":return[s.scalar(1)];case"Print":const r=pU("x",e,t,n),o=pU("data",e,t,n),i=pU("message",e,t,n),l=pU("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<o.length;e++)console.log(Array.prototype.slice.call(o[e].dataSync()).slice(0,l));return[r];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return a((()=>((e,t,n,s=nG)=>{switch(e.op){case"Equal":return[s.equal(pU("a",e,t,n),pU("b",e,t,n))];case"NotEqual":return[s.notEqual(pU("a",e,t,n),pU("b",e,t,n))];case"Greater":return[s.greater(pU("a",e,t,n),pU("b",e,t,n))];case"GreaterEqual":return[s.greaterEqual(pU("a",e,t,n),pU("b",e,t,n))];case"Less":return[s.less(pU("a",e,t,n),pU("b",e,t,n))];case"LessEqual":return[s.lessEqual(pU("a",e,t,n),pU("b",e,t,n))];case"LogicalAnd":return[s.logicalAnd(pU("a",e,t,n),pU("b",e,t,n))];case"LogicalNot":return[s.logicalNot(pU("a",e,t,n))];case"LogicalOr":return[s.logicalOr(pU("a",e,t,n),pU("b",e,t,n))];case"Select":case"SelectV2":return[s.where(pU("condition",e,t,n),pU("a",e,t,n),pU("b",e,t,n))];case"BitwiseAnd":return[s.bitwiseAnd(pU("a",e,t,n),pU("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return a((()=>((e,t,n,s=nG)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[s.matMul(pU("a",e,t,n),pU("b",e,t,n),pU("transposeA",e,t,n),pU("transposeB",e,t,n))];case"Einsum":return[s.einsum(pU("equation",e,t,n),...pU("tensors",e,t,n))];case"Transpose":return[s.transpose(pU("x",e,t,n),pU("perm",e,t,n))];case"_FusedMatMul":const[a,r]=pU("fusedOps",e,t,n),o="biasadd"===a,i="prelu"===r,l=pU("numArgs",e,t,n),u=pU("leakyreluAlpha",e,t,n);if(o){if(i&&2!==l)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,h]=pU("args",e,t,n);return[s.fused.matMul({a:pU("a",e,t,n),b:pU("b",e,t,n),transposeA:pU("transposeA",e,t,n),transposeB:pU("transposeB",e,t,n),bias:c,activation:r,preluActivationWeights:h,leakyreluAlpha:u})];case"MatrixBandPart":return[s.linalg.bandPart(pU("a",e,t,n),pU("numLower",e,t,n),pU("numUpper",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return a((()=>((e,t,n,s=nG)=>{switch(e.op){case"EuclideanNorm":return[s.euclideanNorm(pU("x",e,t,n),pU("axis",e,t,n),pU("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[s.batchNorm(pU("x",e,t,n),pU("mean",e,t,n),pU("variance",e,t,n),pU("offset",e,t,n),pU("scale",e,t,n),pU("epsilon",e,t,n))];case"LRN":return[s.localResponseNormalization(pU("x",e,t,n),pU("radius",e,t,n),pU("bias",e,t,n),pU("alpha",e,t,n),pU("beta",e,t,n))];case"Softmax":return[s.softmax(pU("x",e,t,n))];case"LogSoftmax":return[s.logSoftmax(pU("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"ragged":return a((()=>((e,t,n,s=nG)=>{switch(e.op){case"RaggedGather":{const{outputNestedSplits:a,outputDenseValues:r}=s.raggedGather(pU("paramsNestedSplits",e,t,n),pU("paramsDenseValues",e,t,n),pU("indices",e,t,n),pU("outputRaggedRank",e,t,n));return a.concat(r)}case"RaggedRange":{const{rtNestedSplits:a,rtDenseValues:r}=s.raggedRange(pU("starts",e,t,n),pU("limits",e,t,n),pU("splits",e,t,n));return[a,r]}case"RaggedTensorToTensor":return[s.raggedTensorToTensor(pU("shape",e,t,n),pU("values",e,t,n),pU("defaultValue",e,t,n),pU("rowPartitionTensors",e,t,n),pU("rowPartitionTypes",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return a((()=>((e,t,n,s=nG)=>{switch(e.op){case"Max":{const a=pU("axis",e,t,n),r=pU("keepDims",e,t,n);return[s.max(pU("x",e,t,n),a,r)]}case"Mean":{const a=pU("axis",e,t,n),r=pU("keepDims",e,t,n);return[s.mean(pU("x",e,t,n),a,r)]}case"Min":{const a=pU("axis",e,t,n),r=pU("keepDims",e,t,n);return[s.min(pU("x",e,t,n),a,r)]}case"Sum":{const a=pU("axis",e,t,n),r=pU("keepDims",e,t,n);return[s.sum(pU("x",e,t,n),a,r)]}case"All":{const a=pU("axis",e,t,n),r=pU("keepDims",e,t,n);return[s.all(pU("x",e,t,n),a,r)]}case"Any":{const a=pU("axis",e,t,n),r=pU("keepDims",e,t,n);return[s.any(pU("x",e,t,n),a,r)]}case"ArgMax":{const a=pU("axis",e,t,n);return[s.argMax(pU("x",e,t,n),a)]}case"ArgMin":{const a=pU("axis",e,t,n);return[s.argMin(pU("x",e,t,n),a)]}case"Prod":{const a=pU("axis",e,t,n),r=pU("keepDims",e,t,n);return[s.prod(pU("x",e,t,n),a,r)]}case"Cumprod":{const a=pU("axis",e,t,n),r=pU("exclusive",e,t,n),o=pU("reverse",e,t,n);return[s.cumprod(pU("x",e,t,n),a,r,o)]}case"Cumsum":{const a=pU("axis",e,t,n),r=pU("exclusive",e,t,n),o=pU("reverse",e,t,n);return[s.cumsum(pU("x",e,t,n),a,r,o)]}case"Bincount":const a=pU("x",e,t,n),r=pU("weights",e,t,n),o=pU("size",e,t,n);return[s.bincount(a,r,o)];case"DenseBincount":{const a=pU("x",e,t,n),r=pU("weights",e,t,n),o=pU("size",e,t,n),i=pU("binaryOutput",e,t,n);return[s.denseBincount(a,r,o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return a((()=>((e,t,n,s=nG)=>{switch(e.op){case"ConcatV2":case"Concat":{const a=pU("n",e,t,n),r=pU("axis",e,t,n);let o=pU("tensors",e,t,n);return o=o.slice(0,a),[s.concat(o,r)]}case"Gather":{const a=pU("x",e,t,n),r=pU("indices",e,t,n);return[s.gather(a,s.cast(r,"int32"),0)]}case"GatherV2":{const a=pU("axis",e,t,n),r=pU("batchDims",e,t,n),o=pU("x",e,t,n),i=pU("indices",e,t,n);return[s.gather(o,s.cast(i,"int32"),a,r)]}case"Reverse":{const a=pU("dims",e,t,n),r=[];for(let e=0;e<a.length;e++)a[e]&&r.push(e);const o=pU("x",e,t,n);return[s.reverse(o,r)]}case"ReverseV2":{const a=pU("axis",e,t,n),r=pU("x",e,t,n);return[s.reverse(r,a)]}case"Slice":{const a=pU("begin",e,t,n),r=pU("size",e,t,n);return[s.slice(pU("x",e,t,n),a,r)]}case"StridedSlice":{const a=pU("begin",e,t,n),r=pU("end",e,t,n),o=pU("strides",e,t,n),i=pU("beginMask",e,t,n),l=pU("endMask",e,t,n),u=pU("ellipsisMask",e,t,n),c=pU("newAxisMask",e,t,n),h=pU("shrinkAxisMask",e,t,n),d=pU("x",e,t,n);return[s.stridedSlice(d,a,r,o,i,l,u,c,h)]}case"Pack":return ST((()=>{const a=pU("axis",e,t,n),r=pU("tensors",e,t,n),o=r[0].shape,i=s.squeeze(r[0]).shape,l=r.map((e=>{const t=cw(e.shape,o);if(!t&&!cw(s.squeeze(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:s.reshape(e,o)}));return[s.stack(l,a)]}));case"Unpack":{const a=pU("axis",e,t,n),r=pU("tensor",e,t,n);return s.unstack(r,a)}case"Tile":{const a=pU("reps",e,t,n);return[s.tile(pU("x",e,t,n),a)]}case"Split":case"SplitV":{const a=pU("axis",e,t,n),r=pU("numOrSizeSplits",e,t,n),o=pU("x",e,t,n);return s.split(o,r,a)}case"ScatterNd":{const a=pU("indices",e,t,n),r=pU("values",e,t,n),o=pU("shape",e,t,n);return[s.scatterND(a,r,o)]}case"GatherNd":{const a=pU("x",e,t,n),r=pU("indices",e,t,n);return[s.gatherND(a,r)]}case"SparseToDense":{const a=pU("sparseIndices",e,t,n),r=pU("outputShape",e,t,n),o=pU("sparseValues",e,t,n),i=pU("defaultValue",e,t,n);return[s.sparseToDense(a,o,r,o.dtype===i.dtype?i:s.cast(i,o.dtype))]}case"TensorScatterUpdate":{const a=pU("indices",e,t,n),r=pU("values",e,t,n),o=pU("tensor",e,t,n);return[s.tensorScatterUpdate(o,a,r)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return a((()=>((e,t,n,s=nG)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:a,outputValues:r,emptyRowIndicator:o,reverseIndexMap:i}=s.sparse.sparseFillEmptyRows(pU("indices",e,t,n),pU("values",e,t,n),pU("denseShape",e,t,n),pU("defaultValue",e,t,n));return[a,r,o,i]}case"SparseReshape":{const{outputIndices:a,outputShape:r}=s.sparse.sparseReshape(pU("inputIndices",e,t,n),pU("inputShape",e,t,n),pU("newShape",e,t,n));return[a,r]}case"SparseSegmentMean":return[s.sparse.sparseSegmentMean(pU("data",e,t,n),pU("indices",e,t,n),pU("segmentIds",e,t,n))];case"SparseSegmentSum":return[s.sparse.sparseSegmentSum(pU("data",e,t,n),pU("indices",e,t,n),pU("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return a((()=>((e,t,n,s=nG)=>{switch(e.op){case"FFT":return[s.fft(pU("x",e,t,n))];case"IFFT":return[s.ifft(pU("x",e,t,n))];case"RFFT":return[s.rfft(pU("x",e,t,n))];case"IRFFT":return[s.irfft(pU("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return a((()=>((e,t,n,s=nG)=>{switch(e.op){case"StaticRegexReplace":return[s.string.staticRegexReplace(pU("input",e,t,n),pU("pattern",e,t,n),pU("rewrite",e,t,n),pU("replaceGlobal",e,t,n))];case"StringNGrams":{const{nGrams:a,nGramsSplits:r}=s.string.stringNGrams(pU("data",e,t,n),pU("dataSplits",e,t,n),pU("separator",e,t,n),pU("nGramWidths",e,t,n),pU("leftPad",e,t,n),pU("rightPad",e,t,n),pU("padWidth",e,t,n),pU("preserveShortSequences",e,t,n));return[a,r]}case"StringSplit":{const{indices:a,values:r,shape:o}=s.string.stringSplit(pU("input",e,t,n),pU("delimiter",e,t,n),pU("skipEmpty",e,t,n));return[a,r,o]}case"StringToHashBucketFast":return[s.string.stringToHashBucketFast(pU("input",e,t,n),pU("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return a((()=>((e,t,n,s=nG)=>{switch(e.op){case"Cast":return[s.cast(pU("x",e,t,n),pU("dtype",e,t,n))];case"ExpandDims":{const a=pU("axis",e,t,n);return[s.expandDims(pU("x",e,t,n),a)]}case"Squeeze":{const a=pU("axis",e,t,n);return[s.squeeze(pU("x",e,t,n),a)]}case"Reshape":return[s.reshape(pU("x",e,t,n),pU("shape",e,t,n))];case"EnsureShape":return[s.ensureShape(pU("x",e,t,n),pU("shape",e,t,n))];case"MirrorPad":return[s.mirrorPad(pU("x",e,t,n),pU("padding",e,t,n),pU("mode",e,t,n))];case"PadV2":case"Pad":return[s.pad(pU("x",e,t,n),pU("padding",e,t,n),pU("constantValue",e,t,n))];case"SpaceToBatchND":{const a=pU("blockShape",e,t,n),r=pU("paddings",e,t,n);return[s.spaceToBatchND(pU("x",e,t,n),a,r)]}case"BatchToSpaceND":{const a=pU("blockShape",e,t,n),r=pU("crops",e,t,n);return[s.batchToSpaceND(pU("x",e,t,n),a,r)]}case"DepthToSpace":{const a=pU("blockSize",e,t,n),r=pU("dataFormat",e,t,n).toUpperCase();return[s.depthToSpace(pU("x",e,t,n),a,r)]}case"BroadcastTo":return[s.broadcastTo(pU("x",e,t,n),pU("shape",e,t,n))];case"BroadcastArgs":return[s.broadcastArgs(pU("s0",e,t,n),pU("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,s)=>{switch(e.op){case"HashTable":case"HashTableV2":{const a=s.getHashTableHandleByName(e.name);if(null!=a)return[a];{const a=pU("keyDType",e,t,n),r=pU("valueDType",e,t,n),o=new dG(a,r);return s.addHashTable(e.name,o),[o.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const a=pU("tableHandle",e,t,n,s),r=pU("keys",e,t,n),o=pU("values",e,t,n),i=s.getHashTableById(a.id);return[await i.import(r,o)]}case"LookupTableFind":case"LookupTableFindV2":{const a=pU("tableHandle",e,t,n,s),r=pU("keys",e,t,n),o=pU("defaultValue",e,t,n),i=s.getHashTableById(a.id);return[await i.find(r,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const a=pU("tableHandle",e,t,n,s);return[s.getHashTableById(a.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,s);case"custom":const r=dU(e.op);if(r&&r.customExecutor)return r.customExecutor(new tG(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return Mw(r)?r.then((e=>[].concat(e))):[].concat(r)}class fG{constructor(e={},t={},n={},s={},a){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=s,this.parseNodeNameCache=a,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function mG(e,t,n,s){const a=new Set,r=[];let o=null,i=null;const l=new Set,u=new Set(Object.keys(e).map((e=>bU(e)[0])));s=s||[];const c=new Set(s.map((e=>bU(e.name)[0]))),h=[...t];for(;h.length>0;){const e=h.pop();(kG(e)||wG(e)||IG(e))&&null==o&&(o=e,i=o.children.map((e=>e.name)).filter((e=>a.has(e)))),a.add(e.name),null==n[e.name]&&(u.has(e.name)||c.has(e.name)||(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),h.push(e))})):r.push(e.name)))}return{inputs:e,outputs:t,usedNodes:a,missingInputs:r,dynamicNode:o,syncInputs:i}}function gG(e,t){const{usedNodes:n,inputs:s}=t,a=Object.keys(s).map((e=>bU(e)[0])).map((t=>e.nodes[t])),r=e.initNodes||[],o=e=>n.has("string"==typeof e?e:e.name);function i(e){return[...new Map(e.map((e=>[e.name,e]))).values()]}const l=i([...a,...e.weights,...r]).filter(o),u=i([...l,...Object.values(e.nodes)]).filter(o),c=new Map(u.map((e=>[e.name,e]))),h={};for(const e of u){h[e.name]=h[e.name]||0;for(const t of e.children)o(t)||(h[t.name]=Number.POSITIVE_INFINITY),h[t.name]=(h[t.name]||0)+1}const d=Object.entries(h).filter((([,e])=>0===e)).map((([e])=>e)),p=[...d];for(;d.length>0;){const e=d.pop(),t=c.get(e);for(const e of t.children.filter(o))0==--h[e.name]&&(p.push(e.name),d.push(e.name))}const f=function(e,t){const n=new Map(e.map((e=>[e.name,e]))),s=t.map((e=>e.name)),a=new Set(s);for(;s.length>0;){const e=s.pop(),t=n.get(e);for(const e of t.children)n.has(e.name)&&!a.has(e.name)&&(a.add(e.name),s.push(e.name))}const r=e.filter((e=>a.has(e.name)));return r}(p.map((e=>c.get(e))),l);return function(e,t){const n=new Map(e.map(((e,t)=>[e.name,t]))),s=new Set(t.map((e=>e.name))),a=e=>s.has("string"==typeof e?e:e.name),r=new Set(e.map((e=>e.name))),o=e=>r.has("string"==typeof e?e:e.name);for(const t of e){for(const e of t.children.filter(o)){if(!n.has(e.name))throw new xG(`Child ${e.name} of node ${t.name} is unreachable.`);if(n.get(t.name)>n.get(e.name))throw new xG(`Node ${t.name} is scheduled to run after its child ${e.name}.`)}if(!a(t))for(const e of t.inputs){if(!n.has(e.name))throw new xG(`Input ${e.name} of node ${t.name} is unreachable.`);if(n.get(e.name)>n.get(t.name))throw new xG(`Node ${t.name} is scheduled to run before its input ${e.name}.`)}}}(f,l),f}class xG extends Error{constructor(e){super(`NodesExecutionOrderError: ${e}`)}}const bG=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),yG=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),vG=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function kG(e){return bG.has(e.op)}function wG(e){return yG.has(e.op)}function IG(e){return vG.has(e.op)}class NG{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new NG(e.functions[t],this)}))}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),s=t.map((e=>e.name)).sort();return n.join(this.SEPARATOR)+"--"+s.join(this.SEPARATOR)}compile(e,t){const n=mG(e,t,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:a,syncInputs:r}=n;if(null!=a)throw new Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${r}]`);if(s.length>0){const n=t.map((e=>e.name)),a=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${a}]. Missing the following inputs: [${s}]`)}const o=gG(this.graph,n),i=function(e){const t=new Map(e.map(((e,t)=>[e.name,t]))),n=Number.MAX_SAFE_INTEGER,s=e.map(((e,t)=>kG(e)?n:t)),a=e=>{const n=s[t.get(e.name)];return null==n?-1:n},r=e.map(((e,t)=>e.children.map(a).reduce(((e,t)=>Math.max(e,t)),s[t]))),o=new Map;for(let t=0;t<e.length;++t){const s=r[t];if(s===n)continue;const a=e[t],i=e[s];o.has(i.name)||o.set(i.name,[]),o.get(i.name).push(a)}return o}(o);return{orderedNodes:o,nodeLiveUntilMap:i}}cloneAndKeepTensor(e){if(null==e)return null;const t=e.clone();return $T(t),t}cloneTensorList(e){if(!e)return null;const t=e.map((e=>this.cloneAndKeepTensor(e)));return t}cloneTensorMap(e){return Object.fromEntries(Object.entries(e).map((([e,t])=>[e,this.cloneTensorList(t)])))}execute(e,t){this.disposeIntermediateTensors(),e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=n.map((e=>this.graph.nodes[bU(e)[0]])),a=t.map((e=>bU(e)[0])),r=new Set(a);let o=a.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const i=this.getCompilationKey(s,o);let l=this.compiledMap.get(i);null==l&&(l=this.compile(e,o),this.compiledMap.set(i,l));try{this.keepIntermediateTensors=zw().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}const u={},c={};return ST((()=>{const n=new fG(this.weightMap,u,c,this.functionExecutorMap,this.parseNodeNameCache),s=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(e).forEach((t=>{const[a,r]=bU(t,n),o=[];o[r]=e[t],s[a]=o,this.keepIntermediateTensors&&(this.clonedTensorsMap[a]=this.cloneTensorList(o))}));const a=this.getFrozenTensorIds(s),{orderedNodes:o,nodeLiveUntilMap:i}=l;for(const e of o){if(s[e.name])continue;const t=pG(e,s,n,this._resourceManager);if(Mw(t))throw new Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);s[e.name]=t,this.keepIntermediateTensors&&(this.clonedTensorsMap[e.name]=this.cloneTensorList(t)),this.checkTensorForDisposalWithNodeLiveUntilInfo(e,s,n,a,r,i.get(e.name))}return null==this.parent&&n.dispose(a),t.map((e=>fU(e,s,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,s,a,r,o){if(!kG(t)&&!r.has(e)){for(const s of n[e])null!=s&&(o[s.id]=(o[s.id]||0)+t.children.length);for(const e of t.inputs){if(kG(e))continue;const t=mU(e.name,n,s);if(null!=t)for(const e of t){if(!e||e.kept||a.has(e.id))continue;const t=o[e.id];1===t?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(e,t,n,s,a,r){function o(e){return kG(e)||a.has(e.name)}if(!kG(e)&&null!=r)for(const e of r){if(o(e))continue;const a=mU(e.name,t,n);for(const e of a)!e||e.kept||s.has(e.id)||e.dispose()}}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach((e=>{for(const t of e)t&&!t.isDisposed&&t.dispose()})),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(e,t,n=!1,s={},a={}){this.disposeIntermediateTensors(),n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepIntermediateTensors=zw().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}const r=new fG(this.weightMap,s,a,this.functionExecutorMap,this.parseNodeNameCache);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));const o=await this.executeWithControlFlow(e,r,t,n),i=t.map((e=>fU(e,o,r))),l=i.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id)),c=new Set([...l,...u,...this.weightIds]);return Object.values(o).forEach((e=>{e.forEach((e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&r.dispose(c),i}async executeFunctionAsync(e,t,n){const s=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(s,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,s){const a=Object.keys(e),r=a.map((e=>this.graph.nodes[bU(e)[0]])),o=n.map((e=>bU(e)[0])),i=new Set(o);let l=o.map((e=>this.graph.nodes[e]));0===l.length&&(l=this._outputs);const{usedNodes:u,missingInputs:c,dynamicNode:h,syncInputs:d}=mG(e,l,this.weightMap,this._initNodes),p=[...r,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),f=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=bU(t),a=[];a[s]=e[t],f[n]=a}));const m={},g=this.getFrozenTensorIds(f),x={};for(;p.length>0;){const e=this.processStack(r,p,t,f,x,g,i,m,u);await Promise.all(e)}null!=h||s||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const b=l.filter((e=>!kG(e)&&!fU(e.name,f,t))).map((e=>e.name));if(b.length>0){let e="";throw null!=h&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${d}]`),new Error(`Cannot compute the outputs [${b}] from the provided inputs [${a}]. Consider providing the following inputs: [${c}]. ${e}`)}return f}processStack(e,t,n,s,a,r,o,i,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&pU("isConstant",e.node,s,n)&&([c]=gU(e.node.name,n)),null==s[e.node.name]){const h=pG(e.node,s,n,this._resourceManager);c||([c]=gU(e.node.name,n));const d=n.currentContext;Mw(h)?u.push(h.then((u=>(s[c]=u,this.keepIntermediateTensors&&(this.clonedTensorsMap[c]=this.cloneTensorList(u)),n.currentContext=d,this.checkTensorForDisposal(c,e.node,s,n,r,o,i),this.processChildNodes(e.node,t,n,s,a,l),u)))):(s[c]=h,this.keepIntermediateTensors&&(this.clonedTensorsMap[c]=this.cloneTensorList(h)),this.checkTensorForDisposal(c,e.node,s,n,r,o,i),this.processChildNodes(e.node,t,n,s,a,l))}else this.processChildNodes(e.node,t,n,s,a,l)}return u}processChildNodes(e,t,n,s,a,r){e.children.forEach((e=>{const[o]=gU(e.name,n);!a[o]&&r.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!fU(e,s,n)))&&(a[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!fU(e,s,n)))&&(a[o]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[s]=bU(t),a=this.graph.nodes[s];if(a.attrParams.shape&&a.attrParams.shape.value){const e=a.attrParams.shape.value;ow(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}a.attrParams.dtype&&a.attrParams.dtype.value&&ow(n.dtype===a.attrParams.dtype.value,(()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){var t,n;const s={};for(const a in e){const r=null===(n=null===(t=this._signature)||void 0===t?void 0:t.inputs)||void 0===n?void 0:n[a];null!=r?s[r.name]=e[a]:s[a]=e[a]}return s}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=bU(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{var t,n;const s=null===(n=null===(t=this._signature)||void 0===t?void 0:t.outputs)||void 0===n?void 0:n[e];return null!=s?s.name:e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=bU(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class SG{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}const CG="?tfjs-format=file",$G="model.json";class TG{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(e,t={},n=AO){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new SG}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return Mw(e)?e.then((e=>this.loadSync(e))):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const s=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new NG(zU.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=zU.Instance.transformGraph(e.modelInitializer);this.initializer=new NG(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=e.initializerSignature}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}addStructuredOutputNames(e){if(this.structuredOutputKeys){const t={};return(e instanceof HC?[e]:e).forEach(((e,n)=>t[this.structuredOutputKeys[n]]=e)),t}return e}predict(e,t){const n=this.execute(e,this.outputNodes);return this.addStructuredOutputNames(n)}async predictAsync(e,t){const n=await this.executeAsync(e,this.outputNodes);return this.addStructuredOutputNames(n)}normalizeInputs(e){var t;if(!(e instanceof HC||Array.isArray(e))){const n=null===(t=this.signature)||void 0===t?void 0:t.inputs;if(null!=n)for(const t in n){const s=n[t];null!=s.resourceId&&(e[t]=this.resourceIdToCapturedInput[s.resourceId])}return e}e=Array.isArray(e)?e:[e];const n=Object.keys(this.resourceIdToCapturedInput).length;if(e.length+n!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-n} non-resource placeholders, while there are ${e.length} input tensors provided.`);let s=0;return this.inputNodes.reduce(((t,n)=>{var a,r,o;const i=null===(o=null===(r=null===(a=this.signature)||void 0===a?void 0:a.inputs)||void 0===r?void 0:r[n])||void 0===o?void 0:o.resourceId;return t[n]=null!=i?this.resourceIdToCapturedInput[i]:e[s++],t}),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}executeInitializerGraph(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(e){if(this.resourceIdToCapturedInput={},this.initializerSignature){const t=this.initializerSignature.outputs,n=Object.keys(t);for(let s=0;s<n.length;s++){const a=t[n[s]];this.resourceIdToCapturedInput[a.resourceId]=e[s]}}}execute(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&CT(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}async function EG(e,t={},n=AO){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){e.endsWith("/")||(e+="/");return`${e}${$G}${CG}`}(e));const s=new TG(e,t,n);return await s.load(),s}var RG;!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(RG||(RG={}));function AG(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&ow("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}const _G=F_;class FG extends ew{nextDataId(){return FG.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new Qk(this,IT())}write(e,t,n){this.firstUse&&(this.firstUse=!1,zw().get("IS_NODE")&&tC("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&ww(n[0])){const a=n.map((e=>$C(e)));s=this.write(a,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,s,a){this.data.set(e,{values:t,dtype:s,refCount:a})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){return SD(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return function(e,t){if(Array.isArray(e))return e;if("float32"===t)return e instanceof Float32Array?e:new Float32Array(e);if("int32"===t)return e instanceof Int32Array?e:new Int32Array(e);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(e));throw new Error(`Unknown dtype ${t}`)}(this.data.get(e).values,t)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>TC(e)));return yT(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return yT(e.shape,e.dtype,t)}makeOutput(e,t,n){return IT().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=CC();e();return{kernelMs:CC()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){AG([e],"where");const t=this.readSync(e.dataId);return _G(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function OG(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}FG.nextDataId=0;const DG={kernelName:Hw,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;AG(t,"abs");let s=new Float32Array(uw(t.shape));return s=OG(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,t.dtype)}};function MG(e){return(t,n,s,a,r)=>{const o=YE(t,n),i=o.length,l=$w(o),u=bw(r,uw(o)),c=t.length,h=n.length,d=$w(t),p=$w(n),f=KE(t,o),m=KE(n,o);if(f.length+m.length===0)for(let t=0;t<u.length;++t)u[t]=e(s[t%s.length],a[t%a.length]);else for(let t=0;t<u.length;++t){const n=Dw(t,i,l),r=n.slice(-c);f.forEach((e=>r[e]=0));const o=Ow(r,c,d),g=n.slice(-h);m.forEach((e=>g[e]=0));const x=Ow(g,h,p);u[t]=e(s[o],a[x])}return[u,o]}}function LG(e){const{inputs:t,backend:n}=e,{real:s,imag:a}=t,r=n.data.get(s.dataId).values,o=n.data.get(a.dataId).values,i=n.makeTensorInfo(s.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",r),imag:n.makeTensorInfo(a.shape,"float32",o)},i}const BG={kernelName:xI,backendName:"cpu",kernelFunc:LG};function PG(e,t,n="float32"){if("complex64"===n){return LG({inputs:{real:PG(e,t,"float32"),imag:PG(e,t,"float32")},backend:e})}const s=Aw(uw(t),n);return e.makeTensorInfo(t,n,s)}function zG(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const WG={kernelName:rN,backendName:"cpu",kernelFunc:zG};function VG(e){const{inputs:t,backend:n}=e,{input:s}=t,a=n.data.get(s.dataId).complexTensorInfos.real,r=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,r)}const UG={kernelName:JN,backendName:"cpu",kernelFunc:VG};function GG(e,t,n,s){if("int32"===s){return[t,"int32",Int32Array.from(e)]}if("bool"===s){const s=SC([0],n),[a,r]=MG(((e,t)=>e!==t?1:0))(t,[],e,s,"bool");return[r,"bool",a]}throw new Error(`Error in Cast: failed to cast ${n} to ${s}`)}function HG(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dtype:r}=s;if("complex64"===r){if("complex64"===a.dtype)return zG({inputs:{x:a},backend:n});const e=PG(n,a.shape,a.dtype),t=HG({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),s=LG({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===a.dtype){const e=VG({inputs:{input:a},backend:n}),t=HG({inputs:{x:e},backend:n,attrs:{dtype:r}});return n.disposeIntermediateTensorInfo(e),t}if(!vw(a.dtype,r)){const e=zG({inputs:{x:a},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:r}}const o=n.data.get(a.dataId).values,[i,l,u]=GG(o,a.shape,a.dtype,r);return n.makeTensorInfo(i,l,u)}const jG={kernelName:fI,backendName:"cpu",kernelFunc:HG};function XG(e,t,n,s){return null==n?({inputs:n,backend:a})=>{const{a:r,b:o}=n,i=a;AG([r,o],e);const l=i.data.get(r.dataId).values,u=i.data.get(o.dataId).values,c="string"===r.dtype?oM(l):l,h="string"===r.dtype?oM(u):u,d=s||r.dtype,[p,f]=t(r.shape,o.shape,c,h,d);return i.makeTensorInfo(f,d,p)}:({inputs:e,backend:a})=>{const{a:r,b:o}=e,i=a;if("complex64"===r.dtype||"complex64"===o.dtype){const e=HG({inputs:{x:r},backend:i,attrs:{dtype:"complex64"}}),t=i.data.get(e.dataId),s=t.complexTensorInfos.real,a=t.complexTensorInfos.imag,l=i.data.get(s.dataId).values,u=i.data.get(a.dataId).values,c=HG({inputs:{x:o},backend:i,attrs:{dtype:"complex64"}}),h=i.data.get(c.dataId),d=h.complexTensorInfos.real,p=h.complexTensorInfos.imag,f=i.data.get(d.dataId).values,m=i.data.get(p.dataId).values,[g,x,b]=n(r.shape,o.shape,l,u,f,m),y=i.makeTensorInfo(b,"float32",g),v=i.makeTensorInfo(b,"float32",x),k=LG({inputs:{real:y,imag:v},backend:i});return i.disposeIntermediateTensorInfo(e),i.disposeIntermediateTensorInfo(c),i.disposeIntermediateTensorInfo(y),i.disposeIntermediateTensorInfo(v),k}{const e=i.data.get(r.dataId).values,n=i.data.get(o.dataId).values,a=s||r.dtype,[l,u]=t(r.shape,o.shape,e,n,a);return i.makeTensorInfo(u,a,l)}}}function KG(e){return(t,n,s,a,r,o)=>{const i=YE(t,n),l=uw(i),u=i.length,c=$w(i),h=bw("float32",l),d=bw("float32",l),p=KE(t,i),f=KE(n,i),m=SD(s,a),g=SD(r,o),x=t.length,b=$w(t),y=n.length,v=$w(n);if(p.length+f.length===0)for(let t=0;t<h.length;t++){const n=t%m.length,s=t%g.length,a=e(m[2*n],m[2*n+1],g[2*s],g[2*s+1]);h[t]=a.real,d[t]=a.imag}else for(let t=0;t<h.length;t++){const n=Dw(t,u,c),s=n.slice(-x);p.forEach((e=>s[e]=0));const a=Ow(s,x,b),r=n.slice(-y);f.forEach((e=>r[e]=0));const o=Ow(r,y,v),i=e(m[2*a],m[2*a+1],g[2*o],g[2*o+1]);h[t]=i.real,d[t]=i.imag}return[h,d,i]}}const qG=MG(((e,t)=>e+t)),YG=KG(((e,t,n,s)=>({real:e+n,imag:t+s}))),ZG=XG(Kw,qG,YG),JG={kernelName:Kw,backendName:"cpu",kernelFunc:ZG};function QG(e,t,n,s,a){const r=uw(s),o=Aw(a,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=a||(o[s]+=r>0?t[n]:1)}return o}function eH(e,t,n,s=!1){const a=e.shape[0],r=e.shape[1],o=yT([a,n],t.dtype);for(let i=0;i<a;i++)for(let a=0;a<r;a++){const r=e.get(i,a);if(r<0)throw new Error("Input x must be non-negative!");r>=n||(s?o.set(1,i,r):t.size>0?o.set(o.get(i,r)+t.get(i,a),i,r):o.set(o.get(i,r)+1,i,r))}return o}const tH=MG(((e,t)=>e&t)),nH=XG(dI,tH),sH={kernelName:dI,backendName:"cpu",kernelFunc:nH};function aH(e){return(t,n,s)=>{const a=yw(n,t.length);for(let n=0;n<t.length;++n)a[n]=e(t[n],s);return a}}function rH(e,t,n){return oH(e,aH(t),n)}function oH(e,t,n){return({inputs:s,attrs:a,backend:r})=>{const{x:o}=s;AG(o,e);const i=r,l=i.data.get(o.dataId).values;let u;if("string"===o.dtype){if(!Array.isArray(l))throw new Error("String tensor's value was not an instance of Array");u=oM(l)}else u=l;const c=n||o.dtype,h=t(u,c,a);return i.makeTensorInfo(o.shape,c,h)}}const iH=aH((e=>Math.ceil(e))),lH=oH(mI,iH),uH={kernelName:mI,backendName:"cpu",kernelFunc:lH};function cH(e,t,n,s){const a=yw(n,uw(t));if(s&&"string"!==n){let t=0;e.forEach((e=>{const n=uw(e.shape);a.set(e.vals,t),t+=n}))}else{let s=0;e.forEach((e=>{const r="string"===n?oM(e.vals):e.vals;let o=0;for(let n=0;n<e.shape[0];++n){const i=n*t[1]+s;for(let t=0;t<e.shape[1];++t)a[i+t]=r[o++]}s+=e.shape[1]}))}return a}const hH=MG(((e,t)=>e===t?1:0)),dH=XG(HI,hH,null,"bool"),pH={kernelName:HI,backendName:"cpu",kernelFunc:dH},fH=aH((e=>Math.exp(e))),mH=oH(jI,fH,"float32"),gH={kernelName:jI,backendName:"cpu",kernelFunc:mH},xH=aH((e=>Math.expm1(e))),bH=oH(KI,xH),yH={kernelName:KI,backendName:"cpu",kernelFunc:bH},vH=aH((e=>Math.floor(e))),kH=oH(JI,vH),wH={kernelName:JI,backendName:"cpu",kernelFunc:kH},IH=MG(((e,t)=>Math.floor(e/t))),NH=XG(QI,IH,null,"int32"),SH={kernelName:QI,backendName:"cpu",kernelFunc:NH};function CH(e,t,n,s,a,r,o,i,l){const u=yT([s,r],n);for(let n=0;n<s;n++){const s=[];let c=0;for(let t=0;t<a;t++){const r=e[n*a+t];c+=r*o[t],s.push(r)}if(c<0||c>=l/r)throw new Error(`Invalid indices: ${s} does not index into ${i}`);for(let e=0;e<r;e++)u.values[n*r+e]=t.get(...t.indexToLoc(c*r+e))}return u}function $H(e,t,n){const s=yT(n,e.dtype);for(let n=0;n<s.size;++n){const a=s.indexToLoc(n).slice(),r=a[0],o=a[2],i=t.locToIndex([r,o]);a[2]=t.values[i];const l=e.locToIndex(a);0<=l&&l<e.values.length&&(s.values[n]=e.values[l])}return s}const TH=MG(((e,t)=>e>t?1:0)),EH=XG(sN,TH,null,"bool"),RH={kernelName:sN,backendName:"cpu",kernelFunc:EH},AH=MG(((e,t)=>e>=t?1:0)),_H=XG(aN,AH,null,"bool"),FH={kernelName:aN,backendName:"cpu",kernelFunc:_H},OH=MG(((e,t)=>e<t?1:0)),DH=XG(dN,OH,null,"bool"),MH={kernelName:dN,backendName:"cpu",kernelFunc:DH},LH=MG(((e,t)=>e<=t?1:0)),BH=XG(pN,LH,null,"bool"),PH={kernelName:pN,backendName:"cpu",kernelFunc:BH};function zH(e,t,n){const s=(t-e)/(n-1),a=Aw(n,"float32");a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+s;return a}const WH=aH((e=>Math.log(e))),VH=oH(mN,WH),UH={kernelName:mN,backendName:"cpu",kernelFunc:VH};function GH(e,t,n,s){const a=bw(s,uw(n));for(let n=0;n<a.length;++n){const s=n*t;let r=e[s];for(let n=0;n<t;++n){const t=e[s+n];(Number.isNaN(t)||t>r)&&(r=t)}a[n]=r}return a}const HH=MG(((e,t)=>Math.max(e,t))),jH=XG(IN,HH),XH={kernelName:IN,backendName:"cpu",kernelFunc:jH},KH=MG(((e,t)=>Math.min(e,t))),qH=XG(AN,KH),YH={kernelName:AN,backendName:"cpu",kernelFunc:qH},ZH=MG(((e,t)=>e*t)),JH=KG(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),QH=XG(DN,ZH,JH),ej={kernelName:DN,backendName:"cpu",kernelFunc:QH};function tj(e,t,n){const s=NC(-1,n);return ZH([],t,s,e,n)}const nj={kernelName:MN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;AG(s,"neg");const a=n.data.get(s.dataId).values,[r,o]=tj(a,s.shape,s.dtype);return n.makeTensorInfo(o,s.dtype,r)}},sj=MG(((e,t)=>e!==t?1:0)),aj=XG(LN,sj,null,"bool"),rj={kernelName:LN,backendName:"cpu",kernelFunc:aj};function oj(e,t,n,s,a){const r=t.length,o=uw(t),i=$w(t),l=$w(a),u=bw(n,uw(a));for(let t=0;t<o;++t){const n=Dw(t,r,i),a=new Array(n.length);for(let e=0;e<a.length;e++)a[e]=n[s[e]];u[Ow(a,r,l)]=e[t]}return u}function ij(e){const{inputs:t,attrs:n,backend:s}=e,{x:a}=t,{perm:r}=n;AG(a,"transpose");const o=a.shape.length,i=new Array(o);for(let e=0;e<i.length;e++)i[e]=a.shape[r[e]];const l=oj(s.data.get(a.dataId).values,a.shape,a.dtype,r,i);return{dataId:s.write(l,i,a.dtype),shape:i,dtype:a.dtype}}const lj={kernelName:GS,backendName:"cpu",kernelFunc:ij};function uj(e,t,n,s){const[a,r]=lR(e,s),o=e$(t,"int32"),i=Aw(uw(a),o),l=uw(r);for(let e=0;e<i.length;++e){const t=e*l;let s=1;for(let e=0;e<l;++e)s*=n[t+e];i[e]=s}return{outVals:i,outShape:a,outDtype:o}}const cj={kernelName:XN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s;AG(a,"prod");const i=a.shape.length,l=gw(r,a.shape),u=hR(l,i);let c=l,h=a;const d=[];null!=u&&(h=ij({inputs:{x:a},backend:n,attrs:{perm:u}}),d.push(h),c=pR(c.length,i));const p=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=uj(h.shape,h.dtype,p,c);let x=m;return o&&(x=uR(m,l)),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(x,g,f)}};function hj(e,t,n,s){const a=[];let r=0;const o=t.length-1+n.length,i=new Array(o).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const s=e[n],a=n===e.length-1?t:e[n+1].length;if(0===s.length)throw new Error("Ragged splits may not be empty");if(s[0]<0)throw new Error("Ragged splits must be non-negative");if(s[s.length-1]>a)throw new Error("Ragged splits must not point past values");for(let e=1;e<s.length;++e)if(s[e-1]>s[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,s);let l=1;for(let e=0;e<t.length-1;++e){l*=t[e];const n=t[e+1];for(let t=1;t<l+1;++t)i[e].push(t*n)}for(let s=0;s<e.length;++s){let o=e[s],l=e[s]+1;for(let e=0;e<n.length;++e){const s=n[e],a=e+t.length-1;if(a>=0){const e=i[a],t=e[e.length-1]-s[o];for(let e=o;e<l;++e)i[a].push(s[e+1]+t)}o=s[o],l=s[l]}l!==o&&(a.push([o,l]),r+=l-o)}return{outSplits:i,valueSlices:a,numValues:r}}function dj(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let s=t;s<e.length;s++)n[t-1]*=e[s];return n}function pj(e,t,n,s,a){const r=t.slice();r[0]=a;const o=yw(n,uw(r)),i=e.length;return function(e,t,n,s,a,r){const o=dj(t,2)[1],i=dj(r,2)[1];let l=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<s;++t)a[l*i+t]=e[n*o+t];++l}}(e,t,s,0===i?0:i/t[0],o,r),[o,r]}function fj(e,t,n,s,a,r,o,i){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach(((e,s)=>{if(e<0||e>=n){const a=Dw(s,t.length,$w(t)).join(",");throw new Error(`indices[${a}] = ${e} is not in [0, ${n})`)}}))}(r,o,t[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const l=s[0],{outSplits:u,valueSlices:c,numValues:h}=hj(r,o,e,l),d=function(e){const t=[];for(let n=0;n<e.length;++n){const s=yw("int32",e[n].length);t.push(s),e[n].forEach(((e,t)=>s[t]=e))}return t}(u),p=pj(n,s,a,c,h);return[d,p[0],p[1]]}const mj=2147483647;function gj(e,t,n,s,a,r,o){if(t.length>1)throw new Error("starts must be a scalar or vector");if(a.length>1)throw new Error("limits must be a scalar or vector");if(o.length>1)throw new Error("deltas must be a scalar or vector");const i=0===t.length,l=0===a.length,u=0===o.length,c=[];i||c.push(t[0]),l||c.push(a[0]),u||c.push(o[0]);for(let e=1;e<c.length;++e)if(c[e]!==c[e-1])throw new Error("starts, limits, and deltas must have the same shape");const h=0===c.length?1:c[0],d=yw("int32",h+1);d[0]=0;for(let t=0;t<h;++t){const n=i?e[0]:e[t],a=l?s[0]:s[t],o=u?r[0]:r[t];if(0===o)throw new Error("Requires delta != 0");let c;if(o>0&&a<n||o<0&&a>n)c=0;else if(c=Math.ceil(Math.abs((a-n)/o)),c>mj)throw new Error(`Requires ((limit - start) / delta) <= ${mj}`);d[t+1]=d[t]+c}const p=yw(n,d[h]);let f=0;for(let t=0;t<h;++t){const n=d[t+1]-d[t];let s=i?e[0]:e[t];const a=u?r[0]:r[t];for(let e=0;e<n;++e)p[f++]=s,s+=a}return[d,p]}var xj=aD;class bj{constructor(e,t,n,s,a,r,o,i,l,u){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=s,this.valuesDType=a,this.defaultValue=r,this.defaultValueShape=o,this.rowPartitionValues=i,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=oD(u),this.raggedRank=iD(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===xj.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===xj.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case xj.VALUE_ROWIDS:return bj.getMaxWidthValueRowID(t);case xj.ROW_SPLITS:return bj.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${xj[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let s=0;s<t-1;++s){const t=e[s+1]-e[s];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,s=e[0],a=0;for(let r=1;r<t;++r){const t=e[r];t!==s&&(s=t,a=Math.max(r-n,a),n=r)}return Math.max(t-n,a)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return vj(e,n)}calculateOutputSize(e){const t=this.valuesShape;lD(this.defaultValueShape,t);const n=this.tensorShapeFromTensor(this.shape,this.shapeShape),s=rD(this.raggedRank,n,t);s[0]<0&&(s[0]=e);for(let e=1;e<=this.raggedRank;++e)s[e]<0&&(s[e]=this.getMaxWidth(e));return s}calculateFirstParentOutputIndex(e,t,n){const s=Math.min(e,n),a=[];let r=0;for(let e=0;e<s;++e,r+=t)a.push(r);for(let t=s;t<e;++t)a.push(-1);return ow(a.length===e,(()=>"Final length of result must be equal to firstDimension.")),a}calculateOutputIndexRowSplit(e,t,n,s){const a=e.length,r=[];for(let o=0;o<a-1;++o){const a=e[o+1]-e[o];let i=Math.min(s,a),l=t[o];-1===l&&(i=0);for(let e=0;e<i;++e)r.push(l),l+=n;for(let e=0;e<a-i;++e)r.push(-1)}if(a>0&&r.length!==e[a-1])throw new Error("Invalid row split size.");return r}calculateOutputIndexValueRowID(e,t,n,s){const a=e.length,r=[];if(0===a)return[];let o=0,i=e[0];if(i>=t.length)throw new Error(`Got currentValueRowId=${i}, which is not less than ${t.length}`);let l=t[i];r.push(l);for(let u=1;u<a;++u){const a=e[u];if(a===i)l>=0&&(++o,o<s?l+=n:l=-1);else{if(o=0,i=a,a>=t.length)throw new Error(`Got nextValueRowId=${a} which is not less than ${t.length}`);l=t[a]}r.push(l)}if(r.length!==e.length)throw new Error("Invalid row ids.");return r}calculateOutputIndex(e,t,n,s){const a=this.getRowPartitionTensor(e),r=this.getRowPartitionTypeByDimension(e);switch(r){case xj.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(a,t,n,s);case xj.ROW_SPLITS:if(a.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${a.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(a,t,n,s);default:throw new Error(`Unsupported partition type: ${xj[r]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case xj.FIRST_DIM_SIZE:return e[0];case xj.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case xj.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${xj[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];const s=vj(t,!1),a=yw(this.valuesDType,uw(s));if(n[0]*t[0]>0){let r=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e){r=this.calculateOutputIndex(e-1,r,n[e],t[e])}this.setOutput(this.raggedRank,r,a,s)}return[s,a]}setOutput(e,t,n,s){if(0===n.length)return;const a=this.values,r=n;let o=s.slice();o=o.slice(e+1);const i=uw(o),l=t.length;let u=this.defaultValue;if(u.length!==i&&1!==u.length){const e=this.defaultValueShape;ST((()=>{const t=iE(u,e),n=NE(t,o);u=n.dataSync()}))}let c=0,h=0,d=0;for(let e=0;e<=l;++e){let s=e<l?t[e]:-1;if(s!==d){if(h<d){const e=a.subarray(c*i);yj(r.subarray(h*i),e,(d-h)*i)}if(e>=l){const e=n.length;s=Math.floor(e/i)}if(s>d)if(1===this.defaultValue.length)r.subarray(d*i,s*i).fill(this.defaultValue[0]),d=s;else for(;s>d;){yj(r.slice(d*i),u,i),++d}s<0?(c=e+1,h=d):(c=e,h=d,d=h+1)}else++d}}}function yj(e,t,n){for(let s=0;s<n;s++)e[s]=t[s]}function vj(e,t){const n=[];for(let s of e){if(s<0){if(!t)throw new Error(`Dimension ${s} must be >= 0`);if(s<-1)throw new Error(`Dimension ${s} must be >= -1`);s=-1}n.push(s)}return n}function kj(e,t,n,s,a,r,o,i,l,u){return new bj(e,t,n,s,a,r,o,i,l,u).compute()}function wj(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return Aw(0,s);const a=Aw(Math.abs(Math.ceil((t-e)/n)),s);t<e&&1===n&&(n=-1),a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+n;return a}const Ij=aH((e=>1/Math.sqrt(e))),Nj=oH(uS,Ij),Sj={kernelName:uS,backendName:"cpu",kernelFunc:Nj};function Cj(e,t,n,s,a,r,o,i,l,u){const c=[s/a,a],h=e.values,d=t.values;if(0===s)return yT(n,t.dtype);const p=l instanceof VC?l:yT(c,t.dtype);"string"==typeof l||"number"==typeof l?p.values.fill(l):"boolean"==typeof l&&p.values.fill(+l);for(let e=0;e<r;e++){const r=[];let l=0;for(let t=0;t<o;t++){const n=h[e*o+t];r.push(n),l+=n*i[t]}if(l<0||l>=s/a)throw new Error(`Invalid indices: ${r} does not index into ${n}`);for(let n=0;n<a;n++)u?p.values[l*a+n]+=d[e*a+n]:p.values[l*a+n]=0===t.rank?d[0]:d[e*a+n]}return p}const $j=aH((e=>1/(1+Math.exp(-e)))),Tj=rH(yS,(e=>1/(1+Math.exp(-e)))),Ej={kernelName:yS,backendName:"cpu",kernelFunc:Tj};function Rj(e,t,n,s,a){const r=XO(s,t,n),o=uw(n),i=$w(s);if(r){const n=KO(t,i);return"string"===a?e.slice(n,n+o):e.subarray(n,n+o)}const l=yT(s,a,"string"===a?oM(e):e),u=yT(n,a);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),s=n.map(((e,n)=>e+t[n]));u.set(l.get(...s),...n)}return"string"===a?iM(u.values):u.values}function Aj(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:r,size:o}=s;AG(a,"slice");const[i,l]=qO(a,r,o);LO(a,i,l);const u=Rj(n.data.get(a.dataId).values,i,l,a.shape,a.dtype);return n.makeTensorInfo(l,a.dtype,u)}const _j={kernelName:mS,backendName:"cpu",kernelFunc:Aj};function Fj(e,t,n,s,a,r,o){const i=t[0],l=r[0],u=new Array(l),c=new Array(i),h=t[1];if(0===l){if(0!==i)throw new Error(GD(i));return[yw(n,0),[0,h],yw(a,0),u,c]}let d=!0,p=0;const f=new Array(l).fill(0);for(let t=0;t<i;++t){const n=e[t*h];if(n<0)throw new Error(HD(t,n));if(n>=l)throw new Error(jD(t,n,l));++f[n],d=d&&n>=p,p=n}let m=!0;for(let e=0;e<l;++e){const t=0===f[e];u[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&d){const t=e,n=s;for(let e=0;e<i;++e)c[e]=e;return[t,[i,h],n,u,c]}{const t=f[l-1],r=yw(n,t*h),d=yw(a,t),p=new Array(l).fill(0);for(let t=0;t<i;++t){const n=e[t*h],a=p[n],o=(0===n?0:f[n-1])+a;p[n]++;for(let n=0;n<h;++n)r[o*h+n]=e[t*h+n];d[o]=s[t],c[t]=o}for(let e=0;e<l;++e){if(0===p[e]){const t=0===e?0:f[e-1];r[t*h+0]=e;for(let e=1;e<h;++e)r[t*h+e]=0;d[t]=o}}return[r,[t,h],d,u,c]}}function Oj(e,t,n,s,a){const r=uw(s),o=t[0],i=a.length,l=[];let u=1,c=-1;for(let e=0;e<i;++e){const t=a[e];if(-1===t){if(-1!==c)throw new Error(XD(c,e));c=e,l.push(1)}else{if(t<0)throw new Error(KD(e,t));u*=t,l.push(t)}}if(-1!==c){if(u<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(r/u);if(u*e!==r)throw new Error(YD(s,l));l[c]=e}if(uw(l)!==r)throw new Error(ZD(s,l));const h=s.length,d=[];if(h>0){d[h-1]=1;for(let e=h-2;e>=0;--e)d[e]=d[e+1]*s[e+1]}const p=[];if(i>0){p[i-1]=1;for(let e=i-2;e>=0;--e)p[e]=p[e+1]*l[e+1]}const f=yw(n,o*i);for(let t=0;t<o;++t){let n=0;for(let s=0;s<h;++s)n+=e[t*h+s]*d[s];for(let e=0;e<i;++e)f[t*i+e]=Math.trunc(n/p[e]),n%=p[e]}return[f,[o,i],l]}function Dj(e,t,n,s,a,r=!1,o=0){const i=s.length,l=[t[0],e.length/t[0]],u=l[1],c=i>0?a[i-1]+1:0;if(c<0)throw new Error("segment ids must be >= 0");const h=t.slice();h[0]=c;const d=yw(n,h.reduce(((e,t)=>e*t),1));if(0===i)return c>0&&d.fill(o),[d,h];if(c<=0)throw new Error("segment ids must be >= 0");let p=0,f=1,m=0,g=a[p];for(;;){let t=0;if(f<i){if(t=a[f],g===t){++f;continue}if(g>=t)throw new Error("segment ids are not increasing")}if(g<0||g>=c)throw new Error(eM(g,c));g>m&&d.fill(o,m*u,g*u);for(let t=p;t<f;++t){const n=s[t];if(n<0||n>=l[0])throw new Error(tM(t,s[t],l[0]));for(let t=0;t<u;t++)d[g*u+t]+=e[n*u+t]}if(r)for(let e=0;e<u;e++)d[g*u+e]/=f-p;if(p=f,++f,m=g+1,g=t,f>i)break}return m<c&&d.fill(o,m*u,c*u),[d,h]}const Mj=aH((e=>Math.sqrt(e))),Lj=rH(kS,(e=>Math.sqrt(e))),Bj={kernelName:kS,backendName:"cpu",kernelFunc:Lj},Pj=MG(((e,t)=>{const n=e-t;return n*n})),zj=XG(AS,Pj),Wj={kernelName:AS,backendName:"cpu",kernelFunc:zj},Vj=aH(((e,t)=>{const{pattern:n,replaceGlobal:s,rewrite:a}=t;return e.replace(new RegExp(n,s?"g":""),a)})),Uj=oH(FS,Vj),Gj={kernelName:FS,backendName:"cpu",kernelFunc:Uj};function Hj(e,t,n,s){const a=yT(e,t.dtype);for(let e=0;e<a.size;e++){const r=a.indexToLoc(e),o=new Array(r.length);for(let e=0;e<o.length;e++)o[e]=r[e]*n[e]+s[e];a.set(t.get(...o),...r)}return a}class jj{constructor(e,t,n,s,a,r){this.separator=$C(e),this.nGramWidths=t,this.leftPad=$C(n),this.rightPad=$C(s),this.padWidth=a,this.preserveShort=r}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,s,a,r){for(let o=0;o<a;++o){const i=this.getPadWidth(r),l=Math.max(0,i-o),u=Math.max(0,i-(a-(o+1))),c=r-(l+u),h=t+(l>0?0:o-i);let d=0;d+=l*this.leftPad.length;for(let t=0;t<c;++t)d+=e[h+t].length;d+=u*this.rightPad.length;d+=(l+u+c-1)*this.separator.length,n[s+o]=new Uint8Array(d);const p=n[s+o];let f=0;const m=e=>e.forEach((e=>p[f++]=e));for(let e=0;e<l;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[h+t]),m(this.separator);if(c>0){m(e[h+c-1]);for(let e=0;e<u;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<u-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,s=t.length;if(s>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let a=1;a<s;++a){let s=t[a]>=e;if(s=s&&t[a]<=n,!s)throw new Error(`Invalid split value ${t[a]}, must be in [${e}, ${n}]`);e=t[a]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const a=s-1,r=yw("int32",s);if(0===n||0===s){const e=new Array(n);for(let e=0;e<=a;++e)r[e]=0;return[e,r]}r[0]=0;for(let e=1;e<=a;++e){const n=t[e]-t[e-1];let s=0;this.nGramWidths.forEach((e=>{s+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===s&&(s=1),r[e]=r[e-1]+s}const o=new Array(r[a]);for(let n=0;n<a;++n){const s=t[n];let a=r[n];if(this.nGramWidths.forEach((r=>{const i=t[n+1]-t[n],l=this.getNumNGrams(i,r);this.createNGrams(e,s,o,a,l,r),a+=l})),this.preserveShort&&a===r[n]){const r=t[n+1]-t[n];if(0===r)continue;const i=r+2*this.padWidth,l=1;this.createNGrams(e,s,o,a,l,i)}}return[o,r]}}function Xj(e,t,n,s,a,r,o,i){return new jj(n,s,a,r,o,i).compute(e,t)}function Kj(e,t,n,s){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)s.push(e.subarray(t,t+1));return}if(1===t.length){const a=t[0];let r=e.indexOf(a);for(;-1!==r;){const t=e.subarray(0,r);n&&0===t.length||s.push(t),r=(e=e.subarray(r+1)).indexOf(a)}return void(n&&0===e.length||s.push(e))}let a=0;for(let r=0;r<e.length+1;r++)if(r===e.length||-1!==t.indexOf(e[r])){const t=e.subarray(a,r);n&&0===t.length||s.push(t),a=r+1}}function qj(e,t,n){const s=e.length,a=[];let r=0,o=0;const i=new Array(s);for(let l=0;l<s;++l){const s=a.length;Kj(e[l],t,n,a);const u=a.length-s;i[l]=u,r+=u,o=Math.max(o,u)}const l=yw("int32",2*r),u=new Array(r),c=[s,o];let h=0;for(let e=0;e<s;++e)for(let t=0;t<i[e];++t)l[2*h]=e,l[2*h+1]=t,u[h]=a[h],++h;return[l,u,c]}function Yj(e,t){const n=yw("int32",e.length);for(let s=0;s<e.length;++s)n[s]=IC(e[s]).modulo(t).getLowBitsUnsigned();return n}const Zj=MG(((e,t)=>e-t)),Jj=KG(((e,t,n,s)=>({real:e-n,imag:t-s}))),Qj=XG(BS,Zj,Jj),eX={kernelName:BS,backendName:"cpu",kernelFunc:Qj};function tX(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const s=yT(n,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),a=new Array(e.rank);for(let t=0;t<a.length;t++)a[t]=n[t]%e.shape[t];const r=e.locToIndex(a);s.values[t]=e.values[r]}return s}const nX=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function sX(e,t,n=0,s=e.length-1){for(;s>n;){if(s-n>600){const a=s-n+1,r=t-n+1,o=Math.log(a),i=.5*Math.exp(2*o/3),l=.5*Math.sqrt(o*i*(a-i)/a)*Math.sign(r-a/2);sX(e,t,Math.max(n,Math.floor(t-r*i/a+l)),Math.min(s,Math.floor(t+(a-r)*i/a+l)))}const a=e[t];let r=n,o=s;for(rw(e,n,t),nX(e[s],a)>0&&rw(e,n,s);r<o;){for(rw(e,r,o),r++,o--;nX(e[r],a)<0;)r+=1;for(;nX(e[o],a)>0;)o-=1}0===nX(e[n],a)?rw(e,n,o):(o+=1,rw(e,o,s)),o<=t&&(n=o+1),t<=o&&(s=o-1)}}function aX(e,t,n,s,a){const r=t[t.length-1],[o,i]=[e.length/r,r],l=bw(n,o*s),u=bw("int32",o*s);for(let t=0;t<o;t++){const n=t*i,r=e.subarray(n,n+i);let o=new Array(r.length);r.forEach(((e,t)=>o[t]={value:e,index:t})),s<o.length&&(sX(o,s),o=o.slice(0,s)),a&&o.sort(nX);const c=t*s,h=l.subarray(c,c+s),d=u.subarray(c,c+s);for(let e=0;e<s;e++)h[e]=o[e].value,d[e]=o[e].index}const c=t.slice();return c[c.length-1]=s,[yT(c,n,l),yT(c,"int32",u)]}function rX(e,t,n,s){const a=gw(t,n)[0],r=[1,n[0],1];for(let e=0;e<a;e++)r[0]*=n[e];r[1]=n[a];for(let e=a+1;e<n.length;e++)r[2]*=n[e];const o=new Map,i=new Int32Array(n[a]),l=new VC(r,s,e),u=[],c=1===r[0]&&1===r[2];for(let t=0;t<n[a];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<r[0];n++)for(let s=0;s<r[2];s++)e.push(l.get(n,t,s));n=e.join(",")}const s=o.get(n);if(null!=s)i[t]=s;else{const e=o.size;o.set(n,e),i[t]=e,u.push(t)}}const h=r.slice();h[1]=o.size;const d=new VC(h,s);u.forEach(((e,t)=>{for(let n=0;n<r[0];n++)for(let s=0;s<r[2];s++)d.set(l.get(n,e,s),n,t,s)}));const p=n.slice();return p[a]=h[1],{outputValues:d.values,outputShape:p,indices:i}}var oX=Object.freeze({__proto__:null,simpleAbsImpl:OG,addImpl:qG,bincountImpl:QG,bincountReduceImpl:eH,bitwiseAndImpl:tH,castImpl:GG,ceilImpl:iH,concatImpl:cH,equalImpl:hH,expImpl:fH,expm1Impl:xH,floorImpl:vH,floorDivImpl:IH,gatherNdImpl:CH,gatherV2Impl:$H,greaterImpl:TH,greaterEqualImpl:AH,lessImpl:OH,lessEqualImpl:LH,linSpaceImpl:zH,logImpl:WH,maxImpl:GH,maximumImpl:HH,minimumImpl:KH,multiplyImpl:ZH,negImpl:tj,notEqualImpl:sj,prodImpl:uj,raggedGatherImpl:fj,raggedRangeImpl:gj,raggedTensorToTensorImpl:kj,rangeImpl:wj,rsqrtImpl:Ij,scatterImpl:Cj,sigmoidImpl:$j,sliceImpl:Rj,sparseFillEmptyRowsImpl:Fj,sparseReshapeImpl:Oj,sparseSegmentReductionImpl:Dj,sqrtImpl:Mj,squaredDifferenceImpl:Pj,staticRegexReplaceImpl:Vj,stridedSliceImpl:Hj,stringNGramsImpl:Xj,stringSplitImpl:qj,stringToHashBucketFastImpl:Yj,subImpl:Zj,tileImpl:tX,topKImpl:aX,transposeImpl:oj,uniqueImpl:rX});TT("cpu",(()=>new FG),1);const iX=rH(VI,(e=>e>=0?e:Math.exp(e)-1)),lX={kernelName:VI,backendName:"cpu",kernelFunc:iX};function uX(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{alpha:r}=s;AG([a],"leakyRelu");const o=uw(a.shape),i=n.data.get(a.dataId).values,l=bw("float32",o);for(let e=0;e<i.length;e++)l[e]=i[e]<0?r*i[e]:i[e];return n.makeTensorInfo(a.shape,"float32",l)}const cX={kernelName:hN,backendName:"cpu",kernelFunc:uX},hX=MG(((e,t)=>e<0?t*e:e));function dX(e){const{inputs:t,backend:n}=e,{x:s,alpha:a}=t;AG([s,a],"prelu");const r=n.data.get(s.dataId).values,o=n.data.get(a.dataId).values,[i,l]=hX(s.shape,a.shape,r,o,"float32");return n.makeTensorInfo(l,"float32",i)}const pX={kernelName:jN,backendName:"cpu",kernelFunc:dX},fX=rH(eS,(e=>Math.max(0,e))),mX={kernelName:eS,backendName:"cpu",kernelFunc:fX},gX=rH(oS,(e=>Math.min(Math.max(0,e),6))),xX={kernelName:oS,backendName:"cpu",kernelFunc:gX};function bX(e,t,n,s,a){if("linear"===n)return zG({inputs:{x:t},backend:e});if("relu"===n)return fX({inputs:{x:t},backend:e});if("elu"===n)return iX({inputs:{x:t},backend:e});if("relu6"===n)return gX({inputs:{x:t},backend:e});if("prelu"===n)return dX({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return uX({inputs:{x:t},backend:e,attrs:{alpha:a}});if("sigmoid"===n)return Tj({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function yX(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{shape:r}=s,o=uw(a.shape),i=mw(r,o),l=uw(i);ow(o===l,(()=>`The new shape (${i}) has ${l} elements and the old shape (${a.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(a.dataId);const u=n.data.get(a.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=i,t.shape=i}return{dataId:a.dataId,shape:i,dtype:a.dtype}}const vX={kernelName:tS,backendName:"cpu",kernelFunc:yX};function kX(e){const{inputs:t,backend:n,attrs:s}=e,{a:a,b:r}=t,{transposeA:o,transposeB:i}=s;AG([a,r],"matMul");const l=a.shape.length,u=r.shape.length,c=o?a.shape[l-2]:a.shape[l-1],h=i?r.shape[u-1]:r.shape[u-2],d=o?a.shape[l-1]:a.shape[l-2],p=i?r.shape[u-2]:r.shape[u-1],f=a.shape.slice(0,-2),m=r.shape.slice(0,-2),g=uw(f),x=uw(m),b=YE(a.shape.slice(0,-2),r.shape.slice(0,-2)).concat([d,p]);ow(c===h,(()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${a.shape} and ${r.shape} and transposeA=${o} and transposeB=${i} must match.`));const y=i?[x,p,h]:[x,h,p],v=yX({inputs:{x:a},backend:n,attrs:{shape:o?[g,c,d]:[g,d,c]}}),k=yX({inputs:{x:r},backend:n,attrs:{shape:y}}),w=o?v.shape[1]:v.shape[2],I=o?v.shape[2]:v.shape[1],N=i?k.shape[1]:k.shape[2],S=Math.max(g,x),C=n.data.get(v.dataId).values,$=n.data.get(k.dataId).values,T=$w(v.shape),E=$w(k.shape),[R,A,_]=o?[T[0],1,T[1]]:[T[0],T[1],1],[F,O,D]=i?[1,E[1],E[0]]:[E[1],1,E[0]],M=I*N,L=yT([S,I,N],v.dtype),B=L.values,P=n.blockSize;for(let e=0;e<S;e++){const t=e%g,n=e%x;for(let s=0;s<I;s+=P){const a=Math.min(s+P,I);for(let r=0;r<N;r+=P){const o=Math.min(r+P,N);for(let i=0;i<w;i+=P){const l=Math.min(i+P,w);for(let u=s;u<a;u++)for(let s=r;s<o;s++){let a=0;for(let e=i;e<l;e++){a+=C[t*R+u*A+e*_]*$[e*F+s*O+n*D]}B[e*M+(u*N+s)]+=a}}}}}return n.disposeIntermediateTensorInfo(v),n.disposeIntermediateTensorInfo(k),n.makeTensorInfo(b,L.dtype,L.values)}const wX={kernelName:uI,backendName:"cpu",kernelFunc:kX};const IX={kernelName:JS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:a,b:r,bias:o,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let d,p,f;const m=[];d=kX({inputs:{a:a,b:r},attrs:{transposeA:l,transposeB:u},backend:n}),o&&(p=ZG({inputs:{a:d,b:o},backend:n}),m.push(d),d=p),c&&(f=bX(n,d,c,i,h),m.push(d),d=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return d}},NX=rH(jw,(e=>Math.acos(e))),SX={kernelName:jw,backendName:"cpu",kernelFunc:NX},CX=rH(Xw,(e=>Math.acosh(e))),$X={kernelName:Xw,backendName:"cpu",kernelFunc:CX};const TX={kernelName:qw,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;AG(t,"addN");const a=s.map((e=>n.data.get(e.dataId).values)),r=yT(s[0].shape,s[0].dtype),o=r.values;for(let e=0;e<s.length;e++){const t=a[e];for(let e=0;e<o.length;e++)o[e]+=t[e]}return n.makeTensorInfo(r.shape,r.dtype,r.values)}};const EX={kernelName:Yw,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s;AG(a,"all");const i=gw(r,a.shape);let l=i;const u=hR(l,a.shape.length);let c=a;null!=u&&(c=ij({inputs:{x:a},backend:n,attrs:{perm:u}}),l=pR(l.length,a.shape.length)),cR("all",l,c.shape.length);const[h,d]=lR(c.shape,l),p=uw(d),f=Aw(uw(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*p;let n=m[t];for(let e=0;e<p;++e){const s=m[t+e];n=n&&s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(o){const e=yX({inputs:{x:g},backend:n,attrs:{shape:uR(h,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const RX={kernelName:Zw,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s;AG(a,"any");const i=gw(r,a.shape);let l=i;const u=hR(l,a.shape.length);let c=a;null!=u&&(c=ij({inputs:{x:a},backend:n,attrs:{perm:u}}),l=pR(l.length,a.shape.length)),cR("any",l,c.shape.length);const[h,d]=lR(c.shape,l),p=uw(d),f=Aw(uw(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*p;let n=m[t];for(let e=0;e<p;++e){const s=m[t+e];n=n||s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(o){const e=yX({inputs:{x:g},backend:n,attrs:{shape:uR(h,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const AX={kernelName:Jw,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r}=s;AG(a,"argMax");let o=gw(r,a.shape);const i=hR(o,a.shape.length);let l=a;const u=[];null!=i&&(l=ij({inputs:{x:a},backend:n,attrs:{perm:i}}),u.push(l),o=pR(o.length,l.shape.length)),o=[o[0]],cR("argMax",o,l.shape.length);const[c,h]=lR(l.shape,o),d=Aw(uw(c),"int32"),p=uw(h),f=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*p;let n=f[t],s=0;for(let e=0;e<p;++e){const a=f[t+e];a>n&&(n=a,s=e)}d[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}};const _X={kernelName:Qw,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r}=s;AG(a,"argMin");let o=gw(r,a.shape);const i=hR(o,a.shape.length);let l=a;const u=[];null!=i&&(l=ij({inputs:{x:a},backend:n,attrs:{perm:i}}),u.push(l),o=pR(o.length,l.shape.length)),o=[o[0]],cR("argMin",o,l.shape.length);const[c,h]=lR(l.shape,o),d=Aw(uw(c),"int32"),p=uw(h),f=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*p;let n=f[t],s=0;for(let e=0;e<p;++e){const a=f[t+e];a<n&&(n=a,s=e)}d[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},FX=rH(eI,(e=>Math.asin(e))),OX={kernelName:eI,backendName:"cpu",kernelFunc:FX},DX=rH(tI,(e=>Math.asinh(e))),MX={kernelName:tI,backendName:"cpu",kernelFunc:DX},LX=rH(nI,(e=>Math.atan(e))),BX={kernelName:nI,backendName:"cpu",kernelFunc:LX},PX=MG(((e,t)=>Math.atan2(e,t))),zX=XG(aI,PX),WX={kernelName:aI,backendName:"cpu",kernelFunc:zX},VX=rH(sI,(e=>Math.atanh(e))),UX={kernelName:sI,backendName:"cpu",kernelFunc:VX};function GX(e,t,n,s,a,r){const o=a.strideHeight,i=a.strideWidth,l=a.dilationHeight,u=a.dilationWidth,c=a.effectiveFilterHeight,h=a.effectiveFilterWidth,d=a.padInfo.top,p=a.padInfo.left,f="max"===r?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=yT(a.outShape,n),g=m.values,x=a.outShape[1]*a.outShape[2]*a.outShape[3],b=a.outShape[2]*a.outShape[3],y=a.outShape[3];for(let t=0;t<a.batchSize;++t){const n=t*x,m=t*s[0];for(let t=0;t<a.inChannels;++t)for(let x=0;x<a.outHeight;++x){const v=x*o-d,k=Math.max(0,v),w=Math.min(a.inHeight,c+v),I=n+x*b;for(let n=0;n<a.outWidth;++n){const o=n*i-p,c=Math.max(0,o),d=Math.min(a.inWidth,h+o);let x=f,b=0,v=0;for(let n=k;n<w;n+=l){const a=m+n*s[1];for(let n=c;n<d;n+=u){const o=e[a+n*s[2]+t];"max"===r&&o>x?x=o:"avg"===r&&(b+=o,v++)}if(isNaN(x))break}g[I+n*y+t]="avg"===r?b/v:x}}}return m}function HX(e,t,n,s,a=!1,r=!1){const o=yT(s.outShape,"int32"),i=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,d=s.effectiveFilterWidth,p=s.padInfo.top,f=s.padInfo.left,m=yT(t,n,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let n=0;n<s.outHeight;++n){const g=n*i-p;let x=g;for(;x<0;)x+=u;const b=Math.min(s.inHeight,h+g);for(let i=0;i<s.outWidth;++i){const h=i*l-f;let p=h;for(;p<0;)p+=c;const y=Math.min(s.inWidth,d+h);let v=Number.NEGATIVE_INFINITY,k=-1;for(let n=x;n<b;n+=u){const o=n-g;for(let i=p;i<y;i+=c){const l=i-h,u=m.get(e,n,i,t);u>v&&(v=u,k=a?r?((e*s.inHeight+n)*s.inWidth+i)*s.inChannels+t:(n*s.inWidth+i)*s.inChannels+t:o*d+l)}}o.set(k,e,n,i,t)}}return o}function jX(e,t,n,s,a,r){const o=a.strideDepth,i=a.strideHeight,l=a.strideWidth,u=a.dilationDepth,c=a.dilationHeight,h=a.dilationWidth,d=a.effectiveFilterDepth,p=a.effectiveFilterHeight,f=a.effectiveFilterWidth,m=a.padInfo.front,g=a.padInfo.top,x=a.padInfo.left,b="max"===r?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,y=yT(a.outShape,n),v=y.values,k=a.outShape[1]*a.outShape[2]*a.outShape[3]*a.outShape[4],w=a.outShape[2]*a.outShape[3]*a.outShape[4],I=a.outShape[3]*a.outShape[4],N=a.outShape[4];for(let t=0;t<a.batchSize;++t){const n=t*k,y=t*s[0];for(let t=0;t<a.inChannels;++t)for(let k=0;k<a.outDepth;++k){const S=k*o-m;let C=S;for(;C<0;)C+=u;const $=Math.min(a.inDepth,d+S),T=n+k*w;for(let n=0;n<a.outHeight;++n){const o=n*i-g;let d=o;for(;d<0;)d+=c;const m=Math.min(a.inHeight,p+o),k=T+n*I;for(let n=0;n<a.outWidth;++n){const o=n*l-x;let i=o;for(;i<0;)i+=h;const p=Math.min(a.inWidth,f+o),g=k+n*N;let w=b,I=0,S=0;for(let n=C;n<$;n+=u){const a=y+n*s[1];for(let n=d;n<m;n+=c){const o=a+n*s[2];for(let n=i;n<p;n+=h){const a=e[o+n*s[3]+t];if("max"===r&&a>w?w=a:"avg"===r&&(I+=a,S++),isNaN(w))break}if(isNaN(w))break}if(isNaN(w))break}v[g+t]="avg"===r?I/Math.max(S,1):w}}}}return y}const XX={kernelName:rI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;AG(a,"avgPool");const{filterSize:r,strides:o,pad:i,dimRoundingMode:l}=s;ow(sE(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=XT(a.shape,r,o,1,i,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&cw(u.inShape,u.outShape))c=zG({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=$w(a.shape),s=GX(e,a.shape,a.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,a.dtype,s.values)}return c}};const KX={kernelName:iI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:r,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=s;AG(a,"avgPool3d");const c=KT(a.shape,r,o,1,i,l,u),h=jX(n.data.get(a.dataId).values,a.shape,a.dtype,$w(a.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}};const qX={kernelName:lI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=s;AG([a,r],"avgPool3DGrad");const c=KT(r.shape,o,i,1,l,u),h=c.strideDepth,d=c.strideHeight,p=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,x=c.dilationDepth,b=c.dilationHeight,y=c.dilationWidth,v=c.effectiveFilterDepth,k=c.effectiveFilterHeight,w=c.effectiveFilterWidth,I=v-1-c.padInfo.front,N=w-1-c.padInfo.left,S=k-1-c.padInfo.top,C=yT(r.shape,"float32"),$=1/(f*m*g),T=n.bufferSync(a);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let a=0;a<c.inWidth;++a){const r=n-I,o=s-S,i=a-N;let l=0;for(let n=0;n<v;n+=x){const s=(r+n)/h;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let n=0;n<k;n+=b){const a=(o+n)/d;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let n=0;n<w;n+=y){const r=(i+n)/p;if(r<0||r>=c.outWidth||Math.floor(r)!==r)continue;l+=T.get(e,s,a,r,t)}}}C.set(l*$,e,n,s,a,t)}return n.makeTensorInfo(C.shape,C.dtype,C.values)}};const YX={kernelName:oI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,o=r;AG([a,r],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=XT(o.shape,i,l,1,u),h=c.strideHeight,d=c.strideWidth,p=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,x=c.effectiveFilterHeight,b=c.effectiveFilterWidth,y=b-1-c.padInfo.left,v=x-1-c.padInfo.top,k=yT(o.shape,"float32"),w=1/(p*f),I=n.data.get(a.dataId).values,N=yT(a.shape,"float32",I);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const a=n-v,r=s-y;let o=0;for(let n=0;n<x;n+=m){const s=(a+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<b;n+=g){const a=(r+n)/d;if(a<0||a>=c.outWidth||Math.floor(a)!==a)continue;o+=N.get(e,s,a,t)}}k.set(o*w,e,n,s,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}};const ZX={kernelName:eN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,scale:r,offset:o,mean:i,variance:l}=t;ow(i.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),ow(null==o||i.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),ow(null==r||i.shape.length===r.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),AG([a,i,l,r,o],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=n.data.get(a.dataId).values,h=n.data.get(i.dataId).values,d=n.data.get(l.dataId).values,p=r?n.data.get(r.dataId).values:new Float32Array([1]),f=o?n.data.get(o.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,x=p.length,b=d.length,y=h.length;let v=0,k=0,w=0,I=0;for(let e=0;e<c.length;++e)m[e]=f[v++]+(c[e]-h[k++])*p[w++]/Math.sqrt(d[I++]+u),v>=g&&(v=0),k>=y&&(k=0),w>=x&&(w=0),I>=b&&(I=0);return n.makeTensorInfo(a.shape,a.dtype,m)}};const JX={kernelName:cI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:r,crops:o}=s;AG([a],"batchToSpaceND");const i=r.reduce(((e,t)=>e*t)),l=dD(a.shape,r,i),u=pD(l.length,r.length),c=fD(a.shape,r,i),h=mD(o,r.length),d=gD(c,o,r.length),p=yX({inputs:{x:a},backend:n,attrs:{shape:l}}),f=ij({inputs:{x:p},backend:n,attrs:{perm:u}}),m=yX({inputs:{x:f},backend:n,attrs:{shape:c}}),g=Aj({inputs:{x:m},backend:n,attrs:{begin:h,size:d}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};const QX={kernelName:hI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:o}=s,i=QG(n.data.get(a.dataId).values,n.data.get(r.dataId).values,r.dtype,r.shape,o);return n.makeTensorInfo([o],r.dtype,i)}};const eK={kernelName:pI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:a}=t,r=n.data.get(s.dataId).values,o=n.data.get(a.dataId).values,i=YE(Array.from(r),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},tK=rH(gI,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),nK={kernelName:gI,backendName:"cpu",kernelFunc:tK},sK={kernelName:bI,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(uw(t.shape)),a=n.data.get(t.dataId),r=a.complexTensorInfos.real,o=a.complexTensorInfos.imag,i=n.data.get(r.dataId).values,l=n.data.get(o.dataId).values;for(let e=0;e<i.length;e++){const t=i[e],n=l[e];s[e]=Math.hypot(t,n)}return n.makeOutput(s,t.shape,"float32")}};function aK(e){const{inputs:t,backend:n}=e,{input:s}=t,a=n.data.get(s.dataId).complexTensorInfos.imag,r=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,r)}const rK={kernelName:iN,backendName:"cpu",kernelFunc:aK};function oK(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s,r=gw(a,t[0].shape)[0];nD(t.map((e=>e.shape)),r);let o=sD(t.map((e=>e.shape)),r);if(0===uw(o))return n.makeTensorInfo(o,t[0].dtype,[]);const i=t.filter((e=>uw(e.shape)>0));if(1===i.length)return zG({inputs:{x:i[0]},backend:n});if("complex64"===i[0].dtype){const e=i.map((e=>VG({inputs:{input:e},backend:n}))),t=i.map((e=>aK({inputs:{input:e},backend:n}))),s=oK({inputs:e,backend:n,attrs:{axis:r}}),a=oK({inputs:t,backend:n,attrs:{axis:r}}),o=LG({inputs:{real:s,imag:a},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),o}const l=i.map((e=>{const t=uw(e.shape.slice(r));return yX({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),u=l.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));o=sD(l.map((e=>e.shape)),1);const c=1===l[0].shape[0],h=cH(u,o,t[0].dtype,c),d=sD(i.map((e=>e.shape)),r),p=n.makeTensorInfo(d,t[0].dtype,h);return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}const iK={kernelName:yI,backendName:"cpu",kernelFunc:oK};function lK(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:o,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s;AG([a,r],"conv2d");const h=rE(l),d=qT(a.shape,r.shape,o,u,i,c,!1,h),p=d.filterHeight,f=d.filterWidth,m=d.dilationHeight,g=d.dilationWidth,x=d.padInfo.left,b=d.padInfo.top,y="channelsLast"===d.dataFormat,v=new VC(d.outShape,a.dtype),k=$w(a.shape),w=$w(r.shape),I=k[0],N=y?k[1]:k[2],S=y?k[2]:1,C=y?1:k[1],$=v.strides[0],T=y?v.strides[1]:v.strides[2],E=y?v.strides[2]:1,R=y?1:v.strides[1],A=n.data.get(a.dataId).values,_=n.data.get(r.dataId).values,F=v.values;for(let e=0;e<d.batchSize;++e){const t=e*I,n=e*$;for(let e=0;e<d.outHeight;++e){const s=n+e*T,a=e*d.strideHeight-b;for(let e=0;e<p;++e){const n=a+e*m;if(n<0||n>=d.inHeight)continue;const r=e*w[0],o=t+n*N;for(let e=0;e<d.outWidth;++e){const t=s+e*E,n=e*d.strideWidth-x;for(let e=0;e<f;++e){const s=n+e*g;if(s<0||s>=d.inWidth)continue;const a=o+s*S;let i=r+e*w[1];for(let e=0;e<d.inChannels;++e){const n=A[a+e*C];for(let e=0;e<d.outChannels;++e)F[t+e*R]+=n*_[i+e];i+=d.outChannels}}}}}}return n.makeTensorInfo(v.shape,v.dtype,F)}const uK={kernelName:vI,backendName:"cpu",kernelFunc:lK};const cK={kernelName:kI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;AG([a,r],"conv2dBackpropFilter");const h=rE(l),d=qT(a.shape,c,o,1,i,u,!1,h),{strideHeight:p,strideWidth:f,filterHeight:m,filterWidth:g}=d,x="channelsLast"===d.dataFormat,b=new VC(d.filterShape,"float32"),y=d.padInfo.left,v=d.padInfo.top,k=n.data.get(a.dataId).values,w=n.data.get(r.dataId).values,I=new VC(a.shape,a.dtype,k),N=new VC(r.shape,r.dtype,w);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((v-e)/p)),n=Math.min(d.outHeight,(d.inHeight+v-e)/p);for(let s=0;s<g;++s){const a=Math.max(0,Math.ceil((y-s)/f)),r=Math.min(d.outWidth,(d.inWidth+y-s)/f);for(let o=0;o<d.inChannels;++o)for(let i=0;i<d.outChannels;++i){let l=0;for(let u=0;u<d.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*p-v;for(let e=a;e<r;++e){const n=s+e*f-y;l+=x?I.get(u,t,n,o)*N.get(u,c,e,i):I.get(u,o,t,n)*N.get(u,i,c,e)}}b.set(l,e,s,o,i)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const hK={kernelName:wI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{inputShape:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s;AG([a,r],"conv2dBackpropInput");const h=$w(r.shape),d=$w(a.shape);let p=rE(u);const f=qT(o,r.shape,i,1,l,c,!1,p),m=new VC(f.inShape,"float32"),g=m.values,x=n.data.get(a.dataId).values,b=n.data.get(r.dataId).values,[y,v,k]=h,{batchSize:w,filterHeight:I,filterWidth:N,inChannels:S,inHeight:C,inWidth:$,outChannels:T,outHeight:E,outWidth:R,strideHeight:A,strideWidth:_}=f;p=f.dataFormat;const F=I-1-f.padInfo.top,O=N-1-f.padInfo.left,D="channelsLast"===p,M=m.strides[0],L=D?m.strides[1]:m.strides[2],B=D?m.strides[2]:1,P=D?1:m.strides[1],z=d[0],W=D?d[1]:d[2],V=D?d[2]:1,U=D?1:d[1];for(let e=0;e<w;++e)for(let t=0;t<S;++t)for(let n=0;n<C;++n){const s=n-F,a=Math.max(0,Math.ceil(s/A)),r=Math.min(E,(I+s)/A);for(let o=0;o<$;++o){const i=o-O,l=Math.max(0,Math.ceil(i/_)),u=Math.min(R,(N+i)/_);let c=0;for(let n=a;n<r;++n){const a=n*A-s;for(let s=l;s<u;++s){const r=z*e+W*n+V*s,o=y*(I-1-a)+v*(N-1-(s*_-i))+k*t;for(let e=0;e<T;++e){c+=x[r+U*e]*b[o+e]}}}g[M*e+L*n+B*o+P*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const dK={kernelName:II,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:o,pad:i,dilations:l}=s;AG([a,r],"conv3d");const u=YT(a.shape,r.shape,o,l,i),{filterDepth:c,filterHeight:h,filterWidth:d,dilationDepth:p,dilationHeight:f,dilationWidth:m,padInfo:g}=u,x=g.front,b=g.left,y=g.top,v=new VC(u.outShape,a.dtype),k=n.data.get(a.dataId).values,w=n.data.get(r.dataId).values,I=v.values,N=$w(a.shape),S=$w(r.shape);for(let e=0;e<u.batchSize;++e){const t=e*N[0],n=e*v.strides[0];for(let e=0;e<u.outDepth;++e){const s=n+e*v.strides[1],a=e*u.strideDepth-x;for(let e=0;e<c;++e){const n=a+e*p;if(n<0||n>=u.inDepth)continue;const r=e*S[0],o=t+n*N[1];for(let e=0;e<u.outHeight;++e){const t=s+e*v.strides[2],n=e*u.strideHeight-y;for(let e=0;e<h;++e){const s=n+e*f;if(s<0||s>=u.inHeight)continue;const a=r+e*S[1],i=o+s*N[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-b;for(let e=0;e<d;++e){const t=s+e*m;if(t<0||t>=u.inWidth)continue;const r=a+e*S[2],o=i+t*u.inChannels;let l=r;for(let e=0;e<u.inChannels;++e){const t=k[o+e];for(let e=0;e<u.outChannels;++e)I[n+e]+=t*w[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}};const pK={kernelName:NI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:o,pad:i,filterShape:l}=s;AG([a,r],"conv3dBackpropFilterV2");const u=$w(a.shape),c=$w(r.shape),h=YT(a.shape,l,o,1,i),d=h.strideDepth,p=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,x=h.filterWidth,b=new VC(h.filterShape,"float32"),y=b.values,[v,k,w,I]=b.strides,N=n.data.get(r.dataId).values,[S,C,$,T]=c,E=n.data.get(a.dataId).values,[R,A,_,F]=u,O=h.padInfo.front,D=h.padInfo.left,M=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((O-e)/d)),n=Math.min(h.outDepth,(h.inDepth+O-e)/d),s=e*v;for(let a=0;a<g;++a){const r=Math.max(0,Math.ceil((M-a)/p)),o=Math.min(h.outHeight,(h.inHeight+M-a)/p),i=a*k+s;for(let s=0;s<x;++s){const l=Math.max(0,Math.ceil((D-s)/f)),u=Math.min(h.outWidth,(h.inWidth+D-s)/f),c=s*w+i;for(let i=0;i<h.inChannels;++i){const m=i*I+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*R,x=m*S;for(let m=t;m<n;++m){const t=(e+m*d-O)*A+h,n=m*C+x;for(let e=r;e<o;++e){const r=(a+e*p-M)*_+t,o=e*$+n;for(let e=l;e<u;++e){const t=e*T+o;g+=E[(s+e*f-D)*F+r+i]*N[t+c]}}}}y[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const fK={kernelName:SI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{pad:o,strides:i,inputShape:l}=s;AG([a],"conv3dBackpropInputV2");const u=$w(a.shape),c=$w(r.shape),h=YT(l,r.shape,i,1,o),d=new VC(h.inShape,"float32"),p=d.values,[f,m,g,x]=d.strides,b=n.data.get(a.dataId).values,[y,v,k,w]=u,I=n.data.get(r.dataId).values,[N,S,C,$]=c,{batchSize:T,filterDepth:E,filterHeight:R,filterWidth:A,inChannels:_,inDepth:F,inHeight:O,inWidth:D,outChannels:M,outDepth:L,outHeight:B,outWidth:P,strideDepth:z,strideHeight:W,strideWidth:V}=h,U=E-1-h.padInfo.front,G=R-1-h.padInfo.top,H=A-1-h.padInfo.left;for(let e=0;e<T;++e)for(let t=0;t<_;++t)for(let n=0;n<F;++n){const s=n-U,a=Math.max(0,Math.ceil(s/z)),r=Math.min(L,(E+s)/z);for(let o=0;o<O;++o){const i=o-G,l=Math.max(0,Math.ceil(i/W)),u=Math.min(B,(R+i)/W);for(let c=0;c<D;++c){const h=c-H,d=Math.max(0,Math.ceil(h/V)),T=Math.min(P,(A+h)/V);let _=0;for(let n=a;n<r;++n){const a=n*z-s;for(let s=l;s<u;++s){const r=s*W-i;for(let o=d;o<T;++o){const i=y*e+v*n+k*s+w*o,l=N*(E-1-a)+S*(R-1-r)+C*(A-1-(o*V-h))+$*t;for(let e=0;e<M;++e){_+=b[i+e]*I[l+e]}}}}p[f*e+m*n+g*o+x*c+t]=_}}}return n.makeTensorInfo(d.shape,d.dtype,d.values)}},mK=rH(CI,(e=>Math.cos(e))),gK={kernelName:CI,backendName:"cpu",kernelFunc:mK},xK=rH($I,(e=>Math.cosh(e))),bK={kernelName:$I,backendName:"cpu",kernelFunc:xK};const yK={kernelName:RI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:a,boxes:r,boxInd:o}=t,{cropSize:i,method:l,extrapolationValue:u}=s,[c,h,d,p]=a.shape,f=r.shape[0],[m,g]=i,x=yT([f,m,g,p],"float32"),b=n.data.get(r.dataId).values,y=n.data.get(o.dataId).values,v=n.data.get(a.dataId).values,k=$w(a.shape),w=$w(x.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],s=b[t+1],a=b[t+2],r=b[t+3],o=y[e];if(o>=c)continue;const i=m>1?(a-n)*(h-1)/(m-1):0,f=g>1?(r-s)*(d-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(h-1)+t*i:.5*(n+a)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let s=0;s<p;s++){const a=s+n*w[2]+t*w[1]+e*w[0];x.values[a]=u}else if("bilinear"===l){const n=Math.floor(c),a=Math.ceil(c),i=c-n;for(let l=0;l<g;l++){const c=g>1?s*(d-1)+l*f:.5*(s+r)*(d-1);if(c<0||c>d-1){for(let n=0;n<p;n++){const s=n+l*w[2]+t*w[1]+e*w[0];x.values[s]=u}continue}const h=Math.floor(c),m=Math.ceil(c),b=c-h;for(let s=0;s<p;s++){let r=s+h*k[2]+n*k[1]+o*k[0];const u=v[r];r=s+m*k[2]+n*k[1]+o*k[0];const c=v[r];r=s+h*k[2]+a*k[1]+o*k[0];const d=v[r];r=s+m*k[2]+a*k[1]+o*k[0];const p=u+(c-u)*b,f=d+(v[r]-d)*b;r=s+l*w[2]+t*w[1]+e*w[0],x.values[r]=p+(f-p)*i}}}else for(let n=0;n<g;++n){const a=g>1?s*(d-1)+n*f:.5*(s+r)*(d-1);if(a<0||a>d-1){for(let s=0;s<p;s++){const a=s+n*w[2]+t*w[1]+e*w[0];x.values[a]=u}continue}const i=Math.round(a),l=Math.round(c);for(let s=0;s<p;s++){const a=s+i*k[2]+l*k[1]+o*k[0],r=s+n*w[2]+t*w[1]+e*w[0];x.values[r]=v[a]}}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}};const vK={kernelName:TI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,exclusive:o,reverse:i}=s;AG(a,"cumprod");const l=hR([r],a.shape.length);let u=a;null!=l&&(u=ij({inputs:{x:a},backend:n,attrs:{perm:l}}));const c=pR(1,a.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=e$(u.dtype,"int32"),d=Rw(uw(u.shape),h),p=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=i?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<p.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)d[n]=o?1:p[n];else{const s=m(e,t-1);d[n]=o?p[s]*d[s]:p[n]*d[s]}}const g=n.makeTensorInfo(u.shape,h,d);if(null!=l){const e=ij({inputs:{x:g},backend:n,attrs:{perm:dR(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}};const kK={kernelName:EI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,exclusive:o,reverse:i}=s;AG(a,"cumsum");const l=hR([r],a.shape.length);let u=a;null!=l&&(u=ij({inputs:{x:a},backend:n,attrs:{perm:l}}));const c=pR(1,a.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=e$(u.dtype,"int32"),d=Aw(uw(u.shape),h),p=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=i?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<p.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)d[n]=o?0:p[n];else{const s=m(e,t-1);d[n]=o?p[s]+d[s]:p[n]+d[s]}}const g=n.makeTensorInfo(u.shape,h,d);if(null!=l){const e=ij({inputs:{x:g},backend:n,attrs:{perm:dR(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}};const wK={kernelName:AI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:o,binaryOutput:i}=s;if(1===a.shape.length){const e=QG(n.data.get(a.dataId).values,n.data.get(r.dataId).values,r.dtype,r.shape,o);return n.makeTensorInfo([o],r.dtype,e)}if(2===a.shape.length){const e=eH(n.bufferSync(a),n.bufferSync(r),o,i);return n.makeTensorInfo(e.shape,r.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}};const IK={kernelName:_I,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockSize:r,dataFormat:o}=s;ow("NHWC"===o,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`));const i=a.shape[0],l=a.shape[1],u=a.shape[2],c=a.shape[3],h=l*r,d=u*r,p=c/(r*r),f=n.data.get(a.dataId).values,m=new Float32Array(i*h*d*p);let g=0;for(let e=0;e<i;++e)for(let t=0;t<h;++t){const n=Math.floor(t/r),s=t%r;for(let t=0;t<d;++t){const a=Math.floor(t/r),o=(s*r+t%r)*p;for(let t=0;t<p;++t){const s=t+o+c*(a+u*(n+l*e));m[g++]=f[s]}}}return n.makeTensorInfo([i,h,d,p],a.dtype,m)}};function NK(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:o,pad:i,dilations:l,dimRoundingMode:u}=s;AG([a,r],"depthwiseConv2DNative");const c=$w(a.shape),h=$w(r.shape);let d=l;null==d&&(d=[1,1]),ow(sE(o,d),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${d}'`));const p=qT(a.shape,r.shape,o,d,i,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:x,padInfo:b}=p,y=b.left,v=b.top,k=p.outChannels/p.inChannels,w=new VC(p.outShape,a.dtype),I=n.data.get(a.dataId).values,N=n.data.get(r.dataId).values,S=w.values;for(let e=0;e<p.batchSize;++e){const t=e*c[0],n=e*w.strides[0];for(let e=0;e<p.outHeight;++e){const s=n+e*w.strides[1],a=e*p.strideHeight-v;for(let e=0;e<f;++e){const n=a+e*g;if(n<0||n>=p.inHeight)continue;const r=e*h[0],o=t+n*c[1];for(let e=0;e<p.outWidth;++e){const t=s+e*w.strides[2],n=e*p.strideWidth-y;for(let e=0;e<m;++e){const s=n+e*x;if(s<0||s>=p.inWidth)continue;const a=r+e*h[1],i=o+s*p.inChannels;let l=t,u=a;for(let e=0;e<p.inChannels;++e){const t=I[i+e];for(let e=0;e<k;++e)S[l+e]+=t*N[u+e];l+=k,u+=k}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}const SK={kernelName:FI,backendName:"cpu",kernelFunc:NK};const CK={kernelName:OI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s;AG([a,r],"depthwiseConv2dNativeBackpropFilter");const h=qT(a.shape,c,o,i,l,u,!0),{strideHeight:d,strideWidth:p,filterHeight:f,filterWidth:m}=h,g=new VC(h.filterShape,"float32"),x=h.padInfo.left,b=h.padInfo.top,y=h.outChannels/h.inChannels,v=n.data.get(a.dataId).values,k=new VC(a.shape,a.dtype,v),w=n.data.get(r.dataId).values,I=new VC(r.shape,r.dtype,w);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/d)),n=Math.min(h.outHeight,(h.inHeight+b-e)/d);for(let s=0;s<m;++s){const a=Math.max(0,Math.ceil((x-s)/p)),r=Math.min(h.outWidth,(h.inWidth+x-s)/p);for(let o=0;o<h.outChannels;++o){const i=Math.trunc(o/y),l=o%y;let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*d-b;for(let e=a;e<r;++e){const n=s+e*p-x;u+=k.get(l,t,n,i)*I.get(l,c,e,o)}}g.set(u,e,s,i,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const $K={kernelName:DI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s;AG([a,r],"depthwiseConv2DNativeBackpropInput");const h=$w(a.shape),d=$w(r.shape),p=qT(c,r.shape,o,i,l,u,!0),f=new VC(p.inShape,"float32"),m=f.values,[g,x,b]=f.strides,y=n.data.get(a.dataId).values,[v,k,w]=h,I=n.data.get(r.dataId).values,[N,S,C]=d,{batchSize:$,filterHeight:T,filterWidth:E,inChannels:R,inHeight:A,inWidth:_,outChannels:F,outHeight:O,outWidth:D,strideHeight:M,strideWidth:L}=p,B=T-1-p.padInfo.top,P=E-1-p.padInfo.left,z=F/R;for(let e=0;e<$;++e)for(let t=0;t<R;++t)for(let n=0;n<A;++n){const s=n-B,a=Math.max(0,Math.ceil(s/M)),r=Math.min(O,(T+s)/M);for(let o=0;o<_;++o){const i=o-P,l=Math.max(0,Math.ceil(i/L)),u=Math.min(D,(E+i)/L);let c=0;for(let n=a;n<r;++n){const a=n*M-s;for(let s=l;s<u;++s){const r=v*e+k*n+w*s,o=N*(T-1-a)+S*(E-1-(s*L-i))+C*t;for(let e=0;e<z;++e){c+=y[r+(t*z+e)]*I[o+e]}}}m[g*e+x*n+b*o+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const TK={kernelName:MI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=uw(s.shape),r=n.data.get(s.dataId).values,o=yT([a,a],s.dtype),i=o.values;for(let e=0;e<r.length;e++)i[e*a+e]=r[e];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,o.dtype,o.values)}},EK={kernelName:LI,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a}=e,{strides:r,pad:o,dilations:i}=n,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(a.dataId).values,d=a.shape.length,{batchSize:p,inHeight:f,inWidth:m,inChannels:g,outHeight:x,outWidth:b,padInfo:y,strideHeight:v,strideWidth:k,filterHeight:w,filterWidth:I,dilationHeight:N,dilationWidth:S,outShape:C}=jT(s.shape,a.shape,r,o,"NHWC",i),$=uw(C),T=C.length,E=yw(s.dtype,$);for(let e=0;e<p;++e)for(let t=0;t<x;++t){const n=t*v-y.top;for(let r=0;r<b;++r){const o=r*k-y.left;for(let i=0;i<g;++i){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<w;++t){const r=n+t*N;if(r>=0&&r<f)for(let n=0;n<I;++n){const p=o+n*S;if(p>=0&&p<m){const o=Ow([e,r,p,i],c,$w(s.shape)),f=Ow([t,n,i],d,$w(a.shape)),m=u[o]+h[f];m>l&&(l=m)}}}E[Ow([e,t,r,i],T,$w(C))]=l}}}return{dataId:l.write(SC(E,s.dtype),C,s.dtype),shape:C,dtype:s.dtype}}},RK={kernelName:PI,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a,dy:r}=e,{strides:o,pad:i,dilations:l}=n,u=t,c=Ew(s.shape,u.data.get(s.dataId).values),h=Ew(a.shape,u.data.get(a.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:m,outHeight:g,outWidth:x,padInfo:b,strideHeight:y,strideWidth:v,filterHeight:k,filterWidth:w,dilationHeight:I,dilationWidth:N,outShape:S}=jT(s.shape,a.shape,o,i,"NHWC",l);ow(r.rank===S.length,(()=>`Error in ${PI}, dy must have the same rank as output ${S.length}, but got ${r.rank}`));const C=Ew(S,u.data.get(r.dataId).values),$=_w(a.shape,a.dtype);for(let e=0;e<d;++e)for(let t=0;t<g;++t){const n=t*y-b.top;for(let s=0;s<x;++s){const a=s*v-b.left;for(let r=0;r<m;++r){let o=Number.MIN_SAFE_INTEGER,i=0,l=0;for(let t=0;t<k;++t){const s=n+t*I;if(s>=0&&s<p)for(let n=0;n<w;++n){const u=a+n*N;if(u>=0&&u<f){const a=c[e][s][u][r]+h[t][n][r];a>o&&(o=a,i=t,l=n)}}}$[i][l][r]+=C[e][t][s][r]}}}return{dataId:u.write(SC($,s.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},AK={kernelName:BI,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a,dy:r}=e,{strides:o,pad:i,dilations:l}=n,u=t,c=Ew(s.shape,u.data.get(s.dataId).values),h=Ew(a.shape,u.data.get(a.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:m,outHeight:g,outWidth:x,padInfo:b,strideHeight:y,strideWidth:v,filterHeight:k,filterWidth:w,dilationHeight:I,dilationWidth:N,outShape:S}=jT(s.shape,a.shape,o,i,"NHWC",l);ow(r.rank===S.length,(()=>`Error in ${BI}, dy must have the same rank as output ${S.length}, but got ${r.rank}`));const C=Ew(S,u.data.get(r.dataId).values),$=_w(s.shape,s.dtype);for(let e=0;e<d;++e)for(let t=0;t<g;++t){const n=t*y-b.top;for(let s=0;s<x;++s){const a=s*v-b.left;for(let r=0;r<m;++r){let o=Number.MIN_SAFE_INTEGER,i=n<0?0:n,l=a<0?0:a;for(let t=0;t<k;++t){const s=n+t*I;if(s>=0&&s<p)for(let n=0;n<w;++n){const u=a+n*N;if(u>=0&&u<f){const a=c[e][s][u][r]+h[t][n][r];a>o&&(o=a,i=s,l=u)}}}$[e][i][l][r]+=C[e][t][s][r]}}}return{dataId:u.write(SC($,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}};const _K={kernelName:"Draw",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:a}=t,{canvas:r,options:o}=s,{contextOptions:i,imageOptions:l}=o||{},u=(null==l?void 0:l.alpha)||1,c=(null==i?void 0:i.contextType)||"2d";if("2d"!==c)throw new Error(`Context type ${i.contextType} is not supported by the CPU backend.`);const h=r.getContext(c,(null==i?void 0:i.contextAttributes)||{});if(null==h)throw new Error(`Could not get the context with ${c} type.`);const[d,p]=a.shape.slice(0,2),f=2===a.shape.length?1:a.shape[2],m=n.data.get(a.dataId).values,g="float32"===a.dtype?255:1,x=new Uint8ClampedArray(p*d*4);for(let e=0;e<d*p;++e){const t=[0,0,0,255*u];for(let n=0;n<f;n++){const s=m[e*f+n];if("float32"===a.dtype){if(s<0||s>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${s}.`)}else if("int32"===a.dtype&&(s<0||s>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${s}.`);1===f?(t[0]=s*g,t[1]=s*g,t[2]=s*g):t[n]=s*g}const n=4*e;x[n+0]=Math.round(t[0]),x[n+1]=Math.round(t[1]),x[n+2]=Math.round(t[2]),x[n+3]=Math.round(t[3])}r.width=p,r.height=d;const b=new ImageData(x,p,d);return h.putImageData(b,0,0),a}};function FK(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s;let i;AG(a,"sum"),i="bool"===a.dtype?HG({inputs:{x:a},backend:n,attrs:{dtype:"int32"}}):zG({inputs:{x:a},backend:n});const l=i.shape.length,u=gw(r,i.shape),c=hR(u,l);let h=u,d=i;null!=c&&(d=ij({inputs:{x:i},backend:n,attrs:{perm:c}}),h=pR(h.length,l)),cR("sum",h,d.shape.length);const[p,f]=lR(d.shape,h);let m=PG(n,p,e$(d.dtype,"int32"));const g=uw(f),x=n.data.get(m.dataId).values,b=n.data.get(d.dataId).values;for(let e=0;e<x.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];x[e]=n}if(o){const e=m;m=yX({inputs:{x:m},backend:n,attrs:{shape:uR(m.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(i),null!=c&&n.disposeIntermediateTensorInfo(d),m}const OK={kernelName:wS,backendName:"cpu",kernelFunc:FK};const DK={kernelName:WI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:a}=s,r=t,{allDims:o,summedDims:i,idDims:l}=LD(a,r.length);PD(o.length,l,r);const{path:u,steps:c}=zD(i,l),h=c.length;let d=null,p=o.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=BD(p,l[t]);let a;WD(e)?a=r[t]:(a=ij({inputs:{x:r[t]},backend:n,attrs:{perm:e}}),f.push(a));const o=a.shape.slice();for(let e=0;e<s.length;++e)o.splice(s[e],0,1);cw(a.shape,o)||(a=yX({inputs:{x:a},backend:n,attrs:{shape:o}}),f.push(a)),null===d?d=a:(d=QH({inputs:{a:a,b:d},backend:n}),f.push(d))}e<h-1&&(u[e]>=0&&(d=FK({inputs:{x:d},backend:n,attrs:{axis:u[e]-(o.length-p),keepDims:!1}}),f.push(d)),p--)}for(const e of f)e!==d&&n.disposeIntermediateTensorInfo(e);return d}};const MK={kernelName:UI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:a}=t;AG([s,a],"eluGrad");const r=new Float32Array(uw(a.shape)),o=n.data.get(a.dataId).values,i=n.data.get(s.dataId).values;for(let e=0;e<o.length;++e){const t=o[e];r[e]=t>=0?i[e]:i[e]*(t+1)}return n.makeTensorInfo(a.shape,"float32",r)}},LK=rH(GI,(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+.3275911*n);return t*(1-((((1.061405429*s-1.453152027)*s+1.421413741)*s-.284496736)*s+.254829592)*s*Math.exp(-n*n))})),BK={kernelName:GI,backendName:"cpu",kernelFunc:LK};function PK(e){const{inputs:t,backend:n,attrs:s}=e,{input:a}=t,{dim:r}=s,o=a.shape.length,i=a.shape.slice();let l=r;return r<0&&(ow(-(o+1)<=r,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+r+1),i.splice(l,0,1),yX({inputs:{x:a},backend:n,attrs:{shape:i}})}const zK={kernelName:XI,backendName:"cpu",kernelFunc:PK},WK=MG(((e,t)=>e/t)),VK=XG(zI,WK),UK={kernelName:zI,backendName:"cpu",kernelFunc:VK};function GK(e,t,n){const s=e.shape,a=s[0],r=s[1],o=n.data.get(e.dataId),i=o.complexTensorInfos.real,l=o.complexTensorInfos.imag,u=[a,r],c=uw(u),h=bw("float32",c),d=bw("float32",c);for(let e=0;e<a;e++){const s=Aj({inputs:{x:i},backend:n,attrs:{begin:[e,0],size:[1,r]}}),a=Aj({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,r]}}),o=LG({inputs:{real:s,imag:a},backend:n}),{real:u,imag:c}=HK(o,t,n),p=SD(u,c);for(let t=0;t<r;t++){const n=ED(p,t);h[e*r+t]=n.real,d[e*r+t]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o)}const p=n.makeTensorInfo(u,"float32",h),f=n.makeTensorInfo(u,"float32",d),m=LG({inputs:{real:p,imag:f},backend:n});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}function HK(e,t,n){const s=uw(e.shape),a=n.data.get(e.dataId),r=n.data.get(a.complexTensorInfos.real.dataId).values,o=n.data.get(a.complexTensorInfos.imag.dataId).values;if(0==((i=s)&i-1)){const a=jK(r,o,s,t,n),i=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(i,"float32",a.real),t=n.makeTensorInfo(i,"float32",a.imag),r=n.makeTensorInfo([],"float32",NC(s,"float32")),o=zG({inputs:{x:r},backend:n}),l=UK.kernelFunc({inputs:{a:e,b:r},backend:n}),u=UK.kernelFunc({inputs:{a:t,b:o},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return a}{const e=function(e,t,n){const s=new Float32Array(2*t);for(let a=0;a<t;a++){let r=0,o=0;for(let s=0;s<t;s++){const i=_D(a*s,t,n),l=ED(e,s);r+=l.real*i.real-l.imag*i.imag,o+=l.real*i.imag+l.imag*i.real}n&&(r/=t,o/=t),RD(s,r,o,a)}return s}(SD(r,o),s,t);return CD(e)}var i}function jK(e,t,n,s,a){if(1===n)return{real:e,imag:t};const r=SD(e,t),o=n/2,i=$D(r),l=i.real,u=i.imag,c=[l.length],h=a.makeTensorInfo(c,"float32",l),d=a.makeTensorInfo(c,"float32",u),p=LG({inputs:{real:h,imag:d},backend:a}),f=TD(r),m=f.real,g=f.imag,x=[m.length],b=a.makeTensorInfo(x,"float32",m),y=a.makeTensorInfo(x,"float32",g),v=LG({inputs:{real:b,imag:y},backend:a}),k=jK(l,u,o,s,a),w=k.real,I=k.imag,N=[w.length],S=a.makeTensorInfo(N,"float32",w),C=a.makeTensorInfo(N,"float32",I),$=LG({inputs:{real:S,imag:C},backend:a}),T=jK(m,g,o,s,a),E=T.real,R=T.imag,A=[E.length],_=a.makeTensorInfo(A,"float32",E),F=a.makeTensorInfo(A,"float32",R),O=LG({inputs:{real:_,imag:F},backend:a}),D=AD(n,s),M=[D.real.length],L=a.makeTensorInfo(M,"float32",D.real),B=a.makeTensorInfo(M,"float32",D.imag),P=LG({inputs:{real:L,imag:B},backend:a}),z=QH({inputs:{a:P,b:O},backend:a}),W=ZG({inputs:{a:$,b:z},backend:a}),V=Qj({inputs:{a:$,b:z},backend:a}),U=VG({inputs:{input:W},backend:a}),G=VG({inputs:{input:V},backend:a}),H=aK({inputs:{input:W},backend:a}),j=aK({inputs:{input:V},backend:a}),X=oK({inputs:[U,G],backend:a,attrs:{axis:0}}),K=oK({inputs:[H,j],backend:a,attrs:{axis:0}}),q=a.data.get(X.dataId).values,Y=a.data.get(K.dataId).values;return a.disposeIntermediateTensorInfo(h),a.disposeIntermediateTensorInfo(d),a.disposeIntermediateTensorInfo(p),a.disposeIntermediateTensorInfo(b),a.disposeIntermediateTensorInfo(y),a.disposeIntermediateTensorInfo(v),a.disposeIntermediateTensorInfo(S),a.disposeIntermediateTensorInfo(C),a.disposeIntermediateTensorInfo($),a.disposeIntermediateTensorInfo(_),a.disposeIntermediateTensorInfo(F),a.disposeIntermediateTensorInfo(O),a.disposeIntermediateTensorInfo(L),a.disposeIntermediateTensorInfo(B),a.disposeIntermediateTensorInfo(P),a.disposeIntermediateTensorInfo(z),a.disposeIntermediateTensorInfo(W),a.disposeIntermediateTensorInfo(V),a.disposeIntermediateTensorInfo(U),a.disposeIntermediateTensorInfo(H),a.disposeIntermediateTensorInfo(G),a.disposeIntermediateTensorInfo(j),a.disposeIntermediateTensorInfo(X),a.disposeIntermediateTensorInfo(K),{real:q,imag:Y}}const XK={kernelName:qI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,a=uw(s.shape),r=s.shape[s.shape.length-1],o=yX({inputs:{x:s},backend:n,attrs:{shape:[a/r,r]}}),i=GK(o,!1,n),l=yX({inputs:{x:i},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),l}};function KK(e){const{backend:t,attrs:n}=e,{shape:s,value:a,dtype:r}=n,o=r||Nw(a),i=yw(o,uw(s));return function(e,t,n){e.fill(t)}(i,a),t.makeTensorInfo(s,o,i)}const qK={kernelName:YI,backendName:"cpu",kernelFunc:KK};const YK={kernelName:ZI,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,a=n,r=bw(s.dtype,uw(s.shape)),[o,i,l,u]=s.shape,c=a.data.get(s.dataId).values;for(let e=0;e<o;e++){const t=e*l*i*u;for(let e=0;e<i;e++){const n=e*(l*u);for(let e=0;e<l;e++){const s=e*u;for(let a=0;a<u;a++){const o=Math.round(l-e-1),i=t+n+s+a;let h=c[i];if(o>=0&&o<l){h=c[t+n+o*u+a]}r[i]=h}}}}return{dataId:a.write(r,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}};const ZK={kernelName:QS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let m=lK({inputs:{x:a,filter:r},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(o){const e=m;if("NCHW"===c&&1===o.shape.length&&1!==o.shape[0]){const e=yX({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=ZG({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=ZG({inputs:{a:m,b:o},backend:n});n.disposeIntermediateTensorInfo(e)}if(p){const e=m;if("NCHW"===c&&"prelu"===p&&1===i.shape.length&&1!==i.shape[0]){const e=yX({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=bX(n,m,p,e,f),n.disposeIntermediateTensorInfo(e)}else m=bX(n,m,p,i,f);n.disposeIntermediateTensorInfo(e)}return m}};const JK={kernelName:eC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let m=NK({inputs:{x:a,filter:r},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(o){const e=m;m=ZG({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(p){const e=m;m=bX(n,m,p,i,f),n.disposeIntermediateTensorInfo(e)}return m}};const QK={kernelName:nN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:a}=t,r=uw(s.shape),o=a.shape,i=o[o.length-1],[l,u,c,h]=OO(s,a);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const d=CH(n.data.get(a.dataId).values,n.bufferSync(s),s.dtype,u,i,c,h,s.shape,r);return n.makeTensorInfo(l,s.dtype,d.values)}};const eq={kernelName:tN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,indices:r}=t,{axis:o,batchDims:i}=s;AG([a,r],"gatherV2");const l=gw(o,a.shape)[0],u=n.data.get(r.dataId).values,c=a.shape[l];for(let e=0;e<u.length;++e){const t=u[e];ow(t<=c-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`))}let h=i;null==i&&(h=0);const d=uw(r.shape),p=aM(a,r,l,h),f=yX({inputs:{x:a},backend:n,attrs:{shape:[p.batchSize,p.outerSize,p.dimSize,p.sliceSize]}}),m=yX({inputs:{x:r},backend:n,attrs:{shape:[p.batchSize,d/p.batchSize]}}),g=[p.batchSize,p.outerSize,d/p.batchSize,p.sliceSize],x=n.bufferSync(m),b=$H(n.bufferSync(f),x,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(p.outputShape,b.dtype,b.values)}};const tq={kernelName:oN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,a=uw(s.shape),r=s.shape[s.shape.length-1],o=yX({inputs:{x:s},backend:n,attrs:{shape:[a/r,r]}}),i=GK(o,!0,n),l=yX({inputs:{x:i},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),l}},nq=rH(lN,(e=>Number.isFinite(e)?1:0),"bool"),sq={kernelName:lN,backendName:"cpu",kernelFunc:nq},aq=rH(uN,(e=>Math.abs(e)===1/0?1:0),"bool"),rq={kernelName:uN,backendName:"cpu",kernelFunc:aq},oq=rH(cN,(e=>Number.isNaN(e)?1:0),"bool"),iq={kernelName:cN,backendName:"cpu",kernelFunc:oq};const lq={kernelName:fN,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,num:r}=n,o=zH(s,a,r);return t.makeTensorInfo([o.length],"float32",o)}},uq=rH(gN,(e=>Math.log1p(e))),cq={kernelName:gN,backendName:"cpu",kernelFunc:uq},hq=MG(((e,t)=>e&&t)),dq=XG(xN,hq,null,"bool"),pq={kernelName:xN,backendName:"cpu",kernelFunc:dq},fq=rH(bN,(e=>e?0:1),"bool"),mq={kernelName:bN,backendName:"cpu",kernelFunc:fq},gq=MG(((e,t)=>e||t)),xq=XG(yN,gq,null,"bool"),bq={kernelName:yN,backendName:"cpu",kernelFunc:xq};const yq={kernelName:vN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{depthRadius:r,bias:o,alpha:i,beta:l}=s;AG(a,"LRN");const u=a.shape[3],c=u-1,h=n.data.get(a.dataId).values,d=uw(a.shape),p=new Float32Array(d);function f(e){const t=e%u;let n=e-t+Math.max(0,t-r);const s=e-t+Math.min(t+r,c);let a=0;for(;n<=s;n++){const e=h[n];a+=e*e}return a}for(let e=0;e<d;e++){const t=f(e),n=h[e]*Math.pow(o+i*t,-l);p[e]=n}return n.makeTensorInfo(a.shape,a.dtype,p)}};const vq={kernelName:kN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,y:r,dy:o}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s;AG(o,"LRNGrad");const h=uw(o.shape),d=o.shape[3],p=n.data.get(o.dataId).values,f=n.data.get(a.dataId).values,m=n.data.get(r.dataId).values,g=new Float32Array(h),x=h;for(let e=0;e<x;e++){const t=e%d,n=e-t+Math.max(0,t-i),s=e-t+Math.min(d,t+i+1);let a=0;for(let e=n;e<s;e++)a+=Math.pow(f[e],2);a=u*a+l;for(let t=n;t<s;t++){let n=-2*u*c*f[t]*m[e]/a;e===t&&(n+=Math.pow(a,-c)),n*=p[e],g[t]+=n}}return n.makeTensorInfo(o.shape,a.dtype,g)}};function kq(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reductionIndices:r,keepDims:o}=s,i=n;let l=a.shape;const u=l.length,c=gw(r,l);let h=c;const d=hR(h,u);let p=i.data.get(a.dataId).values;if(null!=d){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[d[t]];p=oj(p,l,a.dtype,d,e),h=pR(h.length,u),l=e}AG(a,"max"),cR("max",h,u);const[f,m]=lR(l,h),g=GH(p,uw(m),f,a.dtype),x=i.write(g,f,a.dtype);let b=f;if(o){b=uR(f,c)}return{dataId:x,shape:b,dtype:a.dtype}}const wq={kernelName:wN,backendName:"cpu",kernelFunc:kq};const Iq={kernelName:NN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;AG(a,"maxPool");const{filterSize:r,strides:o,pad:i,dimRoundingMode:l}=s;ow(sE(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=XT(a.shape,r,o,1,i,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&cw(u.inShape,u.outShape))c=zG({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=$w(a.shape),s=GX(e,a.shape,a.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,a.dtype,s.values)}return c}};const Nq={kernelName:CN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:r,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=s;AG(a,"maxPool3d");const c=KT(a.shape,r,o,1,i,l,u),h=jX(n.data.get(a.dataId).values,a.shape,a.dtype,$w(a.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}};const Sq={kernelName:$N,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=s;AG([a,r],"maxPool3DGrad");const c=KT(r.shape,o,i,1,l,u),h=function(e,t){const n=yT(t.outShape,"int32"),s=t.strideDepth,a=t.strideHeight,r=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.front,p=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let x=0;x<t.outDepth;++x){const b=x*s-d;let y=b;for(;y<0;)y+=o;const v=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*a-p;let d=u;for(;d<0;)d+=i;const k=Math.min(t.inHeight,c+u);for(let a=0;a<t.outWidth;++a){const p=a*r-f;let w=p;for(;w<0;)w+=l;const I=Math.min(t.inWidth,h+p);let N=Number.NEGATIVE_INFINITY,S=-1;for(let t=y;t<v;t+=o){const n=t-b;for(let s=d;s<k;s+=i){const a=s-u;for(let r=w;r<I;r+=l){const o=r-p,i=e.get(m,t,s,r,g);i>=N&&(N=i,S=n*c*h+a*c+o)}}}n.set(S,m,x,s,a,g)}}}return n}(n.bufferSync(r),c),d=c.strideDepth,p=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,x=c.dilationWidth,b=c.effectiveFilterDepth,y=c.effectiveFilterHeight,v=c.effectiveFilterWidth,k=b-1-c.padInfo.front,w=v-1-c.padInfo.left,I=y-1-c.padInfo.top,N=yT(r.shape,"float32"),S=n.bufferSync(a);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let a=0;a<c.inWidth;++a){const r=n-k,o=s-I,i=a-w;let l=0;for(let n=0;n<b;n+=m){const s=(r+n)/d;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let a=0;a<y;a+=g){const r=(o+a)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let o=0;o<v;o+=x){const u=(i+o)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const d=b*y*v-1-h.get(e,s,r,u,t)===n*y*v+a*v+o?1:0;if(0===d)continue;l+=S.get(e,s,r,u,t)*d}}}N.set(l,e,n,s,a,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};const Cq={kernelName:SN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r,output:o}=t,i=r;AG([r,o],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=XT(i.shape,l,u,1,c,h),p=n.data.get(i.dataId).values,f=yT(d.outShape,i.dtype,HX(p,i.shape,i.dtype,d).values),m=d.strideHeight,g=d.strideWidth,x=d.dilationHeight,b=d.dilationWidth,y=d.effectiveFilterHeight,v=d.effectiveFilterWidth,k=v-1-d.padInfo.left,w=y-1-d.padInfo.top,I=yT(i.shape,"float32"),N=n.data.get(a.dataId).values,S=yT(a.shape,"float32",N);for(let e=0;e<d.batchSize;++e)for(let t=0;t<d.inChannels;++t)for(let n=0;n<d.inHeight;++n)for(let s=0;s<d.inWidth;++s){const a=n-w,r=s-k;let o=0;for(let n=0;n<y;n+=x){const s=(a+n)/m;if(!(s<0||s>=d.outHeight||Math.floor(s)!==s))for(let a=0;a<v;a+=b){const i=(r+a)/g;if(i<0||i>=d.outWidth||Math.floor(i)!==i)continue;const l=y*v-1-f.get(e,s,i,t)===n*v+a?1:0;if(0===l)continue;o+=S.get(e,s,i,t)*l}}I.set(o,e,n,s,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}};const $q={kernelName:TN,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:a,strides:r,pad:o,includeBatchInIndex:i}=t,l=n;AG(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=XT(s.shape,a,r,[1,1],o),[h,d]=function(e,t,n,s,a){const r=GX(e,0,n,$w(t),a,"max"),o=HX(e,t,n,a,!0,s);return[r.values,o.values]}(u,s.shape,s.dtype,i,c),p=l.write(h,c.outShape,s.dtype),f=l.write(d,c.outShape,s.dtype);return[{dataId:p,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};const Tq={kernelName:EN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s,i=gw(r,a.shape),l=uw(lR(a.shape,i)[1]),u=[],c=n.makeTensorInfo([],"float32",new Float32Array([l]));u.push(c);const h=HG({inputs:{x:a},backend:n,attrs:{dtype:"float32"}});u.push(h);const d=VK({inputs:{a:h,b:c},backend:n});u.push(d);const p=FK({inputs:{x:d},backend:n,attrs:{axis:r,keepDims:o}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}};const Eq={kernelName:RN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s;AG(a,"min");const i=gw(r,a.shape);let l=i;const u=hR(l,a.shape.length);let c=a;null!=u&&(c=ij({inputs:{x:a},backend:n,attrs:{perm:u}}),l=pR(l.length,a.shape.length)),cR("min",l,c.shape.length);const[h,d]=lR(c.shape,l),p=uw(d),f=Aw(uw(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*p;let n=m[t];for(let e=0;e<p;++e){const s=m[t+e];(Number.isNaN(s)||s<n)&&(n=s)}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(o){const e=yX({inputs:{x:g},backend:n,attrs:{shape:uR(h,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const Rq={kernelName:_N,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:r,mode:o}=s;AG(a,"mirrorPad");const i=r.map(((e,t)=>e[0]+a.shape[t]+e[1])),l=r.map((e=>e[0])),u=r.map(((e,t)=>e[0]+a.shape[t])),c="reflect"===o?0:1,h=n.data.get(a.dataId).values,d=a.shape.length,p=$w(a.shape),f=uw(i),m=i.length,g=$w(i),x=bw(a.dtype,f);for(let e=0;e<f;e++){let t=Dw(e,m,g);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map(((e,t)=>e-l[t]));const n=Ow(t,d,p);x[e]=h[n]}return{dataId:n.write(x,i,a.dtype),shape:i,dtype:a.dtype}}},Aq=MG(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),_q=XG(FN,Aq),Fq={kernelName:FN,backendName:"cpu",kernelFunc:_q};function Oq(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{dim:r}=s,o=a.shape.length;let i=r;if(-1===i&&(i=o-1),i!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${i}`);const l=gw([i],a.shape),u=kq({inputs:{x:a},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=uR(u.shape,l),h=yX({inputs:{x:u},backend:n,attrs:{shape:c}}),d=Qj({inputs:{a:a,b:h},backend:n}),p=mH({inputs:{x:d},backend:n}),f=FK({inputs:{x:p},backend:n,attrs:{axis:l,keepDims:!1}}),m=yX({inputs:{x:f},backend:n,attrs:{shape:c}}),g=VK({inputs:{a:p,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const Dq={kernelName:SS,backendName:"cpu",kernelFunc:Oq};const Mq={kernelName:ON,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{numSamples:r,seed:o,normalized:i}=s;AG(a,"multinomial");const l=i?a:Oq({inputs:{logits:a},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=n.data.get(l.dataId).values,d=[u,r],p=Aw(uw(d),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=h[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+h[t+e];const s=No.alea(o.toString()),a=e*r;for(let e=0;e<r;++e){const t=s();p[a+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){p[a+e]=s;break}}}return i||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(d,"int32",p)}},Lq=mF;const Bq={kernelName:BN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=s;AG(a,"NonMaxSuppression");const u=n.data.get(a.dataId).values,c=n.data.get(r.dataId).values,{selectedIndices:h}=Lq(u,c,o,i,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},Pq=gF;const zq={kernelName:PN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s;AG(a,"NonMaxSuppressionPadded");const c=n.data.get(a.dataId).values,h=n.data.get(r.dataId).values,{selectedIndices:d,validOutputs:p}=Pq(c,h,o,i,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},Wq=xF;const Vq={kernelName:zN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s;AG(a,"NonMaxSuppressionWithScore");const c=n.data.get(a.dataId).values,h=n.data.get(r.dataId).values,d=o,p=i,f=l,m=u,{selectedIndices:g,selectedScores:x}=Wq(c,h,d,p,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([x.length],"float32",new Float32Array(x))]}};const Uq={kernelName:VN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a}=t,{dtype:r,depth:o,onValue:i,offValue:l}=s;AG(a,"oneHot");const u=uw(a.shape),c=new Float32Array(u*o);c.fill(l);const h=n.data.get(a.dataId).values;for(let e=0;e<u;++e)h[e]>=0&&h[e]<o&&(c[e*o+h[e]]=i);return n.makeTensorInfo([...a.shape,o],r,c)}};function Gq(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=VG({inputs:{input:s},backend:n}),t=Gq({inputs:{x:e},backend:n}),a=aK({inputs:{input:s},backend:n}),r=Gq({inputs:{x:a},backend:n}),o=LG({inputs:{real:t,imag:r},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),o}return KK({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const Hq={kernelName:KS,backendName:"cpu",kernelFunc:Gq};const jq={kernelName:WN,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===a.dtype){const t=VG({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s}),r=aK({inputs:{input:a},backend:s}),o=Gq({inputs:{x:r},backend:s}),i=LG({inputs:{real:n,imag:o},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(o),i}return KK({backend:s,attrs:{shape:a.shape,value:1,dtype:a.dtype}})}};function Xq(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s;if(1===t.length)return PK({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const r=t[0].shape,o=t[0].dtype;t.forEach((e=>{iw(r,e.shape,"All tensors passed to stack must have matching shapes"),ow(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],l=oK({inputs:t.map((e=>{const t=PK({inputs:{input:e},backend:n,attrs:{dim:a}});return i.push(t),t})),backend:n,attrs:{axis:a}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}const Kq={kernelName:UN,backendName:"cpu",kernelFunc:Xq};const qq={kernelName:GN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:r,constantValue:o}=s;AG(a,"pad");const i=r.map(((e,t)=>e[0]+a.shape[t]+e[1])),l=r.map((e=>e[0])),u=n.data.get(a.dataId).values,c=uw(a.shape),h=a.shape.length,d=$w(a.shape),p=uw(i),f=i.length,m=$w(i),g=bw(a.dtype,p);0!==o&&g.fill(o);for(let e=0;e<c;e++){g[Ow(Dw(e,h,d).map(((e,t)=>e+l[t])),f,m)]=u[e]}return{dataId:n.write(g,i,a.dtype),shape:i,dtype:a.dtype}}},Yq=MG(((e,t)=>Math.pow(e,t))),Zq=XG(HN,Yq),Jq={kernelName:HN,backendName:"cpu",kernelFunc:Zq};const Qq={kernelName:KN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:a,paramsDenseValues:r,indices:o}=t,i=a.map((e=>n.data.get(e.dataId).values)),l=a.map((e=>e.shape)),u=n.data.get(r.dataId).values,c=n.data.get(o.dataId).values,[h,d,p]=fj(i,l,u,r.shape,r.dtype,c,o.shape),f=h.map((e=>n.makeTensorInfo([e.length],"int32",e))),m=n.makeTensorInfo(p,r.dtype,d);return f.concat([m])}};const eY={kernelName:qN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:s,limits:a,deltas:r}=t,o=n.data.get(s.dataId).values,i=n.data.get(a.dataId).values,l=n.data.get(r.dataId).values,[u,c]=gj(o,s.shape,s.dtype,i,a.shape,l,r.shape);return[n.makeTensorInfo([u.length],"int32",u),n.makeTensorInfo([c.length],s.dtype,c)]}};const tY={kernelName:YN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:a,values:r,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=s,u=n.data.get(a.dataId).values,c=n.data.get(r.dataId).values,h=n.data.get(o.dataId).values,d=i.map((e=>n.data.get(e.dataId).values)),p=i.map((e=>e.shape)),[f,m]=kj(u,a.shape,c,r.shape,r.dtype,h,o.shape,d,p,l);return n.makeTensorInfo(f,r.dtype,m)}};const nY={kernelName:ZN,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,dtype:r,step:o}=n,i=wj(s,a,o,r);return t.makeTensorInfo([i.length],r,i)}},sY=rH(QN,(e=>1/e)),aY={kernelName:QN,backendName:"cpu",kernelFunc:sY};const rY={kernelName:aS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:o,size:i}=s;AG(a,"resizeBilinear");const l=$w(a.shape),[u,c]=i,[h,d,p,f]=a.shape,m=n.data.get(a.dataId).values,g=new Float32Array(uw([h,u,c,f])),x=[r&&u>1?d-1:d,r&&c>1?p-1:p],b=[r&&u>1?u-1:u,r&&c>1?c-1:c];let y=0;const v=x[0]/b[0],k=x[1]/b[1];for(let e=0;e<h;e++)for(let t=0;t<u;t++){let n;n=o?v*(t+.5)-.5:v*t;const s=Math.max(0,Math.floor(n)),a=n-s,r=Math.min(d-1,Math.ceil(n)),i=e*l[0]+s*l[1],u=e*l[0]+r*l[1];for(let e=0;e<c;e++){let t;t=o?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),s=t-n,r=Math.min(p-1,Math.ceil(t)),c=i+n*l[2],h=u+n*l[2],d=i+r*l[2],x=u+r*l[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[h+e],r=t+(m[d+e]-t)*s,o=r+(n+(m[x+e]-n)*s-r)*a;g[y++]=o}}}return n.makeTensorInfo([h,u,c,f],"float32",g)}};const oY={kernelName:rS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:o}=s;AG([r,a],"resizeBilinearGrad");const i=$w(a.shape),[l,u,c,h]=a.shape,[,d,p]=r.shape,f=new Float32Array(l*u*c*h),m=[o&&d>1?u-1:u,o&&p>1?c-1:c],g=[o&&d>1?d-1:d,o&&p>1?p-1:p],x=m[0]/g[0],b=m[1]/g[1],y=n.data.get(r.dataId).values;let v=0;for(let e=0;e<l;e++){const t=e*i[0];for(let e=0;e<d;e++){const n=e*x,s=Math.floor(n),a=Math.min(Math.ceil(n),u-1),r=t+s*i[1],o=t+a*i[1],l=n-s,d=1-l;for(let e=0;e<p;e++){const t=e*b,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),a=t-n,u=1-a,p=r+n*i[2],m=r+s*i[2],g=o+n*i[2],x=o+s*i[2],k=d*u,w=d*a,I=l*u,N=l*a;for(let e=0;e<h;e++){const t=y[v++];f[p+e]+=t*k,f[m+e]+=t*w,f[g+e]+=t*I,f[x+e]+=t*N}}}}return n.makeTensorInfo([l,c,u,h],"float32",f)}};const iY={kernelName:nS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:o,size:i}=s;AG(a,"resizeNearestNeighbor");const l=$w(a.shape),[u,c]=i,[h,d,p,f]=a.shape,m=n.data.get(a.dataId).values,g=new Float32Array(h*u*c*f),x=[r&&u>1?d-1:d,r&&c>1?p-1:p],b=[r&&u>1?u-1:u,r&&c>1?c-1:c],y=x[0]/b[0],v=x[1]/b[1];let k=0;for(let e=0;e<h;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=o?y*(e+.5):y*e;let s=Math.min(d-1,r?Math.round(n):Math.floor(n));o&&(s=Math.max(0,s));const a=t+s*l[1];for(let e=0;e<c;e++){const t=o?v*(e+.5):v*e;let n=Math.min(p-1,r?Math.round(t):Math.floor(t));o&&(n=Math.max(0,n));const s=a+n*l[2];for(let e=0;e<f;e++){const t=m[s+e];g[k++]=t}}}}return n.makeTensorInfo([h,u,c,f],a.dtype,g)}};const lY={kernelName:sS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:o}=s;AG([r,a],"resizeNearestNeighborGrad");const i=$w(a.shape),l=$w(r.shape),[u,c,h,d]=a.shape,[,p,f]=r.shape,m=new Float32Array(u*c*h*d),g=n.data.get(r.dataId).values,x=[o&&p>1?c-1:c,o&&f>1?h-1:h],b=[o&&p>1?p-1:p,o&&f>1?f-1:f],y=x[0]/b[0],v=x[1]/b[1],k=1/y,w=1/v,I=2*Math.ceil(k)+2,N=2*Math.ceil(w)+2;for(let e=0;e<u;e++){const t=e*i[0];for(let e=0;e<c;e++){const n=t+e*i[1],s=Math.floor(e*k),a=Math.floor(s-I/2);for(let s=0;s<h;s++){const r=n+s*i[2],u=Math.floor(s*w),x=Math.floor(u-N/2);for(let n=0;n<d;n++){let i=0;for(let r=0;r<I;r++){const u=r+a;if(u<0||u>=p)continue;const d=t+u*l[1],m=u*y;if(e===Math.min(c-1,o?Math.round(m):Math.floor(m)))for(let e=0;e<N;e++){const t=e+x;if(t<0||t>=f)continue;const a=d+t*l[2],r=t*v;s===Math.min(h-1,o?Math.round(r):Math.floor(r))&&(i+=g[a+n])}}m[r+n]=i}}}}return n.makeTensorInfo(a.shape,a.dtype,m)}};const uY={kernelName:iS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dims:r}=s;AG(a,"reverse");const o=a.shape.length,i=gw(r,a.shape);if(0===o)return zG({inputs:{x:a},backend:n});const l=new VC(a.shape,a.dtype),u=n.bufferSync(a);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();i.forEach((e=>n[e]=a.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},cY={kernelName:ZS,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:a,fillValue:r,center:o}=t,i=n,l=bw(s.dtype,uw(s.shape)),[u,c,h,d]=s.shape,[p,f]=hD(o,c,h),m=Math.sin(a),g=Math.cos(a),x=i.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=e*h*c*d;for(let e=0;e<c;e++){const n=e*(h*d);for(let s=0;s<h;s++){const a=s*d;for(let o=0;o<d;o++){const i=[u,e,s,o],b=i[2],y=i[1];let v=(b-p)*g-(y-f)*m,k=(b-p)*m+(y-f)*g;v=Math.round(v+p),k=Math.round(k+f);let w=r;if("number"!=typeof r&&(w=3===o?255:r[o]),v>=0&&v<h&&k>=0&&k<c){w=x[t+k*(h*d)+v*d+o]}l[t+n+a+o]=w}}}}return{dataId:i.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},hY=rH(lS,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),dY={kernelName:lS,backendName:"cpu",kernelFunc:hY};const pY={kernelName:cS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a,updates:r}=t,{shape:o}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=S_(0,a,o),d=Cj(n.bufferSync(a),n.bufferSync(r),o,h,u,l,i,c,0,!0);return n.makeTensorInfo(o,d.dtype,d.values)}};function fY(e,t){let n=0,s=e.length,a=0;for(;n<s;)a=Math.floor((n+s)/2),e[a]<t?n=a+1:s=a;return s}function mY(e,t){let n=0,s=e.length,a=0;for(;n<s;)a=Math.floor((n+s)/2),e[a]<=t?n=a+1:s=a;return s}const gY={kernelName:dS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:a,values:r}=t,{side:o}=s,i=function(e,t,n,s,a,r){const o=yw("int32",n*a);for(let i=0;i<n;++i){const n=e.slice(i*s,(i+1)*s),l=i*a;for(let e=0;e<a;++e)o[l+e]="left"===r?fY(n,t[e+l]):mY(n,t[e+l])}return o}(n.data.get(a.dataId).values,n.data.get(r.dataId).values,a.shape[0],a.shape[1],r.shape[1],o);return n.makeTensorInfo(r.shape,"int32",i)}};const xY={kernelName:pS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:a,e:r}=t;AG([s,a,r],"select");const o=s.shape.length,i=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,u=n.data.get(r.dataId).values,c=e$(a.dtype,r.dtype),h=Aw(uw(a.shape),c);let d=0;const p=0===o||o>1||1===a.shape.length?1:uw(a.shape.slice(1));for(let e=0;e<i.length;e++)for(let t=0;t<p;t++)1===i[e]?h[d++]=l[e]:h[d++]=u[e];return n.makeTensorInfo(a.shape,c,h)}},bY=rH(fS,(e=>e>=0?1.0507009873554805*e:1.7580993408473768*(Math.exp(e)-1))),yY={kernelName:fS,backendName:"cpu",kernelFunc:bY},vY=rH(bS,(e=>e<0?-1:e>0?1:0)),kY={kernelName:bS,backendName:"cpu",kernelFunc:vY},wY=rH(gS,(e=>Math.sin(e))),IY={kernelName:gS,backendName:"cpu",kernelFunc:wY},NY=rH(xS,(e=>Math.sinh(e))),SY={kernelName:xS,backendName:"cpu",kernelFunc:NY},CY=Math.log(1.1920928955078125e-7)+2,$Y=rH(vS,(e=>{const t=e>-CY,n=e<CY,s=Math.exp(e);let a;return a=n?s:t?e:Math.log(1+s),a})),TY={kernelName:vS,backendName:"cpu",kernelFunc:$Y};const EY={kernelName:IS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:r,paddings:o}=s;AG([a],"spaceToBatchND");const i=uw(r),l=[[0,0]];l.push(...o);for(let e=1+r.length;e<a.shape.length;++e)l.push([0,0]);const u=qq.kernelFunc({inputs:{x:a},backend:n,attrs:{paddings:l,constantValue:0}}),c=dD(u.shape,r,i,!1),h=pD(c.length,r.length,!1),d=fD(u.shape,r,i,!1),p=yX({inputs:{x:u},backend:n,attrs:{shape:c}}),f=ij({inputs:{x:p},backend:n,attrs:{perm:h}}),m=yX({inputs:{x:f},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}};const RY={kernelName:CS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:a,denseShape:r,defaultValue:o}=t;if(1!==r.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${r.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==a.shape.length)throw new Error(`Values must be a vector, saw:\n        ${a.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,u=n.data.get(r.dataId).values,c=n.data.get(o.dataId).values[0],[h,d,p,f,m]=Fj(i,s.shape,s.dtype,l,a.dtype,u,c);return[n.makeTensorInfo(d,s.dtype,h),n.makeTensorInfo([d[0]],a.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};const AY={kernelName:$S,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:a,newShape:r}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==a.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${a.shape}`);if(1!==r.shape.length)throw new Error(`Target shape should be a vector but received shape ${r.shape}`);const o=Array.from(n.data.get(a.dataId).values),i=n.data.get(s.dataId).values,l=Array.from(n.data.get(r.dataId).values),[u,c,h]=Oj(i,s.shape,s.dtype,o,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],r.dtype,new Int32Array(h))]}};const _Y={kernelName:TS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:a,segmentIds:r}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${a.shape}`);if(1!==r.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${r.shape}`);if(a.shape[0]!==r.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(s.dataId).values,i=n.data.get(a.dataId).values,l=n.data.get(r.dataId).values,[u,c]=Dj(o,s.shape,s.dtype,i,l,!0);return n.makeTensorInfo(c,s.dtype,u)}};const FY={kernelName:ES,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:a,segmentIds:r}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${a.shape}`);if(1!==r.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${r.shape}`);if(a.shape[0]!==r.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(s.dataId).values,i=n.data.get(a.dataId).values,l=n.data.get(r.dataId).values,[u,c]=Dj(o,s.shape,s.dtype,i,l);return n.makeTensorInfo(c,s.dtype,u)}};const OY={kernelName:RS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:a,sparseValues:r,defaultValue:o}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=S_(0,a,i),p=!1,f=n.bufferSync(a);let m;switch(r.dtype){case"bool":m=Cj(f,n.bufferSync(r),i,d,c,u,l,h,Boolean(n.data.get(o.dataId).values[0]),p);break;case"float32":m=Cj(f,n.bufferSync(r),i,d,c,u,l,h,n.data.get(o.dataId).values[0],p);break;case"int32":m=Cj(f,n.bufferSync(r),i,d,c,u,l,h,n.data.get(o.dataId).values[0],p);break;case"string":m=Cj(f,n.bufferSync(r),i,d,c,u,l,h,TC(n.data.get(o.dataId).values[0]),p);break;default:throw new Error(`Unsupported type ${r.dtype}`)}return n.makeTensorInfo(i,m.dtype,m.values)}};const DY={kernelName:NS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{numOrSizeSplits:r,axis:o}=s,i=gw(o,a.shape)[0],l=UD(a,r,i),u=new Array(a.shape.length).fill(0),c=a.shape.slice();return l.map((e=>{const t=[...c];t[i]=e;const s=Aj({inputs:{x:a},backend:n,attrs:{begin:u,size:t}});return u[i]+=e,s}))}},MY={kernelName:_S,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;AG(n,"square");const a=s.data.get(n.dataId).values,r=new Float32Array(a.length);for(let e=0;e<a.length;++e){const t=a[e];r[e]=t*t}return{dataId:s.write(r,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},LY=rH(qS,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),BY={kernelName:qS,backendName:"cpu",kernelFunc:LY};const PY={kernelName:OS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:r,end:o,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s;AG(a,"stridedSlice");const{finalShapeSparse:p,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:x,begin:b,end:y,strides:v}=YO(a.shape,r,o,i,l,u,c,h,d);let k;if(m)k=yX({inputs:{x:a},backend:n,attrs:{shape:f}});else if(g||x){ow(a.shape.length>=1,(()=>`Input must have rank at least 1, got: ${a.shape.length}`));const e=BO(b,y,v),t=Aj({inputs:{x:a},backend:n,attrs:{begin:b,size:e}});k=yX({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{const e=Hj(p,n.bufferSync(a),v,b);k=n.makeTensorInfo(f,e.dtype,e.values)}return k}};const zY={kernelName:DS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:a,nGramWidths:r,leftPad:o,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=n.data.get(c.dataId).values,p=n.data.get(h.dataId).values,[f,m]=Xj(d,p,a,r,o,i,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};const WY={kernelName:MS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:a}=s,{input:r,delimiter:o}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(1!==r.shape.length)throw new Error(`Input must be a vector, got shape: ${r.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.data.get(r.dataId).values,l=n.data.get(o.dataId).values[0],[u,c,h]=qj(i,l,a),d=c.length;return[n.makeTensorInfo([d,2],"int32",u),n.makeTensorInfo([d],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};const VY={kernelName:LS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:a}=s,{input:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const o=Yj(n.data.get(r.dataId).values,a);return n.makeTensorInfo(r.shape,"int32",o)}},UY=rH(PS,(e=>Math.tan(e))),GY={kernelName:PS,backendName:"cpu",kernelFunc:UY},HY=rH(zS,(e=>Math.tanh(e)));const jY={kernelName:hS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{tensor:s,indices:a,updates:r}=t,{sliceRank:o,numUpdates:i,sliceSize:l,strides:u,outputSize:c}=S_(0,a,s.shape),h=n.bufferSync(a),d=n.bufferSync(r),p=n.bufferSync(s),f=Cj(h,d,s.shape,c,l,i,o,u,p,!1);return n.makeTensorInfo(s.shape,f.dtype,f.values)}};const XY={kernelName:WS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reps:r}=s;AG(a,"tile");const o=tX(n.bufferSync(a),r);return n.makeTensorInfo(o.shape,o.dtype,o.values)}};const KY={kernelName:VS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{k:r,sorted:o}=s;AG(a,"topk");const i=n.data.get(a.dataId).values,[l,u]=aX(i,a.shape,a.dtype,r,o);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}};const qY={kernelName:US,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{image:a,transforms:r}=t,{interpolation:o,fillMode:i,fillValue:l,outputShape:u}=n,[c,h,d,p]=a.shape,[f,m]=null!=u?u:[h,d],g=[c,f,m,p],x=$w(a.shape),b=x[0],y=x[1],v=x[2],k=$w(g),w=k[0],I=k[1],N=k[2],S=bw(a.dtype,uw(g));S.fill(l);const C=s.data.get(a.dataId).values,$=s.data.get(r.dataId).values;for(let e=0;e<c;++e){const t=1===r.shape[0]?$:$.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let s=0;s<m;++s)for(let a=0;a<p;++a){let r;const u=t[6]*s+t[7]*n+1;if(0===u)continue;const c=(t[0]*s+t[1]*n+t[2])/u,p=(t[3]*s+t[4]*n+t[5])/u,f=YY(c,d,i),m=YY(p,h,i);switch(o){case"nearest":r=JY(C,h,d,b,y,v,e,m,f,a,l);break;case"bilinear":r=QY(C,h,d,b,y,v,e,m,f,a,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`)}S[e*w+n*I+s*N+a]=r}return s.makeTensorInfo(g,a.dtype,S)}return{dataId:s.write(S,g,a.dtype),shape:a.shape,dtype:a.dtype}}};function YY(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return sw(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return sw(0,n,t-1)}(e,t);case"nearest":return function(e,t){return sw(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function ZY(e,t,n,s,a,r,o,i,l,u,c){return 0<=i&&i<t&&0<=l&&l<n?e[o*s+i*a+l*r+u]:c}function JY(e,t,n,s,a,r,o,i,l,u,c){return ZY(e,t,n,s,a,r,o,Math.round(i),Math.round(l),u,c)}function QY(e,t,n,s,a,r,o,i,l,u,c){const h=Math.floor(i),d=Math.floor(l),p=h+1,f=d+1;return(p-i)*((f-l)*ZY(e,t,n,s,a,r,o,h,d,u,c)+(l-d)*ZY(e,t,n,s,a,r,o,h,f,u,c))+(i-h)*((f-l)*ZY(e,t,n,s,a,r,o,p,d,u,c)+(l-d)*ZY(e,t,n,s,a,r,o,p,f,u,c))}const eZ={kernelName:HS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:a}=n,{x:r}=t;AG(r,"unique");const o=s.data.get(r.dataId).values,{outputValues:i,outputShape:l,indices:u}=rX(o,a,r.shape,r.dtype);return[s.makeTensorInfo(l,r.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}};const tZ={kernelName:jS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:a}=t;let{axis:r}=s;r<0&&(r+=a.shape.length);const o=a.shape.length,i=a.shape[r],l=new Array(o-1);let u=0;for(let e=0;e<o;e++)e!==r&&(l[u++]=a.shape[e]);const c=new Array(o).fill(0),h=a.shape.slice();h[r]=1;const d=new Array(i);for(let e=0;e<d.length;e++){c[r]=e;const t=Aj({inputs:{x:a},backend:n,attrs:{begin:c,size:h}});d[e]=yX({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return d}};const nZ={kernelName:XS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,segmentIds:r}=t,{numSegments:o}=s;AG(a,"unsortedSegmentSum");const i=[],l=[],u=a.shape.length-r.shape.length;let c=r;for(let e=0;e<u;++e){const t=PK({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<o;++e){const t=NC(e,"int32"),s=n.makeTensorInfo([],"int32",t),r=dH({inputs:{a:s,b:c},backend:n}),o=HG({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),u=QH({inputs:{a:o,b:a},backend:n}),h=FK({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});i.push(h),l.push(s),l.push(r),l.push(o),l.push(u),l.push(h)}const h=Xq({inputs:i,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},sZ=[IX,DG,SX,$X,JG,TX,EX,RX,AX,_X,OX,MX,BX,WX,UX,XX,KX,qX,YX,wX,ZX,JX,QX,sH,eK,jG,uH,nK,BG,sK,iK,uK,cK,hK,dK,pK,fK,gK,bK,yK,vK,kK,wK,IK,SK,CK,$K,TK,EK,RK,AK,_K,DK,lX,MK,pH,BK,gH,zK,yH,XK,qK,YK,wH,SH,ZK,JK,QK,eq,RH,FH,WG,tq,rK,sq,rq,iq,cX,MH,PH,lq,UH,cq,pq,mq,bq,yq,vq,wq,XH,Iq,Nq,Sq,Cq,$q,Tq,Eq,YH,Rq,Fq,Mq,ej,nj,Bq,zq,Vq,rj,Uq,jq,Kq,qq,Jq,pX,cj,Qq,eY,tY,nY,UG,UK,aY,mX,xX,vX,rY,oY,iY,lY,uY,cY,dY,Sj,pY,gY,xY,yY,Ej,kY,IY,SY,_j,Dq,TY,EY,RY,AY,_Y,FY,OY,DY,Bj,MY,Wj,Gj,BY,PY,zY,WY,VY,eX,OK,GY,{kernelName:zS,backendName:"cpu",kernelFunc:HY},jY,XY,KY,qY,lj,eZ,tZ,nZ,Hq];for(const e of sZ)iC(e);const aZ={},rZ={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function oZ(e,t){if(!(e in aZ)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if(zw().getBool("IS_SAFARI")||"undefined"==typeof OffscreenCanvas||2!==e){if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}return new OffscreenCanvas(300,150)}(e):t;n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete aZ[e]}),!1),zw().getBool("SOFTWARE_WEBGL_ENABLED")&&(rZ.failIfMajorPerformanceCaveat=!1);if(1===e)return n.getContext("webgl",rZ)||n.getContext("experimental-webgl",rZ);return n.getContext("webgl2",rZ)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;aZ[e]=n}const n=aZ[e];return null==n||n.isContextLost()?(delete aZ[e],oZ(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),aZ[e])}var iZ,lZ,uZ;function cZ(e,t){return[t,e]}function hZ(e){const t=uw(e);return dw(Math.ceil(t/4))}function dZ(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function pZ(e,t){const n=e;let s,a,r,o,i,l,u,c,h,d;return 2===zw().getNumber("WEBGL_VERSION")?(s=n.R32F,a=n.R16F,r=n.RGBA16F,o=n.RGBA32F,i=n.RED,u=4,c=1,h=n.HALF_FLOAT,d=n.FLOAT,l=n.RGBA8):(s=e.RGBA,a=e.RGBA,r=e.RGBA,o=n.RGBA,i=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,d=e.FLOAT,l=e.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:a,internalFormatPackedHalfFloat:r,internalFormatPackedFloat:o,textureFormatFloat:i,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:d}}function fZ(e,t){const n=t();return zw().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(iZ||(iZ={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(lZ||(lZ={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(uZ||(uZ={}));function mZ(e){return!!(zw().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function gZ(e,t){return SZ(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}const xZ=/ERROR: [0-9]+:([0-9]+):/g;function bZ(e,t){const n=xZ.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],a=e.split("\n"),r=a.length.toString().length+2,o=a.map(((e,t)=>pw((t+1).toString(),r)+e));let i=0;for(let e=0;e<o.length;e++)i=Math.max(o[e].length,i);const l=o.slice(0,s-1),u=o.slice(s-1,s),c=o.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${pw(u[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function yZ(e,t){if(fZ(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function vZ(e,t,n,s,a,r,o){const i=e.getAttribLocation(t,n);return-1!==i&&(fZ(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),fZ(e,(()=>e.vertexAttribPointer(i,a,e.FLOAT,!1,r,o))),fZ(e,(()=>e.enableVertexAttribArray(i))),!0)}function kZ(e,t,n){!function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}(e,n),fZ(e,(()=>e.activeTexture(e.TEXTURE0+n))),fZ(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}function wZ(e,t,n){fZ(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),fZ(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function IZ(e,t){fZ(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),fZ(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function NZ(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function SZ(e,t,n){const s=fZ(e,(()=>t()));if(null==s)throw new Error(n);return s}function CZ(e,t=2){return uw(e.slice(0,e.length-t))}function $Z(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function TZ(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[CZ(e),...$Z(e)]),t}function EZ(e){return e%2==0}function RZ(e,t){if(cw(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e[e.length-1],s=t[t.length-1];if(n===s)return!0;if(EZ(n)&&EZ(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&EZ(e[0])&&EZ(t[0])}let AZ,_Z;function FZ(e,t){return null!=e.getExtension(t)}function OZ(e){try{if(null!=oZ(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function DZ(e){if(0===e)return!1;const t=oZ(e);if(1!==e){if(FZ(t,"EXT_color_buffer_float"))return MZ(t);const e="EXT_color_buffer_half_float";if(FZ(t,e)){const n=t.getExtension(e);return function(e,t){const n=pZ(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s);const a=1,r=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,a,r,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const o=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,o),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const i=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(o),i}(t,n)}return!1}if(!FZ(t,"OES_texture_float"))return!1;if(!FZ(t,"WEBGL_color_buffer_float"))return!1;return MZ(t)}function MZ(e){const t=pZ(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),a}function LZ(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&ow("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const BZ=zw();function PZ(){let e,t,n,s,a,r,o,i,l,u;return 2===zw().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",a="texture",r="outputColor",o="out vec4 outputColor;",i=zw().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",a="texture2D",r="gl_FragColor",o="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:a,output:r,defineOutput:o,defineSpecialNaN:i,defineSpecialInf:l,defineRound:u}}function zZ(e,t,n="index"){const s=$w(t);return s.map(((t,a)=>`${`int ${e[a]} = ${n} / ${t}`}; ${a===s.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${t}`:`index -= ${e[a]} * ${t}`};`)).join("")}function WZ(e,t,n="index"){const s=$w(t);return s.map(((t,a)=>`${`int ${e[a]} = ${n} / outShapeStrides[${a}]`}; ${a===s.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * outShapeStrides[${a}]`:`index -= ${e[a]} * outShapeStrides[${a}]`};`)).join("")}function VZ(e,t,n="index"){const s=function(e,t){const n=e.length,s=e.map((e=>`${t}[${e}]`)),a=new Array(n-1);a[n-2]=s[n-1];for(let e=n-3;e>=0;--e)a[e]=`(${a[e+1]} * ${s[e+1]})`;return a}(e.map(((e,t)=>t)),t);return s.map(((t,a)=>`${`int ${e[a]} = ${n} / ${s[a]}`}; ${a===s.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${s[a]}`:`index -= ${e[a]} * ${s[a]}`};`)).join("")}function UZ(e){const t=$w(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}BZ.registerFlag("HAS_WEBGL",(()=>BZ.getNumber("WEBGL_VERSION")>0)),BZ.registerFlag("WEBGL_VERSION",(()=>OZ(2)?2:OZ(1)?1:0)),BZ.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),BZ.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===BZ.get("WEBGL_VERSION"))),BZ.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),BZ.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),BZ.registerFlag("WEBGL_PACK",(()=>BZ.getBool("HAS_WEBGL"))),BZ.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>BZ.getBool("WEBGL_PACK"))),BZ.registerFlag("WEBGL_PACK_CLIP",(()=>BZ.getBool("WEBGL_PACK"))),BZ.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>BZ.getBool("WEBGL_PACK"))),BZ.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>BZ.getBool("WEBGL_PACK"))),BZ.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>BZ.getBool("WEBGL_PACK"))),BZ.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>BZ.getBool("WEBGL_PACK"))),BZ.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>BZ.getBool("WEBGL_PACK"))),BZ.registerFlag("WEBGL_PACK_REDUCE",(()=>BZ.getBool("WEBGL_PACK"))),BZ.registerFlag("WEBGL_LAZILY_UNPACK",(()=>BZ.getBool("WEBGL_PACK"))),BZ.registerFlag("WEBGL_CONV_IM2COL",(()=>BZ.getBool("WEBGL_PACK"))),BZ.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",(()=>BZ.getBool("WEBGL_PACK"))),BZ.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==AZ){const t=oZ(e);AZ=t.getParameter(t.MAX_TEXTURE_SIZE)}return AZ}(BZ.getNumber("WEBGL_VERSION")))),BZ.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==_Z){const t=oZ(e);_Z=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,_Z)}(BZ.getNumber("WEBGL_VERSION")))),BZ.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=BZ.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=oZ(e);return t=FZ(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:FZ(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),BZ.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>BZ.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!p$())),BZ.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=oZ(e);if(1===e){if(!FZ(t,"OES_texture_float"))return!1}else if(!FZ(t,"EXT_color_buffer_float"))return!1;return MZ(t)}(BZ.getNumber("WEBGL_VERSION")))),BZ.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!BZ.getBool("WEBGL_FORCE_F16_TEXTURES")&&BZ.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),BZ.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>DZ(BZ.getNumber("WEBGL_VERSION")))),BZ.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=BZ.getNumber("WEBGL_VERSION"))&&null!=oZ(e).fenceSync;var e})),BZ.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>BZ.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),BZ.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if("number"!=typeof e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),BZ.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>p$()?1:-1),(e=>{if("number"!=typeof e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),BZ.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),BZ.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),BZ.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),BZ.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),BZ.registerFlag("WEBGL_EXP_CONV",(()=>!1)),BZ.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>BZ.getBool("IS_TEST"))),BZ.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",(()=>1/0)),BZ.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",(()=>!1)),BZ.registerFlag("WEBGL2_ISNAN_CUSTOM",(()=>!1)),BZ.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1));const GZ="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:HZ}=lM;function jZ(e,t,n){const s=[];if(e.forEach((e=>{const t=uw(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=sJ(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:s.push(`uniform int ${e.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${e.name}Shape;`)}s.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{s.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const a=s.join("\n"),r=e.map((e=>function(e,t,n=!1,s){let a="";a+=n?KZ(e,s):XZ(e,s);const r=e.shapeInfo.logicalShape,o=t.logicalShape;r.length<=o.length&&(a+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",r=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,i=HZ(e.shapeInfo.logicalShape,t.logicalShape),l=nJ(o),u=o-r;let c;const h=["x","y","z","w","u","v"];c=0===r?"":o<2&&i.length>=1?"coords = 0;":i.map((e=>`coords.${h[e+u]} = 0;`)).join("\n");let d="";d=o<2&&r>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+u]}`)).join(", ");let p="return outputValue;";const f=1===uw(e.shapeInfo.logicalShape),m=uw(t.logicalShape),g=1===m;if(1!==r||f||g){if(f&&!g)p=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const e=r-2,t=r-1;i.indexOf(e)>-1&&i.indexOf(t)>-1?p="return vec4(outputValue.x);":i.indexOf(e)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(t)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${a}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${d});\n      ${p}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",r=t.texShape,o=e.shapeInfo.texShape,i=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&i===l&&null==e.shapeInfo.flatOffset&&cw(o,r))return`\n      float ${a}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=nJ(l),c=HZ(e.shapeInfo.logicalShape,t.logicalShape),h=l-i;let d;const p=["x","y","z","w","u","v"];d=0===i?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${p[e+h]} = 0;`)).join("\n");let f="";f=l<2&&i>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+h]}`)).join(", ");return`\n    float ${a}() {\n      ${u} coords = getOutputCoords();\n      ${d}\n      return get${s}(${f});\n    }\n  `}(e,t));return a}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),o=t.texShape,i=PZ(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(i);let u,c,h=function(e){const t=`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${qZ}\n    ${YZ}\n    ${ZZ}\n  `;return t}(i);t.isPacked?(u=function(e,t,n){switch(e.length){case 0:return QZ();case 1:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===s[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `;if(1===s[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `;if(n)return"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ";return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(cw(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const a=Math.ceil(e[1]/2);if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ";return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[2]/2),r=a*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[e.length-1]/2),r=a*Math.ceil(e[e.length-2]/2);let o=r,i="",l="b, r, c";for(let t=2;t<e.length-1;t++)o*=e[e.length-t-1],i=`\n      int b${t} = index / ${o};\n      index -= b${t} * ${o};\n    `+i,l=`b${t}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(i)):(u=function(e,t,n){switch(e.length){case 0:return QZ();case 1:return function(e,t,n){if(1===t[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;if(n)return"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ";return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){if(cw(e,t))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ";return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n){return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${WZ(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`}const s=zZ(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n){return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${WZ(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `}const s=zZ(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=zZ(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=zZ(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(i)),n.packedInputs&&(h+=JZ);return[h,l,c,a,u,r,n.userCode].join("\n")}function XZ(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${s}() {return ${n};}`;const[a,r]=e.shapeInfo.texShape;if(1===a&&1===r)return`\n      float ${s}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=eJ(n);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[i,l]=e.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${i}, ${l}, ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${tJ(e)}\n      }\n    `;const a=e.shapeInfo.texShape,r=a[0],o=a[1];if(1===o&&1===r)return`\n      float ${s}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=eJ(n);if(1===o)return t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${r}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(1===r)return t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${o}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(t)return`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${r}, ${o}, index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=e.shapeInfo.texShape;if(null!=r&&cw(n,r)){if(t)return`\n      float ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `;const e=r[0];return`\n    float ${a}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${r[1]}.0, ${e}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `}const{newShape:o,keptDims:i}=xw(n),l=o;if(l.length<n.length){const n=["row","col"];return`\n      ${XZ(aJ(e,l),t)}\n      float ${a}(int row, int col) {\n        return ${a}(${rJ(n,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${tJ(e)}\n      }\n    `;const u=r[0],c=r[1],h=eJ(s);if(1===c)return t?`\n      float ${a}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;if(1===u)return t?`\n      float ${a}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `;if(t)return`\n      float ${a}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `;return`\n  float ${a}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=n[1]*n[2],o=n[2],{newShape:i,keptDims:l}=xw(n),u=i;if(u.length<n.length){const n=["row","col","depth"];return`\n        ${XZ(aJ(e,u),t)}\n        float ${a}(int row, int col, int depth) {\n          return ${a}(${rJ(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${r}, ${o}, 1)));\n        ${tJ(e)}\n      }\n    `;const c=e.shapeInfo.texShape,h=c[0],d=c[1],p=e.shapeInfo.flatOffset;if(d===r&&null==p)return t?`\n      float ${a}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${a}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${o}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(d===o&&null==p)return t?`\n      float ${a}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const f=eJ(s);if(t)return`\n    float ${a}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `;return`\n      float ${a}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r} + col * ${o} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${d}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=n[3],o=n[2]*r,i=n[1]*o,{newShape:l,keptDims:u}=xw(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${XZ(aJ(e,l),t)}\n      float ${a}(int row, int col, int depth, int depth2) {\n        return ${a}(${rJ(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${o}, ${r}, 1)));\n        ${tJ(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],p=h[1],f=`int stride2 = ${s}Shape[3];`,m=`int stride1 = ${s}Shape[2] * stride2;`,g=`int stride0 = ${s}Shape[1] * stride1;`;if(p===i&&null==c)return t?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${o}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(p===r&&null==c)return t?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const x=eJ(s);if(t)return`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${x});\n      return sampleTexture(${s}, uv);\n    }\n  `;return`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} +\n          depth * ${r} + depth2;\n      vec2 uv = uvFromFlat(${d}, ${p}, index + ${x});\n      return sampleTexture(${s}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[4],r=t[3]*a,o=t[2]*r,i=t[1]*o,{newShape:l,keptDims:u}=xw(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${XZ(aJ(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${rJ(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${o}, ${r}, ${a})) +\n          depth3;\n        ${tJ(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],p=h[1];if(p===i&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${r}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===a&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=eJ(n);return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} + depth * ${r} +\n          depth2 * ${a} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:a,keptDims:r}=xw(t);if(a.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${XZ(aJ(e,a))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${rJ(t,r)});\n      }\n    `}const o=t[5],i=t[4]*o,l=t[3]*i,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${tJ(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${i}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===o&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=eJ(n);return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${i} + depth3 * ${o} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function KZ(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),s=PZ();return`\n    vec4 ${n}() {\n      return ${s.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,r=PZ();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${r.texture2D}(${n}, uv);\n    }\n  `;const o=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${o[0]}, ${o[1]}, index);\n      return ${r.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=e.shapeInfo.texShape,o=r[0],i=r[1],l=PZ();if(null!=r&&cw(n,r))return t?`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${o}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${a}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],c=Math.ceil(n[1]/2);return`\n    vec4 ${a}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=e.shapeInfo.texShape,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];if(1===n[0]){const s=[1,2],r=["b","row","col"];return`\n        ${KZ(aJ(e,n.slice(1)),t)}\n        vec4 ${a}(int b, int row, int col) {\n          return ${a}(${rJ(r,s)});\n        }\n      `}const i=PZ();if(t)return`\n    vec4 ${a}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `;const l=o[0],u=o[1],c=Math.ceil(n[2]/2),h=c*Math.ceil(n[1]/2);return`\n    vec4 ${a}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${h}, ${c}, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=PZ();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${a.texture2D}(${n}, uv);\n    }\n  `;const r=e.shapeInfo.logicalShape,o=r.length,i=e.shapeInfo.texShape,l=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],u=l[0],c=l[1],h=Math.ceil(r[o-1]/2);let d=h*Math.ceil(r[o-2]/2),p="int b, int row, int col",f=`b * ${d} + (row / 2) * ${h} + (col / 2)`;for(let e=2;e<o-1;e++)p=`int b${e}, `+p,d*=r[o-e-1],f=`b${e} * ${d} + `+f;return`\n    vec4 ${s}(${p}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const qZ="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",YZ="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",ZZ="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",JZ="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function QZ(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function eJ(e){return`offset${e}`}function tJ(e){const t=e.name,n=uw(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function nJ(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function sJ(e,t,n){const{newShape:s,keptDims:a}=xw(t),r=t.length,o=e&&3===r&&1===t[0],i=o?t.slice(1):s,l=!e&&r>1&&!cw(t,n)&&s.length<r||o;return{useSqueezeShape:l,uniformShape:l?i:t,keptDims:a}}function aJ(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function rJ(e,t){return t.map((t=>e[t])).join(", ")}function oJ(e,t,n,s){const a=n.map(((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}})),r=a.map((e=>e.shapeInfo)),o={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},i=jZ(a,o,t),l=function(e,t){const n=SZ(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(fZ(e,(()=>e.shaderSource(n,t))),fZ(e,(()=>e.compileShader(n))),zw().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw bZ(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(e.gl,i),u=e.createProgram(l);return zw().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:r,outShapeInfo:o,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(e.buildVao(u),Object.assign({program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:r,outShapeInfo:o},iJ(e,t,u)))}function iJ(e,t,n){const s=[],a=[];let r,o,i,l=null,u=null;u=e.getUniformLocation(n,"NAN",!1),1===zw().getNumber("WEBGL_VERSION")&&(l=e.getUniformLocation(n,"INFINITY",!1));const c=!1;for(const a of t.variableNames){const r={name:a,uniform:e.getUniformLocation(n,a,c),offset:e.getUniformLocation(n,`offset${a}`,c)};t.enableShapeUniforms&&(r.shape=e.getUniformLocation(n,`${a}Shape`,c),r.texShape=e.getUniformLocation(n,`${a}TexShape`,c)),s.push(r)}if(t.enableShapeUniforms&&(r=e.getUniformLocation(n,"outShape",c),i=e.getUniformLocation(n,"outShapeStrides",c),o=e.getUniformLocation(n,"outTexShape",c)),t.customUniforms)for(const s of t.customUniforms)a.push(e.getUniformLocation(n,s.name,c));return{variablesLocations:s,customUniformLocations:a,infLoc:l,nanLoc:u,outShapeLocation:r,outShapeStridesLocation:i,outTexShapeLocation:o}}function lJ(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,a=t[n],r=a.shape;if(!cw(s,r))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${r} must match`);if(e.isUniform&&a.isUniform)return;const o=e.texShape,i=a.isUniform?null:a.texData.texShape;if(!cw(o,i))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${i} must match`)}))}function uJ(e){return zw().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class cJ{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=iZ.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=PZ();this.outputShape=e,this.enableShapeUniforms=uJ(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?WZ(["r","c","d"],e):zZ(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class hJ{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=iZ.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=PZ();this.outputShape=e,this.enableShapeUniforms=uJ(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?WZ(["r","c","d"],e):zZ(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class dJ{constructor(e){this.variableNames=["A"],this.outTexUsage=lZ.DOWNLOAD;const t=PZ();this.outputShape=e,this.userCode=`\n      ${GZ}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class pJ{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=lZ.DOWNLOAD;const t=PZ();this.outputShape=e,this.userCode=`\n      ${GZ}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}const fJ={R:0,G:1,B:2,A:3};class mJ{constructor(e,t=!1,n="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=PZ();this.outputShape=e,this.enableShapeUniforms=uJ(this.outputShape.length);let a="result";t&&(a="floor(result * 255. + 0.5)");let r="";for(let e=0;e<n.length;e++){const t=n[e];r+=`\n          if(offset == ${e}) {\n            result = values[${fJ[t]}];\n          }`}this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":UZ(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${n.length});\n\n        flatIndex = idiv(flatIndex, ${n.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${s.texture2D}(A, uv);\n          ${r}\n        }\n        ${s.output} = vec4(${a}, 0., 0., 0.);\n      }\n    `}}class gJ{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=PZ();this.outputShape=e,this.enableShapeUniforms=uJ(this.outputShape.length);let s="",a="result";t&&(a="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let a=0;a<=1;a++){const r=2*t+a;s+=`\n          localCoords = coords;\n          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${a};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${r}] = values[0];\n            } else if (offset == 1) {\n              result[${r}] = values[1];\n            } else if (offset == 2) {\n              result[${r}] = values[2];\n            } else {\n              result[${r}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":UZ(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${s}\n\n          ${n.output} = ${a};\n        }\n    `}}function xJ(e){const t=PZ();return function(e,t){const n=SZ(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(fZ(e,(()=>e.shaderSource(n,t))),fZ(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function bJ(e){return function(e,t){const n=SZ(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return fZ(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),fZ(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function yJ(e){return function(e,t){const n=SZ(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return fZ(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),fZ(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function vJ(e,t,n,s,a,r){!function(e,t){const n=zw().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const o=function(e){return SZ(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),i=e.TEXTURE_2D;return fZ(e,(()=>e.bindTexture(i,o))),fZ(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),fZ(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),fZ(e,(()=>e.texParameteri(i,e.TEXTURE_MIN_FILTER,e.NEAREST))),fZ(e,(()=>e.texParameteri(i,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===zw().getNumber("WEBGL_VERSION")?fZ(e,(()=>e.texImage2D(i,0,s,t,n,0,a,r,null))):fZ(e,(()=>e.texStorage2D(i,1,s,t,n))),fZ(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:o,texShape:[n,t]}}function kJ(e){return e.internalFormatFloat}function wJ(e){return e.internalFormatHalfFloat}function IJ(e){return e.downloadTextureFormat}function NJ(e){return e.internalFormatPackedFloat}function SJ(e){return e.internalFormatPackedHalfFloat}function CJ(e,t,n,s,a,r,o,i){const l=e,u=new Float32Array(function(e,t){const[n,s]=dZ(e,t);return n*s*4}(r,o));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}class $J{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const t=zw().getNumber("WEBGL_VERSION");if(null!=e?(this.gl=e,function(e,t){aZ[e]=t}(t,e)):this.gl=oZ(t),e=this.gl,2===zw().getNumber("WEBGL_VERSION")){const t=e;this.createVertexArray=()=>fZ(t,(()=>t.createVertexArray())),this.bindVertexArray=e=>fZ(t,(()=>t.bindVertexArray(e))),this.deleteVertexArray=e=>fZ(t,(()=>t.deleteVertexArray(e))),this.getVertexArray=()=>fZ(t,(()=>t.getParameter(t.VERTEX_ARRAY_BINDING)))}else if(null!=e){const t=e.getExtension("OES_vertex_array_object");if(null==t)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>fZ(e,(()=>t.createVertexArrayOES())),this.bindVertexArray=n=>fZ(e,(()=>t.bindVertexArrayOES(n))),this.deleteVertexArray=n=>fZ(e,(()=>t.deleteVertexArrayOES(n))),this.getVertexArray=()=>fZ(e,(()=>e.getParameter(t.VERTEX_ARRAY_BINDING_OES)))}let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===zw().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=gZ(this.gl,e),FZ(this.gl,t))this.textureHalfFloatExtension=gZ(this.gl,t);else if(zw().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),FZ(this.gl,s))this.colorBufferHalfFloatExtension=gZ(this.gl,s);else if(zw().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",FZ(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!FZ(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=bJ(this.gl),this.indexBuffer=yJ(this.gl),this.framebuffer=function(e){return SZ(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=pZ(this.gl,this.textureHalfFloatExtension)}get debug(){return zw().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;fZ(e,(()=>e.finish())),fZ(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),fZ(e,(()=>e.deleteFramebuffer(this.framebuffer))),fZ(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),fZ(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),fZ(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=cZ(t,n);return vJ(e,a,r,kJ(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=cZ(t,n);return vJ(e,a,r,wJ(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=cZ(t,n);return vJ(e,a,r,IJ(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){fZ(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===zw().getNumber("WEBGL_VERSION")?fZ(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):fZ(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===zw().getNumber("WEBGL_VERSION")?fZ(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):fZ(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),fZ(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,a,r){let o,i,l;fZ(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),a instanceof Uint8Array?(o=new Uint8Array(n*s*4),i=e.UNSIGNED_BYTE,l=e.RGBA):(o=new Float32Array(n*s*4),i=e.FLOAT,l=r.internalFormatPackedFloat),o.set(a),2===zw().getNumber("WEBGL_VERSION")?fZ(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,s,e.RGBA,i,o))):fZ(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,i,o))),fZ(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=dZ(t,n);return vJ(e,a,r,SJ(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=dZ(t,n);return vJ(e,a,r,NJ(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(IZ(this.gl,this.framebuffer),this.outputTexture=null),fZ(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,s){const[a,r]=cZ(t,n),o=new Uint8Array(t*n*4);return fZ(e,(()=>e.readPixels(0,0,a,r,s.downloadTextureFormat,e.UNSIGNED_BYTE,o))),new Float32Array(o.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,a,r){return CJ(this.gl,e,0,0,0,a,r,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,a=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,a),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),a}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const a=e.createBuffer();fZ(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,a)));const r=16*t*n;return fZ(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,r,e.STREAM_READ))),fZ(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),fZ(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),a}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(zw().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,a=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(a,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=a}else zw().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,zw().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const s=new Float32Array(t*n*4);return fZ(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=xJ(t));const n=function(e){return SZ(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);fZ(t,(()=>t.attachShader(n,this.vertexShader))),fZ(t,(()=>t.attachShader(n,e))),function(e,t){if(fZ(e,(()=>e.linkProgram(t))),!zw().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n);const s=Object.assign(n,{vao:this.createVertexArray()});return this.debug&&yZ(t,s),s}buildVao(e){this.setProgram(e),this.bindVertexArray(e.vao);const t=this.gl;fZ(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer))),function(e,t,n){fZ(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),vZ(e,t,"clipSpacePos",n,3,20,0)&&vZ(e,t,"uv",n,2,20,12)}(t,e,this.vertexBuffer)}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&(fZ(this.gl,(()=>this.gl.deleteProgram(e))),this.deleteVertexArray(e.vao))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&yZ(this.gl,this.program),fZ(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return SZ(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),fZ(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(e,t,n,s){fZ(e,(()=>kZ(e,t,s))),fZ(e,(()=>e.uniform1i(n,s)))}(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,a]=dZ(t,n);this.setOutputMatrixTextureDriver(e,s,a)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&yZ(this.gl,this.program),NZ(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}fZ(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),fZ(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=gZ(this.gl,2===zw().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===zw().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===zw().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await fw((()=>this.disposed||this.isQueryAvailable(e,zw().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,zw().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in zw().platform&&(n=zw().platform.setTimeoutCustom.bind(zw().platform)),fw((()=>(this.pollItems(),0===this.itemsToPoll.length)),(()=>0),null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),wZ(this.gl,e,this.framebuffer),this.debug&&NZ(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(wZ(this.gl,this.outputTexture,this.framebuffer),this.debug&&NZ(this.gl)):IZ(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;wZ(s,e,this.framebuffer),this.debug&&NZ(s),this.outputTexture=e,fZ(s,(()=>s.viewport(0,0,t,n))),fZ(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),fZ(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:TJ,bincountImpl:EJ,bincountReduceImpl:RJ,bitwiseAndImpl:AJ,castImpl:_J,ceilImpl:FJ,concatImpl:OJ,equalImpl:DJ,expImpl:MJ,expm1Impl:LJ,floorImpl:BJ,gatherNdImpl:PJ,gatherV2Impl:zJ,greaterImpl:WJ,greaterEqualImpl:VJ,lessImpl:UJ,lessEqualImpl:GJ,linSpaceImpl:HJ,logImpl:jJ,maxImpl:XJ,maximumImpl:KJ,minimumImpl:qJ,multiplyImpl:YJ,negImpl:ZJ,notEqualImpl:JJ,prodImpl:QJ,raggedGatherImpl:eQ,raggedRangeImpl:tQ,raggedTensorToTensorImpl:nQ,rangeImpl:sQ,rsqrtImpl:aQ,scatterImpl:rQ,sigmoidImpl:oQ,simpleAbsImpl:iQ,sliceImpl:lQ,sparseFillEmptyRowsImpl:uQ,sparseReshapeImpl:cQ,sparseSegmentReductionImpl:hQ,sqrtImpl:dQ,staticRegexReplaceImpl:pQ,stridedSliceImpl:fQ,stringNGramsImpl:mQ,stringSplitImpl:gQ,stringToHashBucketFastImpl:xQ,subImpl:bQ,tileImpl:yQ,topKImpl:vQ,transposeImpl:kQ,uniqueImpl:wQ}=oX;function IQ(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function NQ(e,t){return 1===t?[e]:IQ(e,t)}class SQ{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=uJ(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=NQ("rc",this.rank),t=nJ(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),a=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${s}\n\n            setOutput(vec4(${a}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let s=0;s<=1;s++){let a=`${0===n?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let t=2;t<this.rank;t++)a=`${e[e.length-1-t]},`+a;t.push(a)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],s=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${s};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);if(1===this.rank){return`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class CQ{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=uJ(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s,a;this.userCode=`\n      ${s=t,a=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${a?VZ(["r","c","d"],"inputShape"):zZ(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":UZ(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class $Q{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(e,t,n){const s=EQ(t,n),a=RQ(e,s,n);a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]);const r=TQ(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=r,this.log();const e=this.freeTextures[a].pop();return this.usedTextures[a].push(e),e}let o;return s===uZ.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===uZ.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===uZ.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===uZ.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===uZ.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[a].push(o),this.numUsedTextures++,this._numBytesAllocated+=r,this.log(),o}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const a=EQ(n,s),r=RQ(t,a,s);r in this.freeTextures||(this.freeTextures[r]=[]);const o=TQ(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,s),i=zw().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==i&&this._numBytesAllocated>i?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=o):(this.freeTextures[r].push(e),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const l=this.usedTextures[r],u=l&&l.indexOf(e);if(null==u||u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l[u]=l[l.length-1],l.pop(),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function TQ(e,t,n,s,a){const r=function(e,t){switch(e){case uZ.PACKED_2X2_FLOAT32:return NJ(t);case uZ.PACKED_2X2_FLOAT16:return SJ(t);case uZ.UNPACKED_FLOAT32:return kJ(t);case uZ.UNPACKED_FLOAT16:return wJ(t);case uZ.PACKED_4X1_UNSIGNED_BYTE:return IJ(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let o;if(a){const[t,n]=dZ(e[0],e[1]);o=t*n}else{const[t,n]=cZ(e[0],e[1]);o=t*n}const i=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,r);return o*i}function EQ(e,t){if(e===lZ.UPLOAD)return uZ.PACKED_2X2_FLOAT32;if(e===lZ.RENDER||null==e)return function(e){return zw().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?uZ.PACKED_2X2_FLOAT32:uZ.UNPACKED_FLOAT32:e?uZ.PACKED_2X2_FLOAT16:uZ.UNPACKED_FLOAT16}(t);if(e===lZ.DOWNLOAD||e===lZ.PIXELS)return uZ.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function RQ(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class AQ{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=uJ(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const _Q="if (isnan(x)) return x;",FQ="return x;",OQ="return abs(x);",DQ="return (x >= 0.0) ? x : (exp(x) - 1.0);",MQ=_Q+"\n  return (x < 0.0) ? 0.0 : x;\n",LQ=_Q+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",BQ="return x;",PQ="return 1.0 / (1.0 + exp(-1.0 * x));",zQ="return x;",WQ="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",VQ="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",UQ="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",GQ="return 1.0 / (1.0 + exp(-1.0 * x));";class HQ{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=uJ(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class jQ{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=uJ(this.outputShape.length);const t=e.length,n=NQ("rc",t),s=nJ(t),a=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),r=n.slice(-2),o=t<=1?"rc":`vec2(${r.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${a});\n\n        setOutput(getChannel(packedInput, ${o}));\n      }\n    `}}const XQ=F_,KQ={};const qQ=zw().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class YQ extends ew{nextDataId(){return YQ.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!zw().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof $J)t=e;else{const n=oZ(zw().getNumber("WEBGL_VERSION"),e);t=new $J(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=oZ(zw().getNumber("WEBGL_VERSION"));t=new $J(e),this.binaryCache=((n=zw().getNumber("WEBGL_VERSION"))in KQ||(KQ[n]={}),KQ[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new $Q(this.gpgpu),this.numMBBeforeWarning=null==zw().global.screen?1024:zw().global.screen.height*zw().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new Qk(this,IT())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,n,s,a,r){const o=this.makeTensorInfo(t,n),i=this.texData.get(o.dataId);i.isPacked=!1,i.texture={texture:e,texShape:[s,a]},i.texShape=[s,a];const l=TZ(t),u=new mJ(l,!1,r),c=this.runWebGLProgram(u,[o],n,[[s,a]]);return c.shape=t,i.texture=null,this.disposeIntermediateTensorInfo(o),c.dataId}write(e,t,n){if((zw().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||zw().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:lZ.UPLOAD,refCount:1}),s}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,s,a){if(zw().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:lZ.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:a,slice:r,shape:o,isPacked:i}=t;if(null!=r){let t;t=i?new HQ(o,BQ):new AQ(o,BQ);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:s}],s),a=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=CC()),"complex64"===s){c=SD(this.readSync(a.real.dataId),this.readSync(a.imag.dataId))}else c=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=CC()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:s,slice:a,dtype:r,complexTensorInfos:o,isPacked:i}=t;if(null!=a){let t;t=i?new HQ(s,BQ):new AQ(s,BQ);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:r}],r),a=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if(zw().getBool("DEBUG")&&!zw().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===zw().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==r&&zw().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...hZ(s))}if(this.pendingRead.set(e,[]),"complex64"!==r&&await this.gpgpu.createAndWaitForFence(),"complex64"===r){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]);u=SD(e[0],e[1])}else if(null==c)u=this.getValuesFromTexture(e);else{const e=uw(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=c){const e=this.gpgpu.gl;fZ(e,(()=>e.deleteBuffer(c)))}const h=this.convertAndCacheOnCPU(e,u),d=this.pendingRead.get(e);return this.pendingRead.delete(e),d.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&IT().removeDataId(e,this),this.pendingDeletes--),h}readToGPU(e,t={}){const n=this.texData.get(e),{values:s,shape:a,slice:r,dtype:o,isPacked:i,texture:l}=n;if("complex64"===o)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=r){let n;n=i?new HQ(a,BQ):new AQ(a,BQ);const s=this.runWebGLProgram(n,[{dataId:e,shape:a,dtype:o}],o),r=this.readToGPU(s,t);return this.disposeIntermediateTensorInfo(s),r}if(null==l)throw null!=s?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const u=this.decode(e,t.customTexShape),c=IT().makeTensorFromTensorInfo(u),h=this.texData.get(u.dataId);return Object.assign({tensorRef:c},h.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>TC(e)));return yT(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return yT(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!mZ(n)){if(zw().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),a=uw(t);if(zw().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),r=this.gpgpu.downloadMatrixFromPackedTexture(s.texture.texture,...hZ(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(n),r}const r=zw().getBool("WEBGL_PACK")&&!0===s,o=r?TZ(t):t,i=r?new pJ(o):new dJ(o),l=this.runWebGLProgram(i,[{shape:o,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return zw().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const a=RC(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),r=RC(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,s&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(zw().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(a);o.kernelMs=function(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}(e),o.getExtraProfileInfo=()=>e.map(((e,t)=>({name:r[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return zw().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:CC(),endMs:null}}endTimer(e){return zw().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=CC(),e)}async getQueryTime(e){if(zw().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:a,isPacked:r,slice:o}=this.texData.get(e),i=o&&o.origDataId||e,l=this.dataRefCount.get(i);l>1?this.dataRefCount.set(i,l-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,a,r)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=qQ){return zw().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&uw(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){tC("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return XQ(e.shape,t)}packedUnaryOp(e,t,n){const s=new HQ(e.shape,t),a=this.compileAndRun(s,[e],n);return IT().makeTensorFromTensorInfo(a)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=iQ(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(zw().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,OQ,e.dtype);const t=new AQ(e.shape,OQ),n=this.compileAndRun(t,[e]);return IT().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&ww(n[0])){const a=n.map((e=>$C(e)));s=this.write(a,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){return IT().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new jQ(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new SQ(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[CZ(e.shape),...$Z(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},a=[CZ(t),...$Z(t)],r=new CQ(a,n),o=[n],i=this.runWebGLProgram(r,[s],e.dtype,o,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:s,shape:a,dtype:r}=n;if(null!=t){ow(uw(a)<=t[0]*t[1]*4,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const o=TZ(a);let i;i=s?new hJ(o):new cJ(o);const l=[null!=t?t:hZ(o)];return{dtype:r,shape:a,dataId:this.runWebGLProgram(i,[{shape:o,dtype:r,dataId:e}],r,l,!0,t).dataId}}runWebGLProgram(e,t,n,s,a=!1,r){const o=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(o.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===iZ.DENSE){const t=null!=r?r:hZ(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===uw(o.shape))return i.values=bw(o.dtype,0),o;const l=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&uw(t.shape)<=zw().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!RZ(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),l.push(t),n=this.texData.get(t.dataId),e.shape=s}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(o.dataId);const c={shape:o.shape,texData:i,isUniform:!1},h=function(e,t,n){let s="";t.concat(n).forEach((t=>{const a=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const r=t.texData.texShape,{useSqueezeShape:o,uniformShape:i,keptDims:l}=sJ(e.packedInputs,t.shape,r);let u="",c="",h="";if(1===i.length&&e.packedInputs){const e=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==i.length||e.packedInputs){if(i.length>2&&!e.packedInputs){const e=$w(i);h=`${e[0]===r[1]}_${e[e.length-1]===r[1]}`}}else c=`${i[0]>1}_${i[1]>1}`;const d=t.shape.length,p=2===i.length&&cw(t.shape,r),f=1===uw(t.shape),m=KE(t.shape,n.shape),g=!e.packedInputs&&d===n.shape.length&&cw(r,n.texData.texShape),x=e.packedInputs||i.length>2?"":`${r[0]>1}_${r[1]>1}`;s+=`${d}_${g}_${o?l:""}_${i.length}_${f}_${m}_${p}_${u}_${c}_${h}_${x}_${a}`}else{const e=t.isUniform?"uniform":t.texData.texShape;s+=`${t.shape}_${e}_${a}`}}));const a=e.userCode;let r=e.constructor.name;return r+="_"+s+"_"+a+`${zw().getNumber("WEBGL_VERSION")}`,r}(e,u,c),d=this.getAndSaveBinary(h,(()=>oJ(this.gpgpu,e,u,c))),p=null!=this.activeTimers;let f;p&&(f=this.startTimer()),zw().get("ENGINE_COMPILE_ONLY")||function(e,t,n,s,a){t.program.enableShapeUniforms||(lJ(t.inShapeInfos,n),lJ([t.outShapeInfo],[s]));const r=s.texData.texture,o=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(r.texture,o[0],o[1]):e.setOutputMatrixTexture(r.texture,o[0],o[1]),e.setProgram(t.webGLProgram),e.bindVertexArray(t.webGLProgram.vao),1===zw().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN);for(let s=0;s<n.length;++s){const a=n[s],{uniform:r,offset:o,shape:i,texShape:l}=t.variablesLocations[s];if(i){const{uniformShape:n}=sJ(t.program.packedInputs,a.shape,a.texData.texShape);switch(n.length){case 1:e.gl.uniform1iv(i,new Int32Array(n));break;case 2:e.gl.uniform2iv(i,new Int32Array(n));break;case 3:e.gl.uniform3iv(i,new Int32Array(n));break;case 4:e.gl.uniform4iv(i,new Int32Array(n))}}if(l&&e.gl.uniform2i(l,a.texData.texShape[0],a.texData.texShape[1]),null!=r)if(a.isUniform)if(uw(a.shape)<2)e.gl.uniform1f(r,a.uniformValues[0]);else{let t=a.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(r,t)}else null!=a.texData.slice&&null!=o&&e.gl.uniform1i(o,a.texData.slice.flatOffset),e.setInputMatrixTexture(a.texData.texture.texture,r,s)}const i=t.outShapeLocation;if(i)switch(s.shape.length){case 1:e.gl.uniform1iv(i,new Int32Array(s.shape));break;case 2:e.gl.uniform2iv(i,new Int32Array(s.shape));break;case 3:e.gl.uniform3iv(i,new Int32Array(s.shape));break;case 4:e.gl.uniform4iv(i,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const n=$w(s.shape);switch(s.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}if(t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&a)for(let n=0;n<t.program.customUniforms.length;++n){const s=t.program.customUniforms[n],r=t.customUniformLocations[n],o=a[n];if("float"===s.type)e.gl.uniform1fv(r,o);else if("vec2"===s.type)e.gl.uniform2fv(r,o);else if("vec3"===s.type)e.gl.uniform3fv(r,o);else if("vec4"===s.type)e.gl.uniform4fv(r,o);else if("int"===s.type)e.gl.uniform1iv(r,o);else if("ivec2"===s.type)e.gl.uniform2iv(r,o);else if("ivec3"===s.type)e.gl.uniform3iv(r,o);else{if("ivec4"!==s.type)throw Error(`uniform type ${s.type} is not supported yet.`);e.gl.uniform4iv(r,o)}}e.executeProgram()}(this.gpgpu,d,u,c,s),l.forEach((e=>this.disposeIntermediateTensorInfo(e))),p&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=zw().getNumber("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=CC();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!zw().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===a){const e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,n,s,a=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,s,a)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!zw().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=ST((()=>{if(!zw().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=zw().getBool("DEBUG");zw().set("DEBUG",!1);const t=this.abs(xR(1e-8)).dataSync()[0];if(zw().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:a,texture:r,usage:o,isPacked:i}=t;if(null!=r)return;const l=null!=this.activeTimers;let u;l&&(u=CC());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=zw().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=zw().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(s===1/0&&zw().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=n/2),t&&(n*=2,s*=2,1===(e=e.map(((t,n)=>n>=e.length-2?aw(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=xw(e);e=t.newShape}let a=uw(e),r=null;e.length<=1&&a<=n?r=[1,a]:2===e.length&&e[0]<=n&&e[1]<=n?r=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?r=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?r=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?r=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(r=[e[0],e[1]*e[2]*e[3]]);const o=null!=r&&Math.max(...r)>s&&Math.min(...r)<=(t?2:1)&&Math.min(...r)>0;if(null==r||o)if(t){const t=CZ(e);let n=2,s=2;e.length&&([n,s]=$Z(e)),a=t*(n/2)*(s/2),r=dw(a).map((e=>2*e))}else r=dw(a);return r}(n,i),t.texShape=c),null!=a){const e=TZ(n);let r,o=c[1],h=c[0];const d=a instanceof Uint8Array||a instanceof Uint8ClampedArray;!i&&d||([o,h]=dZ(c[0],c[1])),r=i?new gJ(e,d):new mJ(e,d);const p=d?[h,o]:c,f=this.makeTensorInfo(p,s),m=this.texData.get(f.dataId);m.usage=d?lZ.PIXELS:lZ.UPLOAD,m.texShape=p,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,h,a);const g=[[h,o]],x=!0,b=this.runWebGLProgram(r,[f],s,g,x),y=this.texData.get(b.dataId);t.texShape=y.texShape,t.isPacked=y.isPacked,t.usage=y.usage,zw().get("ENGINE_COMPILE_ONLY")?this.disposeData(b.dataId):(t.texture=y.texture,t.values=null,this.texData.delete(b.dataId)),this.disposeIntermediateTensorInfo(f),l&&(this.uploadWaitMs+=CC()-u)}else{const e=this.acquireTexture(c,o,s,i);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*kw(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await tD(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw bZ(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);const{variablesLocations:t,customUniformLocations:n,infLoc:s,nanLoc:a,outShapeLocation:r,outShapeStridesLocation:o,outTexShapeLocation:i}=iJ(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=t,e.customUniformLocations=n,e.infLoc=s,e.nanLoc=a,e.outShapeLocation=r,e.outShapeStridesLocation=o,e.outTexShapeLocation=i}}createTensorFromGPUData(e,t,n){e.channels=e.channels||"RGBA";const{texture:s,height:a,width:r,channels:o}=e,i=IT().backend;if(!i.gpgpu.gl.isTexture(s))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const l=i.writeTexture(s,t,n,a,r,o);return IT().makeTensorFromDataId(l,t,n,i)}}YQ.nextDataId=0;f$()&&TT("webgl",(()=>new YQ),2);const ZQ="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class JQ{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=YE(t,n),this.enableShapeUniforms=uJ(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const QQ="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class e0{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=YE(t,n);const a=this.outputShape.length;this.enableShapeUniforms=uJ(a);let r="";if(s)if(0===a||1===uw(this.outputShape))r="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(r=`\n          ${nJ(a)} coords = getOutputCoords();\n        `,1===a)this.enableShapeUniforms?r+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":r+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=NQ("coords",a);this.enableShapeUniforms?r+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= outShape[${a} - 2];\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= outShape[${a} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:r+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${r}\n\n        setOutput(result);\n      }\n    `}}function t0(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const n0={kernelName:rN,backendName:"webgl",kernelFunc:t0};function s0(e){const{inputs:t,backend:n}=e,{real:s,imag:a}=t,r=n.makeTensorInfo(s.shape,"complex64"),o=n.texData.get(r.dataId),i=t0({inputs:{x:s},backend:n}),l=t0({inputs:{x:a},backend:n});return o.complexTensorInfos={real:i,imag:l},r}const a0={kernelName:xI,backendName:"webgl",kernelFunc:s0},r0="return (a < 0.) ? b * a : a;",o0="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const i0={kernelName:hN,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{alpha:r}=s,o=n.makeTensorInfo([],"float32",NC(r,"float32")),i=zw().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new e0(o0,a.shape,o.shape):new JQ(r0,a.shape,o.shape),l=n.runWebGLProgram(i,[a,o],"float32");return n.disposeIntermediateTensorInfo(o),l}},l0="return (a < 0.) ? b * a : a;",u0="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const c0={kernelName:jN,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:a}=t,r=zw().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new e0(u0,s.shape,a.shape):new JQ(l0,s.shape,a.shape);return n.runWebGLProgram(r,[s,a],"float32")}},h0="if (isnan(x)) return x;";function d0({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:a,backend:r})=>{const{x:o}=a,i=r,l=s||o.dtype;if(i.shouldExecuteOnCPU([o])&&null!=n){const e=i.texData.get(o.dataId),t=n(e.values,l);return i.makeTensorInfo(o.shape,l,t)}let u;return u=zw().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new HQ(o.shape,t):new AQ(o.shape,e),i.runWebGLProgram(u,[o],l)}}function p0({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:a,dtype:r}){return({inputs:o,backend:i})=>{const{a:l,b:u}=o,c=i;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,a]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,s]=t,a={dataId:n.dataId,dtype:n.dtype,shape:l.shape},r={dataId:s.dataId,dtype:s.dtype,shape:u.shape},o=new JQ(e,l.shape,u.shape);return c.runWebGLProgram(o,[a,r],e$(n.dtype,s.dtype))})),r=s0({inputs:{real:s,imag:a},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(a),r}const h=r||e$(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=a){const e=c.texData.get(l.dataId).values,t=c.texData.get(u.dataId).values,n="string"===l.dtype?oM(e):e,s="string"===l.dtype?oM(t):t,[r,o]=a(l.shape,u.shape,n,s,h),i=c.makeTensorInfo(o,h);return c.texData.get(i.dataId).values=r,i}let d;return d=zw().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new e0(t,l.shape,u.shape,n):new JQ(e,l.shape,u.shape),c.runWebGLProgram(d,[l,u],h)}}function f0(e,t=!1){if("linear"===e)return t?zQ:FQ;if("relu"===e)return t?VQ:MQ;if("elu"===e)return t?WQ:DQ;if("relu6"===e)return t?UQ:LQ;if("prelu"===e)return t?u0:l0;if("leakyrelu"===e)return t?o0:r0;if("sigmoid"===e)return t?GQ:PQ;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class m0{constructor(e,t,n,s=!1,a=!1,r=!1,o=null,i=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=uJ(this.outputShape.length);const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",d=a?"rc.z, i * 2":"i * 2, rc.z",p=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";o&&(m=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${o}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${o}\n        }`:`vec4 activation(vec4 x) {\n          ${o}\n        }`,g="result = activation(result);");const x=r?"result += getBiasAtOutCoords();":"";r&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",y="rc.x";e[0]<t[0]?b=`imod(rc.x, ${e[0]})`:t[0]<e[0]&&(y=`imod(rc.x, ${t[0]})`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${b};\n        int batchB = ${y};\n        for (int i = 0; i < ${c}; i++) {\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${d});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${p[0]} * ${f[0]});\n          result += (${p[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${x}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const g0={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class x0{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=YE(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const b0="return a * b;";function y0(e){const{inputs:t,backend:n}=e,{a:s,b:a}=t,r=e$(s.dtype,a.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(a.dataId),r=new x0(g0.REAL,s.shape,a.shape),o=new x0(g0.IMAG,s.shape,a.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:a.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:a.shape}],l=n.runWebGLProgram(r,i,"float32"),u=n.runWebGLProgram(o,i,"float32"),c=s0({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,a])){const e=n.texData.get(s.dataId),t=n.texData.get(a.dataId),[o,i]=YJ(s.shape,a.shape,e.values,t.values,r),l=n.makeTensorInfo(i,r);return n.texData.get(l.dataId).values=o,l}let o;return o=zw().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new e0(b0,s.shape,a.shape):new JQ(b0,s.shape,a.shape),n.runWebGLProgram(o,[s,a],r)}const v0={kernelName:DN,backendName:"webgl",kernelFunc:y0};function k0(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{shape:r}=s,o=n,i=uw(a.shape),l=mw(r,i),u=uw(l);ow(i===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${a.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`));const c=o.texData.get(a.dataId);return!c.isPacked||RZ(a.shape,l)||null!==c.texture&&RZ(c.shape,l)?(o.incRef(a.dataId),{dataId:a.dataId,shape:l,dtype:a.dtype}):function(e,t,n){const s=[CZ(e.shape),...$Z(e.shape)],a={dtype:e.dtype,shape:s,dataId:e.dataId},r=[CZ(t),...$Z(t)],o=new CQ(r,s),i=[s],l=n.runWebGLProgram(o,[a],e.dtype,i,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(a,l,o)}const w0={kernelName:tS,backendName:"webgl",kernelFunc:k0};class I0{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:a,outSize:r}=e;this.outputShape=[s,r];const o=4*Math.floor(n/4),i=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${hw(e)?e.toPrecision(2):e}, ones);`}let u="";a%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===i}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class N0{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:a,outSize:r}=e;this.outputShape=[s,r];let o="0.0",i="";"prod"===t?o="1.0":"min"===t?(o="1.0 / 1e-20",i="min"):"max"===t&&(o="-1.0 / 1e-20",i="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${i}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,d="vec4";"all"===t?(o="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===t&&(o="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let p="";a%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${o};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${o});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function S0(e,t,n,s){const a=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=cD(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let r=e;for(let o=0;o<a.length;o++){const{inSize:i,windowSize:l,outSize:u}=a[o];let c,h;c="mean"===n?0===o?new I0({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u},i):new I0({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u}):new N0({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u},n),h=r,r=s.runWebGLProgram(c,[r],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return r}class C0{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=nJ(this.rank),a=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${a}));\n    }\n    `}}class $0{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=nJ(this.rank),a=IQ("rc",this.rank),r=new Array(this.rank);for(let e=0;e<t.length;e++)r[t[e]]=a[e];const o=`vec2(${r.slice(-2).join()})`,i=`++${a[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${r.join()}), ${o})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${i}) {\n        result[1] = ${l};\n      }\n      --${a[this.rank-1]};\n      if(++${a[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${i}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function T0(e,t,n){const s=zw().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new $0(e.shape,t):new C0(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function E0(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s;return function(e,t,n,s){const a=t,r=e.shape.length,o=gw(a,e.shape);let i=o;const l=hR(i,r),u=null!=l;let c=e;u&&(c=T0(e,l,s),i=pR(i.length,r)),cR("sum",i,r);const[h,d]=lR(c.shape,i);let p=h;n&&(p=uR(h,o));const f=uw(d),m=k0({inputs:{x:c},attrs:{shape:[uw(e.shape)/f,f]},backend:s}),g=S0(m,t$(e.dtype),"sum",s),x=k0({inputs:{x:g},attrs:{shape:p},backend:s});return s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(g),u&&s.disposeIntermediateTensorInfo(c),x}(a,r,o,n)}const R0={kernelName:wS,backendName:"webgl",kernelFunc:E0};function A0(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{perm:r}=s,o=n,i=a.shape.length,l=new Array(i);for(let e=0;e<l.length;e++)l[e]=a.shape[r[e]];let u;if(o.shouldExecuteOnCPU([a])){const e=o.texData.get(a.dataId).values,t=kQ(e,a.shape,a.dtype,r,l);u=o.makeTensorInfo(l,a.dtype);o.texData.get(u.dataId).values=t}else u=T0(a,r,o);return u}const _0={kernelName:GS,backendName:"webgl",kernelFunc:A0},F0=1e3;function O0({a:e,b:t,transposeA:n,transposeB:s,backend:a,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:l=null}){const u=e.shape.length,c=t.shape.length,h=n?e.shape[u-2]:e.shape[u-1],d=s?t.shape[c-1]:t.shape[c-2],p=n?e.shape[u-1]:e.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),x=uw(m),b=uw(g),y=YE(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([p,f]);ow(h===d,(()=>`Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`));const v=n?[x,h,p]:[x,p,h],k=s?[b,f,d]:[b,d,f],w=k0({inputs:{x:e},backend:a,attrs:{shape:v}}),I=k0({inputs:{x:t},backend:a,attrs:{shape:k}}),N=[w,I],S=Math.max(x,b),C=n?w.shape[1]:w.shape[2],$=null!=r,T=null!=o,E="leakyrelu"===l,R=null!=l?f0(l,!0):null;let A;if((1===p||1===f)&&C>F0&&!1===($||T||E||null!=R)){let e=w,t=I;n&&(e=A0({inputs:{x:w},backend:a,attrs:{perm:[0,2,1]}}),N.push(e)),s&&(t=A0({inputs:{x:I},backend:a,attrs:{perm:[0,2,1]}}),N.push(t));const r=1===f;let o=e;1!==f&&(o=k0({inputs:{x:e},backend:a,attrs:{shape:[S,C,1]}}),N.push(o));const i=1===f?2:1;let l=t;r&&(l=k0({inputs:{x:t},backend:a,attrs:{shape:[S,1,C]}}),N.push(l));const u=y0({inputs:{a:o,b:l},backend:a});A=E0({inputs:{x:u},backend:a,attrs:{axis:i,keepDims:!0}}),N.push(u)}else{const l=e$(e.dtype,t.dtype),u=new m0(v,k,[S,p,f],n,s,$,R,T,E),c=[w,I];if(null!=r&&c.push(r),T&&c.push(o),E){const e=a.makeTensorInfo([],"float32",NC(i,"float32"));c.push(e),N.push(e)}A=a.runWebGLProgram(u,c,l)}const _=k0({inputs:{x:A},backend:a,attrs:{shape:y}});N.push(A);for(const e of N)a.disposeIntermediateTensorInfo(e);return _}const D0={kernelName:JS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:a,b:r,bias:o,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return O0({a:a,b:r,transposeA:l,transposeB:u,backend:n,bias:o,preluActivationWeights:i,leakyreluAlpha:h,activation:c})}},M0="return abs(x);";const L0={kernelName:Hw,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=iQ(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let a;return a=zw().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new HQ(s.shape,M0):new AQ(s.shape,M0),n.runWebGLProgram(a,[s],s.dtype)}},B0=d0({opSnippet:_Q+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),P0={kernelName:jw,backendName:"webgl",kernelFunc:B0},z0=d0({opSnippet:_Q+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),W0={kernelName:Xw,backendName:"webgl",kernelFunc:z0},V0="return a + b;",U0=p0({opSnippet:V0,packedOpSnippet:V0,supportsComplex:!0,cpuKernelImpl:TJ}),G0={kernelName:Kw,backendName:"webgl",kernelFunc:U0};class H0{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class j0{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const X0={kernelName:qw,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,a=n;if(1===a.length)return t0({inputs:{x:a[0]},backend:s});if(a.length>zw().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(a.length/2),n=e({inputs:a.slice(0,t),backend:s}),r=e({inputs:a.slice(t),backend:s});return e({inputs:[n,r],backend:s})}const r=a.map((e=>e.dtype)).reduce(((e,t)=>e$(e,t))),o=a.map((e=>e.shape)),i=zw().getBool("WEBGL_PACK")?new j0(a[0].shape,o):new H0(a[0].shape,o);return s.runWebGLProgram(i,a,r)}};const K0={kernelName:Yw,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s,i=a.shape.length,l=gw(r,a.shape);let u=l;const c=hR(u,i);let h=a;null!=c&&(h=A0({inputs:{x:a},backend:n,attrs:{perm:c}}),u=pR(u.length,i)),cR("all",u,i);const[d,p]=lR(h.shape,u),f=k0({inputs:{x:h},backend:n,attrs:{shape:[-1,uw(p)]}}),m=S0(f,f.dtype,"all",n);let g;if(o){g=k0({inputs:{x:m},backend:n,attrs:{shape:uR(d,l)}})}else g=k0({inputs:{x:m},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};const q0={kernelName:Zw,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s,i=a.shape.length,l=gw(r,a.shape);let u=l;const c=hR(u,i);let h=a;null!=c&&(h=A0({inputs:{x:a},backend:n,attrs:{perm:c}}),u=pR(u.length,i)),cR("any",u,i);const[d,p]=lR(h.shape,u),f=k0({inputs:{x:h},backend:n,attrs:{shape:[-1,uw(p)]}}),m=S0(f,f.dtype,"any",n);let g;if(o){g=k0({inputs:{x:m},backend:n,attrs:{shape:uR(d,l)}})}else g=k0({inputs:{x:m},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};class Y0{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:a,outSize:r}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[a,r];const o="max"===t?">":"<",i=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${i};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class Z0{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,ow(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const a=e[e.length-1],r=Math.ceil(a/t);this.outputShape=e.slice(0,-1),r>1&&this.outputShape.push(r),s||this.variableNames.push("bestIndicesA");const o=this.outputShape,i=o.length,l=nJ(i),u=NQ("coords",i);let c,h;if(1===r){h=i+1;const e=nJ(h);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[i-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[i-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[i-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[i-2]};`}else h=i,c=`\n        ${l} sourceLocR = coords;\n        ++${u[i-1]};\n        ${l} sourceLocG = coords;\n        ++${u[i-2]};\n        ${l} sourceLocA = coords;\n        --${u[i-1]};\n        ${l} sourceLocB = coords;\n        --${u[i-2]};`;const d=["x","y","z","w","u","v"].slice(0,h),p="."+d[h-1],f=d.map((e=>"int "+e)),m=NQ("sourceLocR",h-1).concat("inIdx.r"),g=NQ("sourceLocG",h-1).concat("inIdx.g"),x=NQ("sourceLocB",h-1).concat("inIdx.b"),b=NQ("sourceLocA",h-1).concat("inIdx.a"),y="max"===n?"greaterThan":"lessThan",v=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${x.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,w=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${w}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[i-1]} < ${o[i-1]-1};\n        bool hasNextRow = ${u[i-2]} < ${o[i-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${p}, sourceLocG${p},\n          sourceLocB${p}, sourceLocA${p}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${v}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${y}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function J0(e,t,n,s=null){let a=t.shape[0],r=t.shape[1];null!=s&&(a=s.shape[0],r=s.shape[1]);const o=cD(r),i={windowSize:o,inSize:r,batchSize:a,outSize:Math.ceil(r/o)},l=new Y0(i,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=J0(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function Q0(e,t,n,s=null){const a=null!=s?s.shape:t.shape,r=cD(a[a.length-1]),o=new Z0(a,r,n,null==s),i=null==s?[t]:[t,s],l=e.runWebGLProgram(o,i,"int32");if(l.shape.length===t.shape.length){const s=Q0(e,t,n,l);return e.disposeIntermediateTensorInfo(l),s}return l}function e1(e,t,n,s){const a=[n];if(cR("arg"+s.charAt(0).toUpperCase()+s.slice(1),a,t.shape.length),!zw().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],r=e.texData.get(t.dataId);let o=t;null!==r&&r.isPacked&&(o=e.unpackTensor(t),n.push(o));const[i,l]=lR(o.shape,a),u=uw(l),c=k0({inputs:{x:o},backend:e,attrs:{shape:[-1,u]}});n.push(c);const h=J0(e,c,s);n.push(h);const d=k0({inputs:{x:h},backend:e,attrs:{shape:i}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),d}return Q0(e,t,s)}const t1={kernelName:Jw,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r}=s;let o=gw(r,a.shape);const i=hR(o,a.shape.length);let l=a;const u=[];null!=i&&(l=A0({inputs:{x:a},backend:n,attrs:{perm:i}}),u.push(l),o=pR(o.length,l.shape.length)),cR("argMax",[o[0]],l.shape.length);const c=e1(n,l,o[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};const n1={kernelName:Qw,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r}=s;let o=gw(r,a.shape);const i=hR(o,a.shape.length);let l=a;const u=[];null!=i&&(l=A0({inputs:{x:a},backend:n,attrs:{perm:i}}),u.push(l),o=pR(o.length,l.shape.length)),cR("argMin",[o[0]],l.shape.length);const c=e1(n,l,o[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},s1=d0({opSnippet:_Q+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),a1={kernelName:eI,backendName:"webgl",kernelFunc:s1},r1=d0({opSnippet:_Q+"return log(x + sqrt(x * x + 1.0));"}),o1={kernelName:tI,backendName:"webgl",kernelFunc:r1},i1=d0({opSnippet:_Q+"\n  return atan(x);\n"}),l1={kernelName:nI,backendName:"webgl",kernelFunc:i1},u1=p0({opSnippet:ZQ+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+QQ+"\n  return result;\n"}),c1={kernelName:aI,backendName:"webgl",kernelFunc:u1},h1=d0({opSnippet:_Q+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),d1={kernelName:sI,backendName:"webgl",kernelFunc:h1};class p1{constructor(e,t,n,s=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const r=e.filterWidth,o=e.strideHeight,i=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.top,p=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let x="0.0";if(f||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${o}, ${i});\n        const ivec2 pads = ivec2(${d}, ${p});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?a?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / max(count, 1.0)");const y=4*Math.floor(r/4),v=r%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${d}, ${p});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${y}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${y};\n          if (${1===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class f1{constructor(e,t,n,s=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const r=e.filterWidth,o=e.strideDepth,i=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,d=e.effectiveFilterDepth,p=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,x=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let y="0.0";if(b||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${o}, ${i}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${x});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${p};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?a?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${p} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let v=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(v="avgValue / max(count, 1.0)");const k=4*Math.floor(r/4),w=r%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${o}, ${i}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${x});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n        }\n        setOutput(${v});\n      }\n    `}}const m1={kernelName:rI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;LZ(a,"avgPool");const{filterSize:r,strides:o,pad:i,dimRoundingMode:l}=s;ow(sE(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=XT(a.shape,r,o,1,i,l);if(1===u.filterWidth&&1===u.filterHeight&&cw(u.inShape,u.outShape))return t0({inputs:{x:a},backend:n});const c=new p1(u,"avg",!1);return n.runWebGLProgram(c,[a],"float32")}};const g1={kernelName:iI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:r,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=s,c=KT(a.shape,r,o,[1,1,1],i,l,u),h=new f1(c,"avg",!1);return n.runWebGLProgram(h,[a],"float32")}};class x1{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=i-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${i};\n            wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${o}) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class b1{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,a=e.strideDepth,r=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,d=e.effectiveFilterWidth,p=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=d-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${p}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${i}) {\n          float dyD = float(dyDCorner + wD) / ${a}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${r}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${d};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const y1={kernelName:lI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,o=r,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,h=KT(o.shape,i,l,[1,1,1],u,c),d=new b1(h);return n.runWebGLProgram(d,[a],o.dtype)}};const v1={kernelName:oI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,o=r;LZ([a,r],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=XT(o.shape,i,l,1,u),h=new x1(c);return n.runWebGLProgram(h,[a],o.dtype)}};const k1={kernelName:uI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:a,b:r}=t,{transposeA:o,transposeB:i}=s;return O0({a:a,b:r,transposeA:o,transposeB:i,backend:n})}};class w1{constructor(e,t,n,s,a,r){this.outputShape=[],this.variableNames=["x","mean","variance"],YE(e,t),YE(e,n);let o="0.0";null!=s&&(YE(e,s),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="1.0";null!=a&&(YE(e,a),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${o};\n        float scale = ${i};\n        float inv = scale * inversesqrt(variance + float(${r}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class I1{constructor(e,t,n,s,a,r){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],YE(e,t),YE(e,n);let o="vec4(0.0)";null!=s&&(YE(e,s),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="vec4(1.0)";null!=a&&(YE(e,a),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${o};\n        vec4 scale = ${i};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${r}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const N1={kernelName:eN,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:a,variance:r,offset:o,scale:i}=e;ow(a.shape.length===r.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),ow(null==o||a.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),ow(null==i||a.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[s,a,r];let c=null;null!=o&&(c=o.shape,u.push(o));let h=null;null!=i&&(h=i.shape,u.push(i));const d=zw().getBool("WEBGL_PACK_NORMALIZATION")?new I1(s.shape,a.shape,r.shape,c,h,l):new w1(s.shape,a.shape,r.shape,c,h,l);return t.runWebGLProgram(d,u,u[0].dtype)}};class S1{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=nJ(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return C1.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${C1[t]} = start[${t}] + coords.${C1[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${s}\n        setOutput(getSource(${n}));\n      }\n    `}}const C1=["x","y","z","w","u","v"];class $1{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=nJ(this.rank),n=NQ("coords",this.rank),s=NQ("sourceLoc",this.rank),a=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,r=`getChannel(getSource(${s.join()}), ${a})`,o=`\n      result.x = ${r};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${r};\n        --${s[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${r};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${r};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${o}\n        ${i}\n        setOutput(result);\n      }\n    `}}function T1(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:r,size:o}=s,[i,l]=qO(a,r,o);if(LO(a,i,l),0===uw(l))return n.makeTensorInfo(l,a.dtype,[]);if(n.shouldExecuteOnCPU([a])||"string"===a.dtype){const e=n.texData.get(a.dataId),t=lQ(e.values,i,l,a.shape,a.dtype);return n.makeTensorInfo(l,a.dtype,t)}const{isPacked:u}=n.texData.get(a.dataId),c=XO(a.shape,i,l);if(u||!c){const e=zw().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new $1(l):new S1(l),t=[i];return n.runWebGLProgram(e,[a],a.dtype,t)}return n.uploadToGPU(a.dataId),function(e,t,n,s){const a=s.texData.get(e.dataId),r=s.makeTensorInfo(n,e.dtype),o=s.texData.get(r.dataId);Object.assign(o,a),o.refCount=1,o.shape=n,o.dtype=e.dtype;let i=KO(t,$w(e.shape));a.slice&&(i+=a.slice.flatOffset),o.slice={flatOffset:i,origDataId:a.slice&&a.slice.origDataId||e.dataId};const l=s.dataRefCount.get(o.slice.origDataId)||1;return s.dataRefCount.set(o.slice.origDataId,l+1),r}(a,i,l,n)}const E1={kernelName:mS,backendName:"webgl",kernelFunc:T1},R1={kernelName:cI,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:r,crops:o}=s;ow(a.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const i=r.reduce(((e,t)=>e*t)),l=dD(a.shape,r,i),u=pD(l.length,r.length),c=fD(a.shape,r,i),h=mD(o,r.length),d=gD(c,o,r.length),p=[],f=k0({inputs:{x:a},backend:n,attrs:{shape:l}}),m=A0({inputs:{x:f},backend:n,attrs:{perm:u}}),g=k0({inputs:{x:m},backend:n,attrs:{shape:c}}),x=T1({inputs:{x:g},backend:n,attrs:{begin:h,size:d}});return p.push(f),p.push(m),p.push(g),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}};const A1={kernelName:hI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:o}=s,i=n.readSync(a.dataId),l=n.readSync(r.dataId),u=EJ(i,l,r.dtype,r.shape,o);return n.makeTensorInfo([o],r.dtype,u)}};const _1={kernelName:dI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{a:s,b:a}=t,r=zw().getBool("WEBGL_PACK_BINARY_OPERATIONS"),o=zw().getNumber("WEBGL_VERSION");if(n.shouldExecuteOnCPU([s,a])||1===o){const e=n.texData.get(s.dataId).values,t=n.texData.get(a.dataId).values,[r,o]=AJ(s.shape,a.shape,e,t,s.dtype),i=n.makeTensorInfo(o,s.dtype);return n.texData.get(i.dataId).values=r,i}let i;return i=r?new e0("\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n",s.shape,a.shape,!1):new JQ("\n  return float(int(a.r) & int(b.r));\n",s.shape,a.shape),n.runWebGLProgram(i,[s,a],s.dtype)}};const F1={kernelName:pI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:a}=t,r=n.readSync(s.dataId),o=n.readSync(a.dataId),i=YE(Array.from(r),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},O1=p0({opSnippet:"return float(a != b);",cpuKernelImpl:JJ,dtype:"bool"}),D1={kernelName:LN,backendName:"webgl",kernelFunc:O1};function M1(e){const{inputs:t,backend:n}=e,{input:s}=t;return t0({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const L1={kernelName:JN,backendName:"webgl",kernelFunc:M1},B1="return float(int(x));";const P1={kernelName:fI,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:a}=t,{x:r}=n,{dtype:o}=a;if("complex64"===o){if("complex64"===r.dtype)return t0({inputs:{x:r},backend:s});const t=iA(r.shape),n=e({inputs:{x:r},backend:s,attrs:{dtype:"float32"}}),a=s0({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),a}if("complex64"===r.dtype){const t=M1({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:o}});return s.disposeIntermediateTensorInfo(t),n}if(!vw(r.dtype,o)){const e=t0({inputs:{x:r},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:o}}if(s.shouldExecuteOnCPU([r])){const e=s.texData.get(r.dataId).values,[t,n,a]=_J(e,r.shape,r.dtype,o);return s.makeTensorInfo(t,n,a)}if("int32"===o)return function(e,t){const n=new AQ(e.shape,B1),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(r,s);if("bool"===o){const e=s.makeTensorInfo([],"bool",bw("bool",1)),t=O1({inputs:{a:r,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${o}`)}},z1="return ceil(x);",W1=d0({opSnippet:z1,packedOpSnippet:z1,cpuKernelImpl:FJ}),V1={kernelName:mI,backendName:"webgl",kernelFunc:W1};class U1{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class G1{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const H1={kernelName:gI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{clipValueMin:r,clipValueMax:o}=s;let i;i=zw().getBool("WEBGL_PACK_CLIP")?new G1(a.shape):new U1(a.shape);const l=[[r],[o]];return n.runWebGLProgram(i,[a],a.dtype,l)}};class j1{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function X1(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const K1={kernelName:bI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=n.texData.get(s.dataId),r=new j1(s.shape),o=[X1(s,a.complexTensorInfos.real),X1(s,a.complexTensorInfos.imag)];return n.runWebGLProgram(r,o,o[0].dtype)}};class q1{constructor(e){this.outputShape=[],this.outputShape=sD(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const s=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}const s=t.length,a=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${a}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class Y1{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=sD(e,t);const n=this.outputShape,s=n.length,a=nJ(s),r=NQ("coords",s),o=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map(((e,t)=>`T${t}`));const i=new Array(e.length-1);i[0]=e[0][t];for(let n=1;n<i.length;n++)i[n]=i[n-1]+e[n][t];const l=o[t],u=o.slice(-2),c=o.join();let h=`if (${l} < ${i[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<i.length;e++){const t=i[e-1];h+=`\n        if (${l} < ${i[e]}  && ${l} >= ${i[e-1]}) {\n          return getChannel(\n            getT${e}(${Z1(o,l,t)}),\n            vec2(${Z1(u,l,t)}));\n        }`}const d=i.length,p=i[i.length-1];h+=`\n        return getChannel(\n          getT${d}(${Z1(o,l,p)}),\n          vec2(${Z1(u,l,p)}));`,this.userCode=`\n      float getValue(${o.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${r}), 0., 0., 0.);\n\n        ${r[s-1]} = ${r[s-1]} + 1;\n        if (${r[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${r});\n        }\n\n        ${r[s-2]} = ${r[s-2]} + 1;\n        if (${r[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${r});\n        }\n\n        ${r[s-1]} = ${r[s-1]} - 1;\n        if (${r[s-2]} < ${n[s-2]} &&\n            ${r[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${r});\n        }\n        setOutput(result);\n      }\n    `}}function Z1(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function J1(e){const{inputs:t,backend:n}=e,{input:s}=t;return t0({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const Q1={kernelName:iN,backendName:"webgl",kernelFunc:J1};function e2(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map((e=>M1({inputs:{input:e},backend:n}))),a=e.map((e=>J1({inputs:{input:e},backend:n}))),r=e2(s,t,n),o=e2(a,t,n),i=s0({inputs:{real:r,imag:o},backend:n});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),a.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(o),i}let a=n.shouldExecuteOnCPU(e);if("string"===s&&(a=!0),a){const a=e.map((e=>{const s=uw(e.shape.slice(t));return k0({inputs:{x:e},backend:n,attrs:{shape:[-1,s]}})})),r=a.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=sD(a.map((e=>e.shape)),1),i=1===a[0].shape[0],l=OJ(r,o,s,i),u=sD(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,s,l);return a.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const r=e.filter((e=>uw(e.shape)>0)),o=zw().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&r[0].shape.length>1;if(1===r.length){const t=o?new AQ(e[0].shape,BQ):new HQ(e[0].shape,BQ);return n.runWebGLProgram(t,e,s)}const i=zw().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(r.length>i){const e=[];for(let s=0;s<r.length;s+=i){const a=r.slice(s,s+i);e.push(e2(a,t,n))}const s=e2(e,t,n);for(const t of e)n.disposeIntermediateTensorInfo(t);return s}if(o){const e=new Y1(r.map((e=>e.shape)),t);return n.runWebGLProgram(e,r,s)}const{tensors2D:l,outShape:u}=function(e,t,n){const s=sD(e.map((e=>e.shape)),t),a=e.map((e=>k0({inputs:{x:e},attrs:{shape:[-1,uw(e.shape.slice(t))]},backend:n})));return{tensors2D:a,outShape:s}}(r,t,n),c=new q1(l.map((e=>e.shape))),h=n.runWebGLProgram(c,l,s);l.forEach((e=>n.disposeIntermediateTensorInfo(e)));const d=k0({inputs:{x:h},attrs:{shape:u},backend:n});return n.disposeIntermediateTensorInfo(h),d}function t2(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s,r=gw(a,t[0].shape)[0];nD(t.map((e=>e.shape)),r);const o=sD(t.map((e=>e.shape)),r);if(0===uw(o))return n.makeTensorInfo(o,t[0].dtype,[]);const i=t.filter((e=>uw(e.shape)>0));return 1===i.length?t0({inputs:{x:i[0]},backend:n}):e2(i,r,n)}const n2={kernelName:yI,backendName:"webgl",kernelFunc:t2};class s2{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const r=e.padInfo.top,o=e.padInfo.left,i=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,x=m?2:3,b=m?3:1;let y="",v="";n&&(y=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,v="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${i}, ${l});\n      const ivec2 pads = ivec2(${r}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${x}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${p}) *\n                    getW(wR, wC, ${p}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${p}, xR, xC) *\n                    getW(wR, wC, ${p}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2),\n                getW(wR, wC, ${p} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1),\n                  getX(batch, xR, xC, ${p} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC),\n                  getX(batch, ${p} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${v}\n        setOutput(result);\n      }\n    `}}class a2{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,a=e.strideDepth,r=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${a}, ${r}, ${o});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${i};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${p}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${p}) *\n                  getW(wF, wR, wC, ${p}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1),\n                  getX(batch, xF, xR, xC, ${p} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2),\n                  getW(wF, wR, wC, ${p} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class r2{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=uJ(this.outputShape.length);const r=e.padInfo.left,o=e.strideWidth,i=e.dilationWidth,l=e.filterHeight,u=e.filterWidth,c=u;let h="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<u;e++)h+=`\n           vec4 xTexelC${2*e};\n           int xTexelC${2*e}Ready;\n           vec4 xTexelC${2*e+1};\n           int xTexelC${2*e+1}Ready;\n           vec4 xC${e};`;h+=`\n     for (int r = 0; r < ${l}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let e=0;e<u;e++)h+=`\n           xTexelC${2*e} = vec4(0.0);\n           xTexelC${2*e}Ready = 0;\n           xTexelC${2*e+1} = vec4(0.0);\n           xTexelC${2*e+1}Ready = 0;\n           xC${e} = vec4(0.0);`;h+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let t=0;t<(c+1)/2;t++){const n=2*t;if(h+=`\n           xC = xCCorner + ${n*i};\n           `,1===o){if(n<u&&(r%2==1?(h+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n               `,h+=1===i&&n>0?`\n                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                   } else {\n                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                   }\n                   `):h+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xC${n} = xTexelC${n};\n                 `,n+1<u)){const e=r%2==0?aw(i):i;i%2==0&&r%2==1||i%2!=0&&r%2!=1?(h+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${n+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${n+1}Ready = 1;\n                   }\n                   `,h+=i>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\n                     } else {\n                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\n                     }\n                     `:`\n                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                     `):h+=1===e?`\n                     xC${n+1} = xTexelC${n};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${n+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${n+1}Ready = 1;\n                     }\n\n                     xC${n+1} = xTexelC${n+1};\n                     `}}else n<u&&(r%2==1?(h+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n               `,n+1<u&&(h+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                 `)):(h+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(\n                   xTexelC${n}.xy, xTexelC${n+1}.xy);\n               `,n+1<u&&(h+=`\n                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                 `)));n<u&&(h+=`\n             wTexel = getW(r, ${n}, d1, d2);\n             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,n+1<u&&(h+=`\n               wTexel = getW(r, ${n+1}, d1, d2);\n               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}h+="\n     }\n   ",h+="\n     }\n   ",h+="\n     }\n   ";let d="",p="";n&&(d=s?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:a?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,p="result = activation(result);");const f=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${d}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${h}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${f}\n         ${p}\n         setOutput(result);\n       }\n     `}}class o2{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=uJ(this.outputShape.length);const{dataFormat:n}=t,s=PZ(),a="channelsLast"===n,r=a?1:2,o=a?2:3,i=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`\n          blockIndex = rc.z + ${t};\n          pos = rc.y + ${e};\n\n          ${i}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${r}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${o}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${a}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${s.output} = result;\n      }\n    `}}function i2(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function l2({x:e,filter:t,convInfo:n,backend:s,bias:a=null,preluActivationWeights:r=null,leakyreluAlpha:o=0,activation:i=null}){const l=e.shape,u=s.texData.get(e.dataId),c=n.inChannels,h=l[0]*l[1]*l[2],d=n.outChannels,p="channelsLast"===n.dataFormat;let f;const m=[];if(null!=r){const e=i2(r.shape,p);null!=e&&(r=k0({inputs:{x:r},backend:s,attrs:{shape:e}}),m.push(r))}if(null!=a){const e=i2(a.shape,p);null!=e&&(a=k0({inputs:{x:a},backend:s,attrs:{shape:e}}),m.push(a))}if(!((1===h||1===d)&&c>F0)&&u.isPacked&&p&&null!=u.texture&&l[2]%2!=0&&cw(u.shape.slice(-3),l.slice(-3))){const c=l[0]*l[1]*(l[2]+1),h={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},d=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,ow(RZ(u.shape,h.shape),(()=>`packed reshape ${u.shape} to ${h.shape} isn't free`));const p=k0({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(p);const g=O0({a:h,b:p,backend:s,transposeA:false,transposeB:false,bias:a,activation:i,preluActivationWeights:r,leakyreluAlpha:o}),x=s.texData.get(g.dataId);ow(x.isPacked,(()=>"batchMatMul result is expected to be packed")),u.shape=d,x.shape=n.outShape,f=t0({inputs:{x:g},backend:s}),f.shape=n.outShape,m.push(g)}else{const l=n.outHeight*n.outWidth,u=k0({inputs:{x:e},backend:s,attrs:{shape:p?[n.batchSize,l,n.inChannels]:[n.batchSize,n.inChannels,l]}}),c=k0({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=O0({a:p?u:c,b:p?c:u,transposeA:!p,transposeB:false,backend:s,bias:a,activation:i,preluActivationWeights:r,leakyreluAlpha:o});f=k0({inputs:{x:h},backend:s,attrs:{shape:n.outShape}}),m.push(u),m.push(c),m.push(h)}for(const e of m)s.disposeIntermediateTensorInfo(e);return f}function u2({x:e,filter:t,convInfo:n,backend:s,bias:a=null,preluActivationWeights:r=null,leakyreluAlpha:o=0,activation:i=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:d,dataFormat:p}=n,f="channelsLast"===p,m=l*u*c,g=d*h,x=[n.batchSize,m,g],b=[];if(null!=r){const e=i2(r.shape,f);null!=e&&(r=k0({inputs:{x:r},backend:s,attrs:{shape:e}}),b.push(r))}if(null!=a){const e=i2(a.shape,f);null!=e&&(a=k0({inputs:{x:a},backend:s,attrs:{shape:e}}),b.push(a))}const y=k0({inputs:{x:t},backend:s,attrs:{shape:[1,m,uw(t.shape)/m]}});b.push(y);const v=new o2(x,n),k=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],w=s.runWebGLProgram(v,[e],"float32",k),I=k0({inputs:{x:w},backend:s,attrs:{shape:x}});b.push(w),b.push(I);const N=null!=a,S=null!=r,C="leakyrelu"===i,$=i?f0(i,!0):null,T=new m0(f?I.shape:y.shape,f?y.shape:I.shape,f?[n.batchSize,g,n.outChannels]:[n.batchSize,n.outChannels,g],!0,!1,N,$,S,C),E=f?[I,y]:[y,I];if(a&&E.push(a),S&&E.push(r),C){const e=s.makeTensorInfo([],"float32",NC(o,"float32"));E.push(e),b.push(e)}const R=s.runWebGLProgram(T,E,"float32"),A=k0({inputs:{x:R},backend:s,attrs:{shape:n.outShape}});b.push(R);for(const e of b)s.disposeIntermediateTensorInfo(e);return A}const c2={kernelName:vI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:o,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=rE(l),d=qT(a.shape,r.shape,o,u,i,c,!1,h);let p;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(d.strideWidth<=2&&"channelsLast"===h&&zw().getBool("WEBGL_EXP_CONV")){const e=new r2(d),t=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]];p=n.runWebGLProgram(e,[a,r],"float32",t)}else if(zw().getBool("WEBGL_CONV_IM2COL"))p=u2({x:a,filter:r,convInfo:d,backend:n});else{const e=new s2(d);p=n.runWebGLProgram(e,[a,r],"float32")}else p=l2({x:a,filter:r,convInfo:d,backend:n});const f=k0({inputs:{x:p},backend:n,attrs:{shape:d.outShape}});return n.disposeIntermediateTensorInfo(p),f}};class h2{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,a=e.padInfo.left,r="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              ${r?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);"}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class d2{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r="channelsLast"===e.dataFormat,o=t-1-e.padInfo.top,i=n-1-e.padInfo.left,l=r?1:2,u=r?2:3,c=r?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${r}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class p2{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,a=e.padInfo.front,r=e.padInfo.top,o=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${a};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${r};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${o};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class f2{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,a=e.strideDepth,r=e.strideHeight,o=e.strideWidth,i=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${i}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${a}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${r}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const m2={kernelName:kI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=rE(l),d=qT(a.shape,c,o,1,i,u,!1,h),p=new h2(d);return n.runWebGLProgram(p,[a,r],"float32")}};class g2{constructor(e){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=e.inShape,this.enableShapeUniforms=uJ(this.outputShape.length);const t=e.filterHeight,n=e.filterWidth,s=t-1-e.padInfo.top,a=n-1-e.padInfo.left;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            int wCPerm = ${n} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${e.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `}}const x2={kernelName:wI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{inputShape:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=rE(u),d=qT(o,r.shape,i,1,l,c,!1,h);if(zw().getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&"channelsLast"===h){const e=[[d.strideHeight,d.strideWidth]],t=new g2(d);return n.runWebGLProgram(t,[a,r],"float32",e)}{const e=new d2(d);return n.runWebGLProgram(e,[a,r],"float32")}}};const b2={kernelName:II,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:o,pad:i,dilations:l}=s,u=YT(a.shape,r.shape,o,l,i),c=new a2(u);return n.runWebGLProgram(c,[a,r],"float32")}};const y2={kernelName:NI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:o,pad:i,filterShape:l}=s,u=YT(a.shape,l,o,1,i),c=new p2(u);return n.runWebGLProgram(c,[a,r],"float32")}};const v2={kernelName:SI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{pad:o,strides:i,inputShape:l}=s,u=YT(l,r.shape,i,1,o),c=new f2(u);return n.runWebGLProgram(c,[a,r],"float32")}},k2=d0({opSnippet:h0+"\n  return cos(x);\n",packedOpSnippet:`\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${QQ}\n  return result;\n`}),w2={kernelName:CI,backendName:"webgl",kernelFunc:k2},I2=d0({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),N2={kernelName:$I,backendName:"webgl",kernelFunc:I2};class S2{constructor(e,t,n,s,a){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[r,o,i,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const d="bilinear"===s?1:0,[p,f]=[o-1+".0",i-1+".0"],[m,g,x]=c>1?[""+(o-1)/(c-1),"(y2-y1) * height_ratio",`y1*${p} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${p}`],[b,y,v]=h>1?[""+(i-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${r}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${y};\n\n        float in_y = ${x};\n        if( in_y < 0.0 || in_y > ${p} ) {\n          setOutput(float(${a}));\n          return;\n        }\n        float in_x = ${v};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${a}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const C2={kernelName:RI,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:a,boxes:r,boxInd:o}=t,{cropSize:i,method:l,extrapolationValue:u}=s,c=new S2(a.shape,r.shape,i,l,u);return n.runWebGLProgram(c,[a,r,o],"float32")}};var $2;!function(e){e.Prod="*",e.Sum="+"}($2||($2={}));class T2{constructor(e,t,n,s){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const a=this.outputShape.length,r=this.op===$2.Prod?"1.0":"0.0",o=n?r:`getX(${E2(a,"coords",this.op)})`,i=this.outputShape[this.outputShape.length-1];let l="",u="";n?(l=s?"end != "+(i-1):"end != 0",u=s?"end + 1":"end - 1"):(l=s?`end + pow2 < ${i}`:"end >= pow2",u=s?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${nJ(a)} coords = getOutputCoords();\n        int end = ${R2(a,"coords",this.op)};\n        float val = ${o};\n        int pow2 = int(pow(2.0, index));\n        if (${l}) {\n          int idx = ${u};\n          ${R2(a,"coords",this.op)} = idx;\n          val ${this.op}= getX(${E2(a,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function E2(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function R2(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function A2(e,t,n,s,a,r){const o=t.shape.length,i=hR([s],o);let l=t;null!=i&&(l=A0({inputs:{x:t},backend:n,attrs:{perm:i}}));const u=pR(1,o)[0];if(u!==o-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${s}`);const c=l.shape[u];let h=t0({inputs:{x:l},backend:n});for(let t=0;t<=Math.ceil(Math.log2(c))-1;t++){const s=new T2(e,l.shape,!1,r),a=[[t]],o=h;h=n.runWebGLProgram(s,[h],h.dtype,a),n.disposeIntermediateTensorInfo(o)}if(a){const t=new T2(e,l.shape,a,r),s=h;h=n.runWebGLProgram(t,[h],h.dtype),n.disposeIntermediateTensorInfo(s)}if(null!=i){const e=A0({inputs:{x:h},backend:n,attrs:{perm:dR(i)}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(l),e}return h}const _2={kernelName:TI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,exclusive:o,reverse:i}=s;return A2($2.Prod,a,n,r,o,i)}};const F2={kernelName:EI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,exclusive:o,reverse:i}=s;return A2($2.Sum,a,n,r,o,i)}};const O2={kernelName:AI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:o,binaryOutput:i}=s;if(1===a.shape.length){const e=n.readSync(a.dataId),t=n.readSync(r.dataId),s=EJ(e,t,r.dtype,r.shape,o);return n.makeTensorInfo([o],r.dtype,s)}if(2===a.shape.length){const e=n.bufferSync(a),t=n.bufferSync(r),s=RJ(e,t,o,i);return n.makeTensorInfo(s.shape,r.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}};class D2{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const M2={kernelName:_I,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockSize:r,dataFormat:o}=s,i=a.shape[0],l=("NHWC"===o?a.shape[1]:a.shape[2])*r,u=("NHWC"===o?a.shape[2]:a.shape[3])*r,c=("NHWC"===o?a.shape[3]:a.shape[1])/(r*r),h=new D2("NHWC"===o?[i,l,u,c]:[i,c,l,u],r,o);return n.runWebGLProgram(h,[a],a.dtype)}};class L2{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=uJ(this.outputShape.length);const r=e.filterHeight,o=e.filterWidth,i=e.outChannels/e.inChannels;let l="",u="";n&&(l=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,u="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${r}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${o}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${u}\n        setOutput(result);\n      }\n    `}}class B2{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=uJ(this.outputShape.length);const r=e.outChannels/e.inChannels,o=e.padInfo.left,i=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,c=e.filterWidth,h=c;let d="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)d+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;d+=`\n    for (int r = 0; r < ${u}; r++) {\n      `;for(let e=0;e<c;e++)d+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;d+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(h+1)/2;e++){const t=2*e;if(d+=`\n          xC = xCCorner + ${t*l};\n          `,1===i){if(t<c&&(o%2==1?(d+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,d+=1===l&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):d+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<c)){const e=o%2==0?aw(l):l;l%2==0&&o%2==1||l%2!=0&&o%2!=1?(d+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,d+=l>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                    } else {\n                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                    }\n                    `:`\n                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                    `):d+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<c&&(o%2==1?(d+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<c&&(d+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(d+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<c&&(d+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<c&&(d+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<c&&(d+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}d+="\n    }\n  ",d+="\n      }\n    ";let p="",f="";n&&(p=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${p}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${r};\n        int q = d2 - d1 * ${r};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${d}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}}const P2={kernelName:FI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:o,pad:i,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),ow(sE(o,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`));const h=qT(a.shape,r.shape,o,c,i,u,!0);let d;d=zw().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new B2(h):new L2(h);const p=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];return n.runWebGLProgram(d,[a,r],"float32",p)}};class z2{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,a=e.padInfo.left,r=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${r} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class W2{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r=t-1-e.padInfo.top,o=n-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${r}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${i}; dm++) {\n              int d2 = d1 * ${i} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const V2={kernelName:OI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s,h=qT(a.shape,c,o,i,l,u,!0),d=new z2(h);return n.runWebGLProgram(d,[a,r],"float32")}};const U2={kernelName:DI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s,h=qT(c,r.shape,o,i,l,u,!0),d=new W2(h);return n.runWebGLProgram(d,[a,r],"float32")}};class G2{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const H2={kernelName:MI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=[...s.shape,...s.shape],r=uw(s.shape),o=k0({inputs:{x:s},backend:n,attrs:{shape:[r]}}),i=new G2(r),l=n.runWebGLProgram(i,[o],o.dtype),u=k0({inputs:{x:l},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),u}};class j2{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:a,strideWidth:r,filterHeight:o,filterWidth:i,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${a}, ${r});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${o}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${i}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const X2={kernelName:LI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:o,pad:i,dilations:l}=s,u=jT(a.shape,r.shape,o,i,"NHWC",l);let c;const h=new j2(u);c=n.runWebGLProgram(h,[a,r],"float32");const d=k0({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),d}};const K2={kernelName:WI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:a}=s,r=t,{allDims:o,summedDims:i,idDims:l}=LD(a,r.length);PD(o.length,l,r);const{path:u,steps:c}=zD(i,l),h=c.length;let d=null,p=o.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=BD(p,l[t]);let a;WD(e)?a=r[t]:(a=A0({inputs:{x:r[t]},backend:n,attrs:{perm:e}}),f.push(a));const o=a.shape.slice();for(let e=0;e<s.length;++e)o.splice(s[e],0,1);cw(a.shape,o)||(a=k0({inputs:{x:a},backend:n,attrs:{shape:o}}),f.push(a)),null===d?d=a:(d=y0({inputs:{a:a,b:d},backend:n}),f.push(d))}e<h-1&&(u[e]>=0&&(d=E0({inputs:{x:d},backend:n,attrs:{axis:u[e]-(o.length-p),keepDims:!1}}),f.push(d)),p--)}for(const e of f)e!==d&&n.disposeIntermediateTensorInfo(e);return d}},q2=d0({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),Y2={kernelName:VI,backendName:"webgl",kernelFunc:q2},Z2={kernelName:UI,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:a}=t,r=zw().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new e0("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,a.shape):new JQ("return (b >= 0.0) ? a : a * (b + 1.0);",s.shape,a.shape);return n.runWebGLProgram(r,[s,a],s.dtype)}},J2=p0({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:DJ}),Q2={kernelName:HI,backendName:"webgl",kernelFunc:J2},e3=d0({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${yD};\n  float a1 = ${vD};\n  float a2 = ${kD};\n  float a3 = ${wD};\n  float a4 = ${ID};\n  float a5 = ${ND};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),t3={kernelName:GI,backendName:"webgl",kernelFunc:e3},n3=d0({opSnippet:h0+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:MJ,dtype:"float32"}),s3={kernelName:jI,backendName:"webgl",kernelFunc:n3};function a3(e){const{inputs:t,attrs:n,backend:s}=e,{dim:a}=n,{input:r}=t,o=r.shape.length,i=r.shape.slice();let l=a;return a<0&&(ow(-(o+1)<=a,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+a+1),i.splice(l,0,1),k0({inputs:{x:r},backend:s,attrs:{shape:i}})}const r3={kernelName:XI,backendName:"webgl",kernelFunc:a3},o3="return exp(x) - 1.0;",i3=d0({opSnippet:o3,packedOpSnippet:o3,cpuKernelImpl:LJ}),l3={kernelName:KI,backendName:"webgl",kernelFunc:i3};class u3{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const a=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,r=n?`${s}.0`:"1.0";let o;if("real"===e)o="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);o="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${a};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${o}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${r};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function c3(e,t,n){const s=n.texData.get(e.dataId),a=uw(e.shape),r=e.shape[e.shape.length-1],o=k0({inputs:{x:e},backend:n,attrs:{shape:[a/r,r]}}),i=o.shape,l=new u3("real",i,t),u=new u3("imag",i,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:i},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:i}],h=n.runWebGLProgram(l,c,"float32"),d=n.runWebGLProgram(u,c,"float32"),p=s0({inputs:{real:h,imag:d},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d);const f=k0({inputs:{x:p},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(p),f}const h3={kernelName:qI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return c3(s,!1,n)}};class d3{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function p3(e){const{backend:t,attrs:n}=e,{shape:s,value:a}=n;let{dtype:r}=n;if(r=r||Nw(a),"string"===r){const e=yw(r,uw(s));return e.fill(a),t.makeTensorInfo(s,r,e)}{const e=new d3(s,a),n=[[a]];return t.runWebGLProgram(e,[],r,n)}}const f3={kernelName:YI,backendName:"webgl",kernelFunc:p3};class m3{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const g3={kernelName:ZI,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,a=new m3(n.shape);return s.runWebGLProgram(a,[n],n.dtype)}},x3="return floor(x);",b3=d0({opSnippet:x3,packedOpSnippet:x3,cpuKernelImpl:BJ}),y3={kernelName:JI,backendName:"webgl",kernelFunc:b3},v3=p0({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),k3={kernelName:QI,backendName:"webgl",kernelFunc:v3};class w3{constructor(e){this.variableNames=["A"];const t=PZ(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class I3{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=PZ(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const N3={kernelName:YS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:a}=t;const{numChannels:r}=s,o="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,i="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,[l,u]=o?[a.videoWidth,a.videoHeight]:[a.width,a.height],c=[u,l],h=[u,l,r];if(i||o){const e=zw().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=S3&&e===C3||(C3=e,S3=document.createElement("canvas").getContext("2d",{willReadFrequently:C3})),S3.canvas.width=l,S3.canvas.height=u,S3.drawImage(a,0,0,l,u),a=S3.canvas}const d=n.makeTensorInfo(c,"int32");n.texData.get(d.dataId).usage=lZ.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),a);const p=zw().getBool("WEBGL_PACK")?new I3(h):new w3(h),f=n.runWebGLProgram(p,[d],"int32");return n.disposeData(d.dataId),f}};let S3,C3=zw().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const $3={kernelName:QS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,m=rE(c),g=qT(a.shape,r.shape,l,h,u,d,!1,m);let x;const b=[],y=null!=o,v=null!=i,k="leakyrelu"===p,w=()=>{const e=[a,r],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=k0({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return b.push(t),t}return e};if(y&&e.push(t(o,c)),v&&e.push(t(i,c)),k){const t=n.makeTensorInfo([],"float32",NC(f,"float32"));e.push(t),b.push(t)}return e};if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(g.strideWidth<=2&&"channelsLast"===m&&zw().getBool("WEBGL_EXP_CONV")){const e=p?f0(p,!0):null,t=new r2(g,y,e,v,k),s=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],a=w();x=n.runWebGLProgram(t,a,"float32",s)}else if(zw().getBool("WEBGL_CONV_IM2COL"))x=u2({x:a,filter:r,convInfo:g,backend:n,bias:o,activation:p,preluActivationWeights:i,leakyreluAlpha:f});else{const e=p?f0(p,!1):null,t=new s2(g,y,e,v,k),s=w();x=n.runWebGLProgram(t,s,"float32")}else x=l2({x:a,filter:r,convInfo:g,backend:n,bias:o,activation:p,preluActivationWeights:i,leakyreluAlpha:f});const I=k0({inputs:{x:x},backend:n,attrs:{shape:g.outShape}});return b.push(x),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),I}};const T3={kernelName:eC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:d,leakyreluAlpha:p}=s,f=[];let m=c;null==m&&(m=[1,1]),ow(sE(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const g=qT(a.shape,r.shape,l,m,u,h,!0),x=zw().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=d?f0(d,x):null,y=[a,r],v=null!=o,k=null!=i,w="leakyrelu"===d;if(v&&y.push(o),k&&y.push(i),w){const e=n.makeTensorInfo([],"float32",NC(p,"float32"));y.push(e),f.push(e)}let I;I=x?new B2(g,v,b,k,w):new L2(g,v,b,k,w);const N=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],S=n.runWebGLProgram(I,y,"float32",N);return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),S}};class E3{constructor(e,t,n,s){this.sliceDim=e,this.strides=t,this.paramsShape=s,this.variableNames=["x","indices"],this.outputShape=n;const a=nJ(n.length);let r="\n    int index;";for(let e=0;e<this.sliceDim;e++)r+=`\n          index = round(getIndices(coords[0], ${e}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};\n          flattenIndex += index * ${this.strides[e]};`;this.userCode=`\n         void main() {\n          ${a} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${r}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const R3={kernelName:nN,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:a}=t,r=a.shape,o=r[r.length-1],i=uw(s.shape),[l,u,c,h]=OO(s,a),d=k0({inputs:{x:a},backend:n,attrs:{shape:[u,o]}}),p=k0({inputs:{x:s},backend:n,attrs:{shape:[uw(s.shape)/c,c]}});if(n.shouldExecuteOnCPU([s,a])||"string"===s.dtype){const e=n.readSync(a.dataId),t=n.bufferSync(s),r=PJ(e,t,s.dtype,u,o,c,h,s.shape,i);return n.makeTensorInfo(l,s.dtype,r.values)}const f=new E3(o,h,[u,c],s.shape),m=n.runWebGLProgram(f,[p,d],p.dtype),g=k0({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(m),g}};class A3{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=nJ(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)2===t?s.push("index"):s.push(`${n[t]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${s}));\n      }\n    `}}function _3(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,indices:r}=t,{axis:o,batchDims:i}=s,l=gw(o,a.shape)[0];if(zw().get("DEBUG")){const e=n.readSync(r.dataId),t=a.shape[l];for(let n=0;n<e.length;++n){const s=e[n];ow(s<=t-1&&s>=0,(()=>`GatherV2: the index value ${s} is not in [0, ${t-1}]`))}}const u=aM(a,r,l,i),c=uw(r.shape),h=[],d=k0({inputs:{x:a},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),p=k0({inputs:{x:r},backend:n,attrs:{shape:[u.batchSize,c/u.batchSize]}});h.push(d),h.push(p);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([a,r])||"string"===a.dtype){const e=n.bufferSync(p),t=n.bufferSync(d),s=zJ(t,e,f);return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(u.outputShape,s.dtype,s.values)}const m=new A3(d.shape,f),g=n.runWebGLProgram(m,[d,p],d.dtype);h.push(g);const x=k0({inputs:{x:g},backend:n,attrs:{shape:u.outputShape}});return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}const F3={kernelName:tN,backendName:"webgl",kernelFunc:_3},O3=p0({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:WJ,dtype:"bool"}),D3={kernelName:sN,backendName:"webgl",kernelFunc:O3},M3=p0({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:VJ}),L3={kernelName:aN,backendName:"webgl",kernelFunc:M3};const B3={kernelName:oN,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return c3(s,!0,n)}},P3=d0({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),z3={kernelName:lN,backendName:"webgl",kernelFunc:P3},W3=d0({opSnippet:"return float(isinf(x));",dtype:"bool"}),V3={kernelName:uN,backendName:"webgl",kernelFunc:W3},U3=d0({opSnippet:"return float(isnan(x));",dtype:"bool"}),G3={kernelName:cN,backendName:"webgl",kernelFunc:U3},H3=p0({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:UJ,dtype:"bool"}),j3={kernelName:dN,backendName:"webgl",kernelFunc:H3},X3=p0({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:GJ,dtype:"bool"}),K3={kernelName:pN,backendName:"webgl",kernelFunc:X3};const q3={kernelName:fN,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,num:r}=n,o=HJ(s,a,r);return t.makeTensorInfo([o.length],"float32",o)}},Y3=d0({opSnippet:h0+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:jJ}),Z3={kernelName:mN,backendName:"webgl",kernelFunc:Y3},J3=d0({opSnippet:h0+"\n  return log(1.0 + x);\n"}),Q3={kernelName:gN,backendName:"webgl",kernelFunc:J3},e4=p0({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),t4={kernelName:xN,backendName:"webgl",kernelFunc:e4},n4=d0({opSnippet:"return float(!(x >= 1.0));"}),s4={kernelName:bN,backendName:"webgl",kernelFunc:n4},a4=p0({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),r4={kernelName:yN,backendName:"webgl",kernelFunc:a4};class o4{constructor(e,t,n,s,a){this.variableNames=["x"],this.outputShape=[];const r=t,o=e[3]-1;let i;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;i=.5===a?`inversesqrt(${l})`:1===a?`1.0/(${l})`:`exp(log(${l}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${r}; j <= ${r}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${o}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${i};\n        setOutput(val);\n      }\n    `}}class i4{constructor(e,t,n,s,a){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const r=t,o=e[3]-1;let i;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;i=.5===a?`inversesqrt(${l})`:1===a?`1.0/(${l})`:`exp(log(${l}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${r};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${r}; j <= ${r}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${o}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${i};\n        setOutput(result);\n      }\n    `}}const l4={kernelName:vN,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{depthRadius:r,bias:o,alpha:i,beta:l}=s,u=zw().getBool("WEBGL_PACK_NORMALIZATION")?new i4(a.shape,r,o,i,l):new o4(a.shape,r,o,i,l);return n.runWebGLProgram(u,[a],a.dtype)}};class u4{constructor(e,t,n,s,a){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=a,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${a})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${a});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const c4={kernelName:kN,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a,y:r,dy:o}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s,h=new u4(a.shape,i,l,u,c);return n.runWebGLProgram(h,[a,r,o],a.dtype)}};function h4(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reductionIndices:r,keepDims:o}=s,i=a.shape.length,l=gw(r,a.shape);let u=l;const c=hR(u,i),h=null!=c,d=n.shouldExecuteOnCPU([a]);let p=a;if(h){if(d){const e=n.texData.get(p.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=a.shape[c[e]];const s=kQ(e,a.shape,a.dtype,c,t);p=n.makeTensorInfo(t,a.dtype);n.texData.get(p.dataId).values=s}else p=T0(a,c,n);u=pR(u.length,i)}cR("max",u,i);const[f,m]=lR(p.shape,u);let g,x=f;if(o&&(x=uR(f,l)),d){const e=n.texData.get(p.dataId).values,t=XJ(e,uw(m),x,a.dtype);g=n.makeTensorInfo(x,a.dtype);n.texData.get(g.dataId).values=t}else g=function(e,t,n,s){const a=uw(t),r=k0({inputs:{x:e},attrs:{shape:[uw(e.shape)/a,a]},backend:s}),o=S0(r,e.dtype,"max",s),i=k0({inputs:{x:o},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(o),i}(p,m,x,n);return h&&n.disposeIntermediateTensorInfo(p),g}const d4={kernelName:wN,backendName:"webgl",kernelFunc:h4},p4=p0({opSnippet:ZQ+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+QQ+"\n  return result;\n",cpuKernelImpl:KJ}),f4={kernelName:IN,backendName:"webgl",kernelFunc:p4};const m4={kernelName:NN,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;LZ(a,"maxPool");const{filterSize:r,strides:o,pad:i,dimRoundingMode:l}=s;ow(sE(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=XT(a.shape,r,o,1,i,l);if(1===u.filterWidth&&1===u.filterHeight&&cw(u.inShape,u.outShape))return t0({inputs:{x:a},backend:n});const c=new p1(u,"max",!1);return n.runWebGLProgram(c,[a],a.dtype)}};const g4={kernelName:CN,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:r,strides:o,pad:i,dataFormat:l,dimRoundingMode:u}=s,c=KT(a.shape,r,o,[1,1,1],i,u,l),h=new f1(c,"max",!1);return n.runWebGLProgram(h,[a],a.dtype)}};class x4{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,a=e.effectiveFilterHeight,r=e.effectiveFilterWidth,o=a-1-e.padInfo.top,i=r-1-e.padInfo.left,l=a*r-1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${a};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${r}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${r} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class b4{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,a=e.dilationDepth,r=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=i-1-e.padInfo.front,h=l-1-e.padInfo.top,d=u-1-e.padInfo.left,p=i*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${d});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${i};\n           wD += ${a}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${r}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${o}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${p} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const y4={kernelName:$N,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,o=r,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,h=KT(o.shape,i,l,[1,1,1],u,c),d=new f1(h,"max",!0),p=n.runWebGLProgram(d,[o],o.dtype),f=new b4(h),m=n.runWebGLProgram(f,[a,p],o.dtype);return n.disposeIntermediateTensorInfo(p),m}};const v4={kernelName:SN,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r,output:o}=t,i=r;LZ([r,o],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=XT(i.shape,l,u,1,c,h),p=new p1(d,"max",!0),f=n.runWebGLProgram(p,[i],i.dtype),m=new x4(d),g=n.runWebGLProgram(m,[a,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}};const k4={kernelName:TN,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:a,strides:r,pad:o,includeBatchInIndex:i}=t,l=n;ow(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const u=[1,1];ow(sE(r,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${r} and dilations '${u}'`));const c=XT(s.shape,a,r,u,o),[h,d]=function(e,t,n,s){let a=new p1(n,"max",!1);const r=s.runWebGLProgram(a,[e],"float32");return a=new p1(n,"max",!0,!0,t),[r,s.runWebGLProgram(a,[e],"float32")]}(s,i,c,l);return[h,d]}};const w4={kernelName:EN,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:a,axis:r}=t,o=n,i=s.shape.length,l=gw(r,s.shape);let u=l;const c=hR(u,i),h=null!=c,d=o.shouldExecuteOnCPU([s]),p=[];let f=s;if(h){if(d){const e=o.texData.get(f.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const n=kQ(e,s.shape,s.dtype,c,t);f=o.makeTensorInfo(t,s.dtype);o.texData.get(f.dataId).values=n}else f=T0(s,c,o);p.push(f),u=pR(u.length,i)}cR("sum",u,i);const[m,g]=lR(f.shape,u);let x=m;a&&(x=uR(m,l));const b=function(e,t,n,s){const a=uw(t),r=k0({inputs:{x:e},attrs:{shape:[uw(e.shape)/a,a]},backend:s}),o=S0(r,"float32","mean",s),i=k0({inputs:{x:o},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(o),i}(f,g,x,o);for(const e of p)o.disposeIntermediateTensorInfo(e);return b}};const I4={kernelName:RN,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s,i=a.shape.length,l=gw(r,a.shape);let u=l;const c=hR(u,i);let h=a;null!=c&&(h=A0({inputs:{x:a},backend:n,attrs:{perm:c}}),u=pR(u.length,a.shape.length)),cR("min",u,i);const[d,p]=lR(h.shape,u),f=k0({inputs:{x:h},backend:n,attrs:{shape:[-1,uw(p)]}}),m=S0(f,f.dtype,"min",n);let g;if(o){g=k0({inputs:{x:m},backend:n,attrs:{shape:uR(d,l)}})}else g=k0({inputs:{x:m},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},N4=p0({opSnippet:ZQ+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+QQ+"\n  return result;\n",cpuKernelImpl:qJ}),S4={kernelName:AN,backendName:"webgl",kernelFunc:N4};class C4{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=nJ(s),r=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${a} start = ${a}(${r});\n      ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${a} coords = outC - start;\n        setOutput(getX(${i}));\n      }\n    `:`\n        int start = ${r};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class $4{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=nJ(s),r=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=NQ("rc",s),l=NQ("source",s),u=`${i[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let d="";if(1===s){const e=`\n        ${a} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;d=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${i[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${a} source = rc;\n        ${a} lt = ${a}(lessThan(source, start));\n        ${a} gte = ${a}(greaterThanEqual(source, end));\n        ${a} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;d=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${i[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${i[s-2]} += 1;\n        if(${i[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${i[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${a} start = ${a}(${r});\n      const ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const T4={kernelName:_N,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:a,mode:r}=n,o=zw().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new $4(s.shape,a,r):new C4(s.shape,a,r);return t.runWebGLProgram(o,[s],s.dtype)}},E4=p0({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+QQ+"\n  return result;\n"}),R4={kernelName:FN,backendName:"webgl",kernelFunc:E4};class A4{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const _4=p0({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),F4={kernelName:zI,backendName:"webgl",kernelFunc:_4},O4="return a - b;",D4=p0({opSnippet:O4,packedOpSnippet:O4,supportsComplex:!0,cpuKernelImpl:bQ}),M4={kernelName:BS,backendName:"webgl",kernelFunc:D4};function L4(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{dim:r}=s,o=gw([r],a.shape),i=h4({inputs:{x:a},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),l=uR(i.shape,o),u=k0({inputs:{x:i},backend:n,attrs:{shape:l}}),c=D4({inputs:{a:a,b:u},backend:n}),h=n3({inputs:{x:c},backend:n}),d=E0({inputs:{x:h},backend:n,attrs:{axis:o,keepDims:!1}}),p=k0({inputs:{x:d},backend:n,attrs:{shape:l}}),f=_4({inputs:{a:h,b:p},backend:n});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),f}const B4={kernelName:SS,backendName:"webgl",kernelFunc:L4};const P4={kernelName:ON,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{numSamples:r,seed:o,normalized:i}=s,l=i?a:L4({inputs:{logits:a},backend:n,attrs:{dim:a.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new A4(u,c,r),d=[[o]],p=n.runWebGLProgram(h,[l],"int32",d);return i||n.disposeIntermediateTensorInfo(l),p}},z4=_Q+"\n  return -x;\n";const W4={kernelName:MN,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,a]=ZJ(e.values,s.shape,s.dtype);return n.makeTensorInfo(a,s.dtype,t)}let a;return a=zw().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new HQ(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new AQ(s.shape,z4),n.runWebGLProgram(a,[s],s.dtype)}},V4=mF;const U4={kernelName:BN,backendName:"webgl",kernelFunc:function(e){tC("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=s,u=n.readSync(a.dataId),c=n.readSync(r.dataId),{selectedIndices:h}=V4(u,c,o,i,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},G4=gF;const H4={kernelName:PN,backendName:"webgl",kernelFunc:function(e){tC("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(a.dataId),h=n.readSync(r.dataId),{selectedIndices:d,validOutputs:p}=G4(c,h,o,i,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},j4=xF;const X4={kernelName:zN,backendName:"webgl",kernelFunc:function(e){tC("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(a.dataId),h=n.readSync(r.dataId),d=o,p=i,f=l,m=u,{selectedIndices:g,selectedScores:x}=j4(c,h,d,p,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([x.length],"float32",new Float32Array(x))]}};class K4{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const q4={kernelName:VN,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:a}=t,{dtype:r,depth:o,onValue:i,offValue:l}=s,u=uw(a.shape),c=new K4(u,o,i,l),h=k0({inputs:{x:a},backend:n,attrs:{shape:[u]}}),d=n.runWebGLProgram(c,[h],r);n.disposeIntermediateTensorInfo(h);const p=k0({inputs:{x:d},backend:n,attrs:{shape:[...a.shape,o]}});return n.disposeIntermediateTensorInfo(d),p}};function Y4(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=M1({inputs:{input:s},backend:n}),t=Y4({inputs:{x:e},backend:n}),a=J1({inputs:{input:s},backend:n}),r=Y4({inputs:{x:a},backend:n}),o=s0({inputs:{real:t,imag:r},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),o}return p3({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const Z4={kernelName:KS,backendName:"webgl",kernelFunc:Y4};const J4={kernelName:WN,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===a.dtype){const t=M1({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s}),r=J1({inputs:{input:a},backend:s}),o=Y4({inputs:{x:r},backend:s}),i=s0({inputs:{real:n,imag:o},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(o),i}return p3({attrs:{shape:a.shape,dtype:a.dtype,value:1},backend:s})}};const Q4={kernelName:UN,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s;if(1===t.length)return a3({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const r=t[0].shape,o=t[0].dtype;t.forEach((e=>{iw(r,e.shape,"All tensors passed to stack must have matching shapes"),ow(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],l=t2({inputs:t.map((e=>{const t=a3({inputs:{input:e},backend:n,attrs:{dim:a}});return i.push(t),t})),backend:n,attrs:{axis:a}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class e6{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=nJ(s),r=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${a} start = ${a}(${r});\n      ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${a} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${r};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class t6{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=nJ(s),r=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=NQ("rc",s),l=NQ("source",s),u=`${i[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${a} rc = outputLoc;`,`${i[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${i[s-2]} += 1;\n       if(${i[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${i[s-1]} += 1;\n         if(${u}) {`],d=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let p="";for(let e=0,t=1===s?2:4;e<t;e++)p+=`\n        ${h[e]}\n        if (${d}) {\n          result[${e}] = float(value);\n        } else {\n          ${a} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;p+=1===s?"} ":"}}",this.userCode=`\n      const ${a} start = ${a}(${r});\n      const ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const n6=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:r,constantValue:o}=s;if(0===uw(a.shape)){const e=r.map(((e,t)=>e[0]+a.shape[t]+e[1]));return p3({backend:n,attrs:{shape:e,value:o,dtype:a.dtype}})}const i=zw().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new t6(a.shape,r,o):new e6(a.shape,r,o),l=[[o]];return n.runWebGLProgram(i,[a],a.dtype,l)},s6={kernelName:GN,backendName:"webgl",kernelFunc:n6},a6=p0({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+QQ+"\n  return result;\n"}),r6={kernelName:HN,backendName:"webgl",kernelFunc:a6};const o6={kernelName:XN,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:o}=s,i=a.shape.length,l=[],u=gw(r,a.shape);let c=u;const h=hR(c,i);let d,p=a;if(null!=h&&(p=A0({inputs:{x:a},backend:n,attrs:{perm:h}}),c=pR(c.length,i),l.push(p)),cR("prod",c,i),n.shouldExecuteOnCPU([p])){const e=n.texData.get(p.dataId).values,{outVals:t,outShape:s,outDtype:a}=QJ(p.shape,p.dtype,e,c);d=n.makeTensorInfo(s,a,t)}else{const[e,t]=lR(p.shape,c),s=uw(t),r=k0({inputs:{x:p},backend:n,attrs:{shape:[-1,s]}}),o=S0(r,t$(a.dtype),"prod",n);d=k0({inputs:{x:o},backend:n,attrs:{shape:e}}),l.push(r),l.push(o)}if(o){l.push(d);const e=uR(d.shape,u);d=k0({inputs:{x:d},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}};const i6={kernelName:KN,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:a,paramsDenseValues:r,indices:o}=t,{outputRaggedRank:i}=s,l=a.map((e=>n.readSync(e.dataId))),u=a.map((e=>e.shape)),c=n.readSync(r.dataId),h=n.readSync(o.dataId),[d,p,f]=eQ(l,u,c,r.shape,r.dtype,h,o.shape,i),m=d.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,r.dtype,p);return m.concat([g])}};const l6={kernelName:qN,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:s,limits:a,deltas:r}=t,o=n.readSync(s.dataId),i=n.readSync(a.dataId),l=n.readSync(r.dataId),[u,c]=tQ(o,s.shape,s.dtype,i,a.shape,l,r.shape);return[n.makeTensorInfo([u.length],"int32",u),n.makeTensorInfo([c.length],s.dtype,c)]}};const u6={kernelName:YN,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:a,values:r,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=s,u=n.readSync(a.dataId),c=n.readSync(r.dataId),h=n.readSync(o.dataId),d=i.map((e=>n.readSync(e.dataId))),p=i.map((e=>e.shape)),[f,m]=nQ(u,a.shape,c,r.shape,r.dtype,h,o.shape,d,p,l);return n.makeTensorInfo(f,r.dtype,m)}},c6=e=>{const{backend:t,attrs:n}=e,{start:s,stop:a,step:r,dtype:o}=n,i=sQ(s,a,r,o);return t.makeTensorInfo([i.length],o,i)},h6={kernelName:ZN,backendName:"webgl",kernelFunc:c6},d6=d0({opSnippet:"return 1.0 / x;"}),p6={kernelName:QN,backendName:"webgl",kernelFunc:d6},f6=d0({opSnippet:_Q+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),m6={kernelName:eS,backendName:"webgl",kernelFunc:f6},g6=d0({opSnippet:_Q+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),x6={kernelName:oS,backendName:"webgl",kernelFunc:g6};class b6{constructor(e,t,n,s,a){this.variableNames=["A"],this.outputShape=[];const[r,o,i,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?o-1:o,s&&n>1?i-1:i],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=a?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class y6{constructor(e,t,n,s,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[r,o,i,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?o-1:o,s&&n>1?i-1:i],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=a?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const v6={kernelName:aS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:o,size:i}=s,[l,u]=i,c=zw().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new y6(a.shape,l,u,r,o):new b6(a.shape,l,u,r,o);return n.runWebGLProgram(c,[a],"float32")}};class k6{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,a]=t,[,r,o]=e,i=[n&&r>1?s-1:s,n&&o>1?a-1:a],l=[n&&r>1?r-1:r,n&&o>1?o-1:o],u=i[0]/l[0],c=i[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${r}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${a-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const w6={kernelName:rS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:o}=s,i=new k6(r.shape,a.shape,o);return n.runWebGLProgram(i,[r],r.dtype)}};class I6{constructor(e,t,n,s,a){this.variableNames=["A"],this.outputShape=[];const[r,o,i,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?o-1:o,s&&n>1?i-1:i],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let d;d=a?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class N6{constructor(e,t,n,s,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[r,o,i,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?o-1:o,s&&n>1?i-1:i],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let d;d=a?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const S6={kernelName:nS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:o,size:i}=s,[l,u]=i,c=zw().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new N6(a.shape,l,u,r,o):new I6(a.shape,l,u,r,o);return n.runWebGLProgram(c,[a],a.dtype)}};class C6{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,a]=t,[,r,o]=e,i=[n&&r>1?s-1:s,n&&o>1?a-1:a],l=[n&&r>1?r-1:r,n&&o>1?o-1:o],u=i[0]/l[0],c=i[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${r}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${i[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${i[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${a}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const $6={kernelName:sS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:o}=s,i=new C6(r.shape,a.shape,o);return n.runWebGLProgram(i,[r],r.dtype)}};class T6{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),a=nJ(n);this.userCode=`\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class E6{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=NQ("rc",n),a=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,r=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,o=nJ(n);function i(n){const s=e.map(((s,a)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(a,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${a}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${o} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return i(e)}(s.slice())};\n          if(${a}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",i(e)}(s.slice())};\n          }\n          if(${r}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",i(e)}(s.slice())};\n            if(${a}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",i(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const R6={kernelName:iS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dims:r}=s,o=a.shape.length,i=gw(r,a.shape);if(0===o)return t0({inputs:{x:a},backend:n});const l=zw().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new E6(a.shape,i):new T6(a.shape,i);return n.runWebGLProgram(l,[a],a.dtype)}};class A6{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],s=e[2];this.outputShape=e;let a="";a="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${a}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const _6={kernelName:ZS,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:a,fillValue:r,center:o}=t,i=n,l=new A6(s.shape,r),[u,c]=hD(o,s.shape[1],s.shape[2]),h=[[u,c,Math.sin(a),Math.cos(a)]];return i.runWebGLProgram(l,[s],s.dtype,h)}},F6=d0({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),O6={kernelName:lS,backendName:"webgl",kernelFunc:F6},D6=d0({opSnippet:"return inversesqrt(x);",cpuKernelImpl:aQ}),M6={kernelName:uS,backendName:"webgl",kernelFunc:D6};class L6{constructor(e,t,n,s,a,r,o=!0,i=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=r;const l=nJ(a.length),u=nJ(r.length);let c="";1===n?c="i":2===n&&(c="i, j");const h=`getIndices(${c})`;let d="";1===s?d="i":2===s&&(d="i, coords[1]");const p=`getUpdates(${d})`;let f="";i&&(f="coords[0], coords[1]");const m=`getDefaultValue(${f})`,g=t>1?"strides[j]":"strides";this.userCode=`\n        ${l} strides = ${l}(${a});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${h});\n              flattenedIndex += index * ${g};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(${m}, sum, float(found)));\n        }\n      `}}class B6{constructor(e,t,n,s,a,r,o=!0,i=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=r;const l=nJ(a.length),u=nJ(r.length);let c="";1===n?c="i":2===n&&(c="i, j");const h=`getIndices(${c})`;let d="";1===s?d="i":2===s&&(d="i, coords[1]");const p=`getUpdates(${d})`;let f="";i&&(f="coords[0], coords[1]");const m=`getDefaultValue(${f})`,g=t>1?"strides[j]":"strides",x=t>1?"strides[j + 1]":"strides";this.userCode=`\n        ${l} strides = ${l}(${a});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${e}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${t}; j+=2) {\n              ivec4 index = round(${h});\n              flattenedIndex += index.xz * ${g};\n              if (j + 1 < ${t}) {\n                flattenedIndex += index.yw * ${x};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = ${p};\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(${m}, sum, found));\n        }\n      `}}const P6={kernelName:cS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a,updates:r}=t,{shape:o}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=S_(0,a,o),d=[h/u,u];if(0===h)return n.makeTensorInfo(o,a.dtype);const p=k0({inputs:{x:a},backend:n,attrs:{shape:[l,i]}}),f=k0({inputs:{x:r},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0]));let g;g=zw().getBool("WEBGL_PACK")?new B6(l,i,p.shape.length,f.shape.length,c,d):new L6(l,i,p.shape.length,f.shape.length,c,d);const x=n.runWebGLProgram(g,[f,p,m],f.dtype),b=k0({inputs:{x:x},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(m),b}};class z6{constructor(e,t,n,s){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const a=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,r=2===zw().getNumber("WEBGL_VERSION")?"while (left < right) {":a,o="left"===s?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${r}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${o} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const W6={kernelName:dS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:a,values:r}=t,{side:o}=s,i=new z6(a.shape[0],a.shape[1],r.shape[1],o),l=[[a.shape[1]]];return n.runWebGLProgram(i,[a,r],"int32",l)}};class V6{constructor(e,t,n){let s,a;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)a="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[],o=[];for(let s=0;s<t.length;s++)o.push(`${n[s]}`),s<e&&r.push(`${n[s]}`);s=r.join(),a=o.join()}const r=nJ(n);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${a}));\n        } else {\n          setOutput(getB(${a}));\n        }\n      }\n    `}}const U6={kernelName:pS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:a,e:r}=t,o=new V6(s.shape.length,a.shape,a.shape.length);return n.runWebGLProgram(o,[s,a,r],e$(a.dtype,r.dtype))}},G6=d0({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = ${bD};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),H6={kernelName:fS,backendName:"webgl",kernelFunc:G6},j6=d0({opSnippet:h0+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:oQ}),X6={kernelName:yS,backendName:"webgl",kernelFunc:j6},K6=d0({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),q6={kernelName:bS,backendName:"webgl",kernelFunc:K6},Y6=d0({opSnippet:h0+"\n  return sin(x);\n",packedOpSnippet:`\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${QQ}\n  return result;\n`}),Z6={kernelName:gS,backendName:"webgl",kernelFunc:Y6},J6=d0({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),Q6={kernelName:xS,backendName:"webgl",kernelFunc:J6},e5=d0({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),t5={kernelName:vS,backendName:"webgl",kernelFunc:e5},n5={kernelName:IS,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:r,paddings:o}=s;ow(a.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const i=r.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...o);for(let e=1+r.length;e<a.shape.length;++e)l.push([0,0]);const u=[],c=n6({inputs:{x:a},backend:n,attrs:{paddings:l,constantValue:0}}),h=dD(c.shape,r,i,!1),d=pD(h.length,r.length,!1),p=fD(c.shape,r,i,!1),f=k0({inputs:{x:c},backend:n,attrs:{shape:h}}),m=A0({inputs:{x:f},backend:n,attrs:{perm:d}}),g=k0({inputs:{x:m},backend:n,attrs:{shape:p}});return u.push(c),u.push(f),u.push(m),u.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}};const s5={kernelName:CS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:a,denseShape:r,defaultValue:o}=t;if(1!==r.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${r.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==a.shape.length)throw new Error(`Values must be a vector, saw:\n         ${a.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.readSync(s.dataId),l=n.readSync(a.dataId),u=n.readSync(r.dataId),c=n.readSync(o.dataId)[0],[h,d,p,f,m]=uQ(i,s.shape,s.dtype,l,a.dtype,u,c);return[n.makeTensorInfo(d,s.dtype,h),n.makeTensorInfo([d[0]],a.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};const a5={kernelName:$S,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:a,newShape:r}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==a.shape.length)throw new Error(`Input shape should be a vector but received shape ${a.shape}`);if(1!==r.shape.length)throw new Error(`Target shape should be a vector but received shape ${r.shape}`);const o=Array.from(n.readSync(a.dataId)),i=n.readSync(s.dataId),l=Array.from(n.readSync(r.dataId)),[u,c,h]=cQ(i,s.shape,s.dtype,o,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],r.dtype,new Int32Array(h))]}};const r5={kernelName:TS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:a,segmentIds:r}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${a.shape}`);if(1!==r.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${r.shape}`);const o=n.readSync(s.dataId),i=n.readSync(a.dataId),l=n.readSync(r.dataId),[u,c]=hQ(o,s.shape,s.dtype,i,l,!0);return n.makeTensorInfo(c,s.dtype,u)}};const o5={kernelName:ES,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:a,segmentIds:r}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${a.shape}`);if(1!==r.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${r.shape}`);const o=n.readSync(s.dataId),i=n.readSync(a.dataId),l=n.readSync(r.dataId),[u,c]=hQ(o,s.shape,s.dtype,i,l);return n.makeTensorInfo(c,s.dtype,u)}};const i5={kernelName:RS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:a,sparseValues:r,defaultValue:o}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=S_(0,a,i);if("string"===r.dtype){const e=n.bufferSync(a),t=n.bufferSync(r),s=TC(n.readSync(o.dataId)[0]),p=rQ(e,t,i,d,c,u,l,h,s,false);return n.makeTensorInfo(i,p.dtype,p.values)}const p=new L6(u,l,a.shape.length,r.shape.length,h,[d,1],false),f=n.runWebGLProgram(p,[r,a,o],r.dtype),m=k0({inputs:{x:f},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(f),m}};const l5={kernelName:NS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{numOrSizeSplits:r,axis:o}=s,i=gw(o,a.shape)[0],l=UD(a,r,i),u=a.shape.length,c=new Array(u).fill(0),h=a.shape.slice();return l.map((e=>{const t=[...h];t[i]=e;const s=T1({inputs:{x:a},backend:n,attrs:{begin:c,size:t}});return c[i]+=e,s}))}},u5="return sqrt(x);",c5=d0({opSnippet:u5,packedOpSnippet:u5,cpuKernelImpl:dQ}),h5={kernelName:kS,backendName:"webgl",kernelFunc:c5},d5={kernelName:_S,backendName:"webgl",kernelFunc:d0({opSnippet:"return x * x;"})},p5="return (a - b) * (a - b);",f5=p0({opSnippet:p5,packedOpSnippet:p5}),m5={kernelName:AS,backendName:"webgl",kernelFunc:f5};const g5={kernelName:FS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");const r=oM(n.readSync(a.dataId)),o=pQ(r,"string",s);return n.makeTensorInfo(a.shape,"string",o)}};const x5={kernelName:qS,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,a=_Q+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,r=new AQ(s.shape,a);return n.runWebGLProgram(r,[s],s.dtype)}};class b5{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,a=nJ(n.length),r=nJ(n.length);let o="";if(1===s)o="coords * strides + begin";else{let e=0;o=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${a} begin = ${a}(${e});\n      ${a} strides = ${a}(${t});\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}const y5={kernelName:OS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:r,end:o,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s,{finalShapeSparse:p,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:x,begin:b,end:y,strides:v}=YO(a.shape,r,o,i,l,u,c,h,d);let k;if(m)k=k0({inputs:{x:a},backend:n,attrs:{shape:f}});else if(g||x){ow(a.shape.length>=1,(()=>`Input must have rank at least 1, got: ${a.shape.length}`));const e=BO(b,y,v),t=T1({inputs:{x:a},backend:n,attrs:{begin:b,size:e}});k=k0({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{if(n.shouldExecuteOnCPU([a])){const e=n.readSync(a.dataId),t=yT(a.shape,a.dtype,e),s=fQ(p,t,v,b);k=n.makeTensorInfo(f,a.dtype,s.values)}else{const e=new b5(b,v,p);k=n.runWebGLProgram(e,[a],a.dtype)}}const w=k0({inputs:{x:k},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(k),w}};const v5={kernelName:DS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:a,nGramWidths:r,leftPad:o,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=n.readSync(c.dataId),p=n.readSync(h.dataId),[f,m]=mQ(d,p,a,r,o,i,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};const k5={kernelName:MS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:a}=s,{input:r,delimiter:o}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(1!==r.shape.length)throw new Error(`Input must be a vector, got shape: ${r.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.readSync(r.dataId),l=n.readSync(o.dataId)[0],[u,c,h]=gQ(i,l,a),d=c.length;return[n.makeTensorInfo([d,2],"int32",u),n.makeTensorInfo([d],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};const w5={kernelName:LS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:a}=s,{input:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const o=n.readSync(r.dataId),i=xQ(o,a);return n.makeTensorInfo(r.shape,"int32",i)}},I5=d0({opSnippet:"return tan(x);"}),N5={kernelName:PS,backendName:"webgl",kernelFunc:I5},S5=d0({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),C5={kernelName:zS,backendName:"webgl",kernelFunc:S5};const $5={kernelName:hS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{tensor:a,indices:r,updates:o}=t,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=S_(0,r,a.shape),d=[h/u,u];if(0===h)return n.makeTensorInfo(a.shape,r.dtype);const p=k0({inputs:{x:r},backend:n,attrs:{shape:[l,i]}}),f=k0({inputs:{x:o},backend:n,attrs:{shape:[l,u]}}),m=k0({inputs:{x:a},backend:n,attrs:{shape:d}}),g=new L6(l,i,p.shape.length,f.shape.length,c,d,!1,!0),x=n.runWebGLProgram(g,[f,p,m],m.dtype),b=k0({inputs:{x:x},backend:n,attrs:{shape:a.shape}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(x),b}};class T5{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=nJ(this.rank),a=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}function E5(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reps:r}=s;if("string"===a.dtype||a.shape.length>5){const e=n.readSync(a.dataId),t="string"===a.dtype?e.map((e=>TC(e))):e,s=yT(a.shape,a.dtype,t),o=yQ(s,r);return n.makeTensorInfo(o.shape,o.dtype,o.values)}const o=new T5(a.shape,r);return n.runWebGLProgram(o,[a],a.dtype)}const R5={kernelName:WS,backendName:"webgl",kernelFunc:E5};class A5{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class _5{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function F5(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function O5(e){let t=1;for(;t<e;)t*=2;return t}const D5={kernelName:VS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{k:r,sorted:o}=s,i=zw().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=zw().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=a.shape,c=u[u.length-1];if(n.shouldExecuteOnCPU([a])||c<i||r>l){const e=n.readSync(a.dataId),[t,s]=vQ(e,u,a.dtype,r,o);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(s.shape,s.dtype,s.values)]}if(0===r)return u[u.length-1]=0,[n.makeTensorInfo(u,a.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===c)return[a,p3({attrs:{shape:u,dtype:"int32",value:0},backend:n})];const h=n.texData.get(a.dataId),d=null!==h&&h.isPacked,p=d?n.unpackTensor(a):a,f=uw(u)/c,m=k0({inputs:{x:p},attrs:{shape:[f,c]},backend:n});d&&F5(n,p);const g=O5(r),x=O5(c);let b=null;const y=()=>null===b?[m,m]:[m,b],v=(e,t,s)=>{const a=y(),r=new A5(s),o=[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],i=b;b=n.runWebGLProgram(r,a,"int32",o),F5(n,i)};for(let e=1;e<g;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)v(t,n,[f,x])}for(let e=x;e>g;e/=2){const t=y(),s=new _5([f,e/2]),a=[[c],[null===b?1:0],[g]],r=b;b=n.runWebGLProgram(s,t,"int32",a),F5(n,r);const o=g/2,i=2*o;for(let e=o;e>=1;e/=2)v(i,e,b.shape)}let k=b;b=T1({inputs:{x:b},backend:n,attrs:{begin:0,size:[f,r]}}),F5(n,k);let w=_3({inputs:{x:m,indices:b},backend:n,attrs:{axis:1,batchDims:1}});F5(n,m);const I=u.slice(0,-1);I.push(r),k=b,b=k0({inputs:{x:b},attrs:{shape:I},backend:n}),F5(n,k);const N=w;return w=k0({inputs:{x:w},attrs:{shape:I},backend:n}),F5(n,N),[w,b]}};class M5{constructor(e,t,n,s,a,r){this.variableNames=["Image","Transforms"],this.outputShape=r;const o="nearest"===n?1:2;let i;switch(s){case"constant":default:i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${i} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${a});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${a});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${o} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const L5={kernelName:US,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:a,transforms:r}=t,{interpolation:o,fillMode:i,fillValue:l,outputShape:u}=s,[c,h,d,p]=a.shape,[f,m]=null!=u?u:[h,d],g=new M5(h,d,o,i,l,[c,f,m,p]);return n.runWebGLProgram(g,[a,r],"float32")}};const B5={kernelName:HS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:a}=n,{x:r}=t;LZ(r,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=s.readSync(r.dataId),{outputValues:i,outputShape:l,indices:u}=wQ(o,a,r.shape,r.dtype);return[s.makeTensorInfo(l,r.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}};const P5={kernelName:jS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:a}=t;let{axis:r}=s;r<0&&(r+=a.shape.length);const o=a,i=o.shape.length,l=a.shape[r],u=new Array(i-1);let c=0;for(let e=0;e<i;e++)e!==r&&(u[c++]=o.shape[e]);const h=[],d=new Array(i).fill(0),p=o.shape.slice();p[r]=1;const f=new Array(l);for(let e=0;e<f.length;e++){d[r]=e;const t=T1({inputs:{x:o},backend:n,attrs:{begin:d,size:p}}),s=k0({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class z5{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,a=e.inSize,r=e.numSegments,o=r*Math.ceil(a/n);this.outputShape=[s,o];const i=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";a%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `);let h="";a%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${r})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${r})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const W5={kernelName:XS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,segmentIds:r}=t,{numSegments:o}=s,i=a.shape.length,l=[];let u=0;const c=hR([u],i);let h=a;null!=c&&(h=A0({inputs:{x:a},backend:n,attrs:{perm:c}}),l.push(h),u=pR(1,i)[0]);const d=sM(h.shape,u,o),p=uw([h.shape[u]]),f=k0({inputs:{x:h},backend:n,attrs:{shape:[-1,p]}});l.push(f);const m=t$(a.dtype),g=(e,t,s,a,r)=>{const o=e.shape[0],i=e.shape[1],u=nM(i,r),c=new z5({windowSize:u,inSize:i,batchSize:o,numSegments:r},t),h=n.compileAndRun(c,[e,s],a);if(l.push(h),h.shape[1]===r)return h;const d=c6({backend:n,attrs:{start:0,stop:r,step:1,dtype:"float32"}}),p=E5({inputs:{x:d},backend:n,attrs:{reps:[i/u]}});l.push(d),l.push(p);return g(h,t,p,a,r)},x=k0({inputs:{x:g(f,"unsortedSegmentSum",r,m,o)},backend:n,attrs:{shape:d}});let b=x;if(null!=c){l.push(x);const e=dR(c);b=A0({inputs:{x:b},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},V5=[D0,L0,P0,W0,G0,X0,K0,q0,t1,n1,a1,o1,l1,c1,d1,m1,g1,y1,v1,k1,N1,R1,A1,_1,F1,P1,V1,H1,a0,K1,n2,c2,m2,x2,b2,y2,v2,w2,N2,C2,_2,F2,O2,M2,P2,V2,U2,H2,X2,K2,Y2,Z2,Q2,t3,s3,r3,l3,h3,f3,g3,y3,k3,N3,$3,T3,R3,F3,D3,L3,n0,B3,Q1,z3,V3,G3,i0,j3,K3,q3,Z3,Q3,t4,s4,r4,l4,c4,d4,f4,m4,g4,y4,v4,k4,w4,I4,S4,T4,R4,P4,v0,W4,U4,H4,X4,D1,q4,J4,Q4,s6,r6,c0,o6,i6,l6,u6,h6,L1,F4,p6,m6,x6,w0,v6,w6,S6,$6,R6,_6,O6,M6,P6,W6,U6,H6,X6,q6,Z6,Q6,E1,B4,t5,n5,s5,a5,r5,o5,i5,l5,h5,d5,m5,g5,x5,y5,v5,k5,w5,M4,R0,N5,C5,$5,R5,D5,L5,_0,B5,P5,W5,Z4];for(const e of V5)iC(e);var U5=mo((function(t,n){var s;t.exports=(s=s||function(t,n){var s;if("undefined"!=typeof window&&window.crypto&&(s=window.crypto),"undefined"!=typeof self&&self.crypto&&(s=self.crypto),"undefined"!=typeof globalThis&&globalThis.crypto&&(s=globalThis.crypto),!s&&"undefined"!=typeof window&&window.msCrypto&&(s=window.msCrypto),!s&&void 0!==fo&&fo.crypto&&(s=fo.crypto),!s)try{s=e}catch(e){}var a=function(){if(s){if("function"==typeof s.getRandomValues)try{return s.getRandomValues(new Uint32Array(1))[0]}catch(e){}if("function"==typeof s.randomBytes)try{return s.randomBytes(4).readInt32LE()}catch(e){}}throw new Error("Native crypto module could not be used to get secure random number.")},r=Object.create||function(){function e(){}return function(t){var n;return e.prototype=t,n=new e,e.prototype=null,n}}(),o={},i=o.lib={},l=i.Base={extend:function(e){var t=r(this);return e&&t.mixIn(e),t.hasOwnProperty("init")&&this.init!==t.init||(t.init=function(){t.$super.init.apply(this,arguments)}),t.init.prototype=t,t.$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},u=i.WordArray=l.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=t!=n?t:4*e.length},toString:function(e){return(e||h).stringify(this)},concat:function(e){var t=this.words,n=e.words,s=this.sigBytes,a=e.sigBytes;if(this.clamp(),s%4)for(var r=0;r<a;r++){var o=n[r>>>2]>>>24-r%4*8&255;t[s+r>>>2]|=o<<24-(s+r)%4*8}else for(var i=0;i<a;i+=4)t[s+i>>>2]=n[i>>>2];return this.sigBytes+=a,this},clamp:function(){var e=this.words,n=this.sigBytes;e[n>>>2]&=4294967295<<32-n%4*8,e.length=t.ceil(n/4)},clone:function(){var e=l.clone.call(this);return e.words=this.words.slice(0),e},random:function(e){for(var t=[],n=0;n<e;n+=4)t.push(a());return new u.init(t,e)}}),c=o.enc={},h=c.Hex={stringify:function(e){for(var t=e.words,n=e.sigBytes,s=[],a=0;a<n;a++){var r=t[a>>>2]>>>24-a%4*8&255;s.push((r>>>4).toString(16)),s.push((15&r).toString(16))}return s.join("")},parse:function(e){for(var t=e.length,n=[],s=0;s<t;s+=2)n[s>>>3]|=parseInt(e.substr(s,2),16)<<24-s%8*4;return new u.init(n,t/2)}},d=c.Latin1={stringify:function(e){for(var t=e.words,n=e.sigBytes,s=[],a=0;a<n;a++){var r=t[a>>>2]>>>24-a%4*8&255;s.push(String.fromCharCode(r))}return s.join("")},parse:function(e){for(var t=e.length,n=[],s=0;s<t;s++)n[s>>>2]|=(255&e.charCodeAt(s))<<24-s%4*8;return new u.init(n,t)}},p=c.Utf8={stringify:function(e){try{return decodeURIComponent(escape(d.stringify(e)))}catch(e){throw new Error("Malformed UTF-8 data")}},parse:function(e){return d.parse(unescape(encodeURIComponent(e)))}},f=i.BufferedBlockAlgorithm=l.extend({reset:function(){this._data=new u.init,this._nDataBytes=0},_append:function(e){"string"==typeof e&&(e=p.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(e){var n,s=this._data,a=s.words,r=s.sigBytes,o=this.blockSize,i=r/(4*o),l=(i=e?t.ceil(i):t.max((0|i)-this._minBufferSize,0))*o,c=t.min(4*l,r);if(l){for(var h=0;h<l;h+=o)this._doProcessBlock(a,h);n=a.splice(0,l),s.sigBytes-=c}return new u.init(n,c)},clone:function(){var e=l.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0});i.Hasher=f.extend({cfg:l.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){f.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,n){return new e.init(n).finalize(t)}},_createHmacHelper:function(e){return function(t,n){return new m.HMAC.init(e,n).finalize(t)}}});var m=o.algo={};return o}(Math),s)})),G5=(mo((function(e,t){var n,s,a,r,o,i,l;e.exports=(a=(s=l=U5).lib,r=a.Base,o=a.WordArray,(i=s.x64={}).Word=r.extend({init:function(e,t){this.high=e,this.low=t}}),i.WordArray=r.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=t!=n?t:8*e.length},toX32:function(){for(var e=this.words,t=e.length,n=[],s=0;s<t;s++){var a=e[s];n.push(a.high),n.push(a.low)}return o.create(n,this.sigBytes)},clone:function(){for(var e=r.clone.call(this),t=e.words=this.words.slice(0),n=t.length,s=0;s<n;s++)t[s]=t[s].clone();return e}}),l)})),mo((function(e,t){var n;e.exports=(n=U5,function(){if("function"==typeof ArrayBuffer){var e=n.lib.WordArray,t=e.init,s=e.init=function(e){if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),(e instanceof Int8Array||"undefined"!=typeof Uint8ClampedArray&&e instanceof Uint8ClampedArray||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array)&&(e=new Uint8Array(e.buffer,e.byteOffset,e.byteLength)),e instanceof Uint8Array){for(var n=e.byteLength,s=[],a=0;a<n;a++)s[a>>>2]|=e[a]<<24-a%4*8;t.call(this,s,n)}else t.apply(this,arguments)};s.prototype=e}}(),n.lib.WordArray)})),mo((function(e,t){var n;e.exports=(n=U5,function(){var e=n,t=e.lib.WordArray,s=e.enc;function a(e){return e<<8&4278255360|e>>>8&16711935}s.Utf16=s.Utf16BE={stringify:function(e){for(var t=e.words,n=e.sigBytes,s=[],a=0;a<n;a+=2){var r=t[a>>>2]>>>16-a%4*8&65535;s.push(String.fromCharCode(r))}return s.join("")},parse:function(e){for(var n=e.length,s=[],a=0;a<n;a++)s[a>>>1]|=e.charCodeAt(a)<<16-a%2*16;return t.create(s,2*n)}},s.Utf16LE={stringify:function(e){for(var t=e.words,n=e.sigBytes,s=[],r=0;r<n;r+=2){var o=a(t[r>>>2]>>>16-r%4*8&65535);s.push(String.fromCharCode(o))}return s.join("")},parse:function(e){for(var n=e.length,s=[],r=0;r<n;r++)s[r>>>1]|=a(e.charCodeAt(r)<<16-r%2*16);return t.create(s,2*n)}}}(),n.enc.Utf16)})),mo((function(e,t){var n;e.exports=(n=U5,function(){var e=n,t=e.lib.WordArray;function s(e,n,s){for(var a=[],r=0,o=0;o<n;o++)if(o%4){var i=s[e.charCodeAt(o-1)]<<o%4*2|s[e.charCodeAt(o)]>>>6-o%4*2;a[r>>>2]|=i<<24-r%4*8,r++}return t.create(a,r)}e.enc.Base64={stringify:function(e){var t=e.words,n=e.sigBytes,s=this._map;e.clamp();for(var a=[],r=0;r<n;r+=3)for(var o=(t[r>>>2]>>>24-r%4*8&255)<<16|(t[r+1>>>2]>>>24-(r+1)%4*8&255)<<8|t[r+2>>>2]>>>24-(r+2)%4*8&255,i=0;i<4&&r+.75*i<n;i++)a.push(s.charAt(o>>>6*(3-i)&63));var l=s.charAt(64);if(l)for(;a.length%4;)a.push(l);return a.join("")},parse:function(e){var t=e.length,n=this._map,a=this._reverseMap;if(!a){a=this._reverseMap=[];for(var r=0;r<n.length;r++)a[n.charCodeAt(r)]=r}var o=n.charAt(64);if(o){var i=e.indexOf(o);-1!==i&&(t=i)}return s(e,t,a)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}}(),n.enc.Base64)})),mo((function(e,t){var n;e.exports=(n=U5,function(){var e=n,t=e.lib.WordArray;function s(e,n,s){for(var a=[],r=0,o=0;o<n;o++)if(o%4){var i=s[e.charCodeAt(o-1)]<<o%4*2|s[e.charCodeAt(o)]>>>6-o%4*2;a[r>>>2]|=i<<24-r%4*8,r++}return t.create(a,r)}e.enc.Base64url={stringify:function(e,t){void 0===t&&(t=!0);var n=e.words,s=e.sigBytes,a=t?this._safe_map:this._map;e.clamp();for(var r=[],o=0;o<s;o+=3)for(var i=(n[o>>>2]>>>24-o%4*8&255)<<16|(n[o+1>>>2]>>>24-(o+1)%4*8&255)<<8|n[o+2>>>2]>>>24-(o+2)%4*8&255,l=0;l<4&&o+.75*l<s;l++)r.push(a.charAt(i>>>6*(3-l)&63));var u=a.charAt(64);if(u)for(;r.length%4;)r.push(u);return r.join("")},parse:function(e,t){void 0===t&&(t=!0);var n=e.length,a=t?this._safe_map:this._map,r=this._reverseMap;if(!r){r=this._reverseMap=[];for(var o=0;o<a.length;o++)r[a.charCodeAt(o)]=o}var i=a.charAt(64);if(i){var l=e.indexOf(i);-1!==l&&(n=l)}return s(e,n,r)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",_safe_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"}}(),n.enc.Base64url)})),mo((function(e,t){var n;e.exports=(n=U5,function(e){var t=n,s=t.lib,a=s.WordArray,r=s.Hasher,o=t.algo,i=[];!function(){for(var t=0;t<64;t++)i[t]=4294967296*e.abs(e.sin(t+1))|0}();var l=o.MD5=r.extend({_doReset:function(){this._hash=new a.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(e,t){for(var n=0;n<16;n++){var s=t+n,a=e[s];e[s]=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8)}var r=this._hash.words,o=e[t+0],l=e[t+1],p=e[t+2],f=e[t+3],m=e[t+4],g=e[t+5],x=e[t+6],b=e[t+7],y=e[t+8],v=e[t+9],k=e[t+10],w=e[t+11],I=e[t+12],N=e[t+13],S=e[t+14],C=e[t+15],$=r[0],T=r[1],E=r[2],R=r[3];$=u($,T,E,R,o,7,i[0]),R=u(R,$,T,E,l,12,i[1]),E=u(E,R,$,T,p,17,i[2]),T=u(T,E,R,$,f,22,i[3]),$=u($,T,E,R,m,7,i[4]),R=u(R,$,T,E,g,12,i[5]),E=u(E,R,$,T,x,17,i[6]),T=u(T,E,R,$,b,22,i[7]),$=u($,T,E,R,y,7,i[8]),R=u(R,$,T,E,v,12,i[9]),E=u(E,R,$,T,k,17,i[10]),T=u(T,E,R,$,w,22,i[11]),$=u($,T,E,R,I,7,i[12]),R=u(R,$,T,E,N,12,i[13]),E=u(E,R,$,T,S,17,i[14]),$=c($,T=u(T,E,R,$,C,22,i[15]),E,R,l,5,i[16]),R=c(R,$,T,E,x,9,i[17]),E=c(E,R,$,T,w,14,i[18]),T=c(T,E,R,$,o,20,i[19]),$=c($,T,E,R,g,5,i[20]),R=c(R,$,T,E,k,9,i[21]),E=c(E,R,$,T,C,14,i[22]),T=c(T,E,R,$,m,20,i[23]),$=c($,T,E,R,v,5,i[24]),R=c(R,$,T,E,S,9,i[25]),E=c(E,R,$,T,f,14,i[26]),T=c(T,E,R,$,y,20,i[27]),$=c($,T,E,R,N,5,i[28]),R=c(R,$,T,E,p,9,i[29]),E=c(E,R,$,T,b,14,i[30]),$=h($,T=c(T,E,R,$,I,20,i[31]),E,R,g,4,i[32]),R=h(R,$,T,E,y,11,i[33]),E=h(E,R,$,T,w,16,i[34]),T=h(T,E,R,$,S,23,i[35]),$=h($,T,E,R,l,4,i[36]),R=h(R,$,T,E,m,11,i[37]),E=h(E,R,$,T,b,16,i[38]),T=h(T,E,R,$,k,23,i[39]),$=h($,T,E,R,N,4,i[40]),R=h(R,$,T,E,o,11,i[41]),E=h(E,R,$,T,f,16,i[42]),T=h(T,E,R,$,x,23,i[43]),$=h($,T,E,R,v,4,i[44]),R=h(R,$,T,E,I,11,i[45]),E=h(E,R,$,T,C,16,i[46]),$=d($,T=h(T,E,R,$,p,23,i[47]),E,R,o,6,i[48]),R=d(R,$,T,E,b,10,i[49]),E=d(E,R,$,T,S,15,i[50]),T=d(T,E,R,$,g,21,i[51]),$=d($,T,E,R,I,6,i[52]),R=d(R,$,T,E,f,10,i[53]),E=d(E,R,$,T,k,15,i[54]),T=d(T,E,R,$,l,21,i[55]),$=d($,T,E,R,y,6,i[56]),R=d(R,$,T,E,C,10,i[57]),E=d(E,R,$,T,x,15,i[58]),T=d(T,E,R,$,N,21,i[59]),$=d($,T,E,R,m,6,i[60]),R=d(R,$,T,E,w,10,i[61]),E=d(E,R,$,T,p,15,i[62]),T=d(T,E,R,$,v,21,i[63]),r[0]=r[0]+$|0,r[1]=r[1]+T|0,r[2]=r[2]+E|0,r[3]=r[3]+R|0},_doFinalize:function(){var t=this._data,n=t.words,s=8*this._nDataBytes,a=8*t.sigBytes;n[a>>>5]|=128<<24-a%32;var r=e.floor(s/4294967296),o=s;n[15+(a+64>>>9<<4)]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8),n[14+(a+64>>>9<<4)]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),t.sigBytes=4*(n.length+1),this._process();for(var i=this._hash,l=i.words,u=0;u<4;u++){var c=l[u];l[u]=16711935&(c<<8|c>>>24)|4278255360&(c<<24|c>>>8)}return i},clone:function(){var e=r.clone.call(this);return e._hash=this._hash.clone(),e}});function u(e,t,n,s,a,r,o){var i=e+(t&n|~t&s)+a+o;return(i<<r|i>>>32-r)+t}function c(e,t,n,s,a,r,o){var i=e+(t&s|n&~s)+a+o;return(i<<r|i>>>32-r)+t}function h(e,t,n,s,a,r,o){var i=e+(t^n^s)+a+o;return(i<<r|i>>>32-r)+t}function d(e,t,n,s,a,r,o){var i=e+(n^(t|~s))+a+o;return(i<<r|i>>>32-r)+t}t.MD5=r._createHelper(l),t.HmacMD5=r._createHmacHelper(l)}(Math),n.MD5)})),mo((function(e,t){var n,s,a,r,o,i,l,u;e.exports=(s=(n=u=U5).lib,a=s.WordArray,r=s.Hasher,o=n.algo,i=[],l=o.SHA1=r.extend({_doReset:function(){this._hash=new a.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,t){for(var n=this._hash.words,s=n[0],a=n[1],r=n[2],o=n[3],l=n[4],u=0;u<80;u++){if(u<16)i[u]=0|e[t+u];else{var c=i[u-3]^i[u-8]^i[u-14]^i[u-16];i[u]=c<<1|c>>>31}var h=(s<<5|s>>>27)+l+i[u];h+=u<20?1518500249+(a&r|~a&o):u<40?1859775393+(a^r^o):u<60?(a&r|a&o|r&o)-1894007588:(a^r^o)-899497514,l=o,o=r,r=a<<30|a>>>2,a=s,s=h}n[0]=n[0]+s|0,n[1]=n[1]+a|0,n[2]=n[2]+r|0,n[3]=n[3]+o|0,n[4]=n[4]+l|0},_doFinalize:function(){var e=this._data,t=e.words,n=8*this._nDataBytes,s=8*e.sigBytes;return t[s>>>5]|=128<<24-s%32,t[14+(s+64>>>9<<4)]=Math.floor(n/4294967296),t[15+(s+64>>>9<<4)]=n,e.sigBytes=4*t.length,this._process(),this._hash},clone:function(){var e=r.clone.call(this);return e._hash=this._hash.clone(),e}}),n.SHA1=r._createHelper(l),n.HmacSHA1=r._createHmacHelper(l),u.SHA1)})),mo((function(e,t){var n;e.exports=(n=U5,function(e){var t=n,s=t.lib,a=s.WordArray,r=s.Hasher,o=t.algo,i=[],l=[];!function(){function t(t){for(var n=e.sqrt(t),s=2;s<=n;s++)if(!(t%s))return!1;return!0}function n(e){return 4294967296*(e-(0|e))|0}for(var s=2,a=0;a<64;)t(s)&&(a<8&&(i[a]=n(e.pow(s,.5))),l[a]=n(e.pow(s,1/3)),a++),s++}();var u=[],c=o.SHA256=r.extend({_doReset:function(){this._hash=new a.init(i.slice(0))},_doProcessBlock:function(e,t){for(var n=this._hash.words,s=n[0],a=n[1],r=n[2],o=n[3],i=n[4],c=n[5],h=n[6],d=n[7],p=0;p<64;p++){if(p<16)u[p]=0|e[t+p];else{var f=u[p-15],m=(f<<25|f>>>7)^(f<<14|f>>>18)^f>>>3,g=u[p-2],x=(g<<15|g>>>17)^(g<<13|g>>>19)^g>>>10;u[p]=m+u[p-7]+x+u[p-16]}var b=s&a^s&r^a&r,y=(s<<30|s>>>2)^(s<<19|s>>>13)^(s<<10|s>>>22),v=d+((i<<26|i>>>6)^(i<<21|i>>>11)^(i<<7|i>>>25))+(i&c^~i&h)+l[p]+u[p];d=h,h=c,c=i,i=o+v|0,o=r,r=a,a=s,s=v+(y+b)|0}n[0]=n[0]+s|0,n[1]=n[1]+a|0,n[2]=n[2]+r|0,n[3]=n[3]+o|0,n[4]=n[4]+i|0,n[5]=n[5]+c|0,n[6]=n[6]+h|0,n[7]=n[7]+d|0},_doFinalize:function(){var t=this._data,n=t.words,s=8*this._nDataBytes,a=8*t.sigBytes;return n[a>>>5]|=128<<24-a%32,n[14+(a+64>>>9<<4)]=e.floor(s/4294967296),n[15+(a+64>>>9<<4)]=s,t.sigBytes=4*n.length,this._process(),this._hash},clone:function(){var e=r.clone.call(this);return e._hash=this._hash.clone(),e}});t.SHA256=r._createHelper(c),t.HmacSHA256=r._createHmacHelper(c)}(Math),n.SHA256)})),mo((function(e,t){var n,s,a,r,o,i;e.exports=(s=(n=i=U5).lib.WordArray,a=n.algo,r=a.SHA256,o=a.SHA224=r.extend({_doReset:function(){this._hash=new s.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var e=r._doFinalize.call(this);return e.sigBytes-=4,e}}),n.SHA224=r._createHelper(o),n.HmacSHA224=r._createHmacHelper(o),i.SHA224)})),mo((function(e,t){var n;e.exports=(n=U5,function(){var e=n,t=e.lib.Hasher,s=e.x64,a=s.Word,r=s.WordArray,o=e.algo;function i(){return a.create.apply(a,arguments)}var l=[i(1116352408,3609767458),i(1899447441,602891725),i(3049323471,3964484399),i(3921009573,2173295548),i(961987163,4081628472),i(1508970993,3053834265),i(2453635748,2937671579),i(2870763221,3664609560),i(3624381080,2734883394),i(310598401,1164996542),i(607225278,1323610764),i(1426881987,3590304994),i(1925078388,4068182383),i(2162078206,991336113),i(2614888103,633803317),i(3248222580,3479774868),i(3835390401,2666613458),i(4022224774,944711139),i(264347078,2341262773),i(604807628,2007800933),i(770255983,1495990901),i(1249150122,1856431235),i(1555081692,3175218132),i(1996064986,2198950837),i(2554220882,3999719339),i(2821834349,766784016),i(2952996808,2566594879),i(3210313671,3203337956),i(3336571891,1034457026),i(3584528711,2466948901),i(113926993,3758326383),i(338241895,168717936),i(666307205,1188179964),i(773529912,1546045734),i(1294757372,1522805485),i(1396182291,2643833823),i(1695183700,2343527390),i(1986661051,1014477480),i(2177026350,1206759142),i(2456956037,344077627),i(2730485921,1290863460),i(2820302411,3158454273),i(3259730800,3505952657),i(3345764771,106217008),i(3516065817,3606008344),i(3600352804,1432725776),i(4094571909,1467031594),i(275423344,851169720),i(430227734,3100823752),i(506948616,1363258195),i(659060556,3750685593),i(883997877,3785050280),i(958139571,3318307427),i(1322822218,3812723403),i(1537002063,2003034995),i(1747873779,3602036899),i(1955562222,1575990012),i(2024104815,1125592928),i(2227730452,2716904306),i(2361852424,442776044),i(2428436474,593698344),i(2756734187,3733110249),i(3204031479,2999351573),i(3329325298,3815920427),i(3391569614,3928383900),i(3515267271,566280711),i(3940187606,3454069534),i(4118630271,4000239992),i(116418474,1914138554),i(174292421,2731055270),i(289380356,3203993006),i(460393269,320620315),i(685471733,587496836),i(852142971,1086792851),i(1017036298,365543100),i(1126000580,2618297676),i(1288033470,3409855158),i(1501505948,4234509866),i(1607167915,987167468),i(1816402316,1246189591)],u=[];!function(){for(var e=0;e<80;e++)u[e]=i()}();var c=o.SHA512=t.extend({_doReset:function(){this._hash=new r.init([new a.init(1779033703,4089235720),new a.init(3144134277,2227873595),new a.init(1013904242,4271175723),new a.init(2773480762,1595750129),new a.init(1359893119,2917565137),new a.init(2600822924,725511199),new a.init(528734635,4215389547),new a.init(1541459225,327033209)])},_doProcessBlock:function(e,t){for(var n=this._hash.words,s=n[0],a=n[1],r=n[2],o=n[3],i=n[4],c=n[5],h=n[6],d=n[7],p=s.high,f=s.low,m=a.high,g=a.low,x=r.high,b=r.low,y=o.high,v=o.low,k=i.high,w=i.low,I=c.high,N=c.low,S=h.high,C=h.low,$=d.high,T=d.low,E=p,R=f,A=m,_=g,F=x,O=b,D=y,M=v,L=k,B=w,P=I,z=N,W=S,V=C,U=$,G=T,H=0;H<80;H++){var j,X,K=u[H];if(H<16)X=K.high=0|e[t+2*H],j=K.low=0|e[t+2*H+1];else{var q=u[H-15],Y=q.high,Z=q.low,J=(Y>>>1|Z<<31)^(Y>>>8|Z<<24)^Y>>>7,Q=(Z>>>1|Y<<31)^(Z>>>8|Y<<24)^(Z>>>7|Y<<25),ee=u[H-2],te=ee.high,ne=ee.low,se=(te>>>19|ne<<13)^(te<<3|ne>>>29)^te>>>6,ae=(ne>>>19|te<<13)^(ne<<3|te>>>29)^(ne>>>6|te<<26),re=u[H-7],oe=re.high,ie=re.low,le=u[H-16],ue=le.high,ce=le.low;X=(X=(X=J+oe+((j=Q+ie)>>>0<Q>>>0?1:0))+se+((j+=ae)>>>0<ae>>>0?1:0))+ue+((j+=ce)>>>0<ce>>>0?1:0),K.high=X,K.low=j}var he,de=L&P^~L&W,pe=B&z^~B&V,fe=E&A^E&F^A&F,me=R&_^R&O^_&O,ge=(E>>>28|R<<4)^(E<<30|R>>>2)^(E<<25|R>>>7),xe=(R>>>28|E<<4)^(R<<30|E>>>2)^(R<<25|E>>>7),be=(L>>>14|B<<18)^(L>>>18|B<<14)^(L<<23|B>>>9),ye=(B>>>14|L<<18)^(B>>>18|L<<14)^(B<<23|L>>>9),ve=l[H],ke=ve.high,we=ve.low,Ie=U+be+((he=G+ye)>>>0<G>>>0?1:0),Ne=xe+me;U=W,G=V,W=P,V=z,P=L,z=B,L=D+(Ie=(Ie=(Ie=Ie+de+((he+=pe)>>>0<pe>>>0?1:0))+ke+((he+=we)>>>0<we>>>0?1:0))+X+((he+=j)>>>0<j>>>0?1:0))+((B=M+he|0)>>>0<M>>>0?1:0)|0,D=F,M=O,F=A,O=_,A=E,_=R,E=Ie+(ge+fe+(Ne>>>0<xe>>>0?1:0))+((R=he+Ne|0)>>>0<he>>>0?1:0)|0}f=s.low=f+R,s.high=p+E+(f>>>0<R>>>0?1:0),g=a.low=g+_,a.high=m+A+(g>>>0<_>>>0?1:0),b=r.low=b+O,r.high=x+F+(b>>>0<O>>>0?1:0),v=o.low=v+M,o.high=y+D+(v>>>0<M>>>0?1:0),w=i.low=w+B,i.high=k+L+(w>>>0<B>>>0?1:0),N=c.low=N+z,c.high=I+P+(N>>>0<z>>>0?1:0),C=h.low=C+V,h.high=S+W+(C>>>0<V>>>0?1:0),T=d.low=T+G,d.high=$+U+(T>>>0<G>>>0?1:0)},_doFinalize:function(){var e=this._data,t=e.words,n=8*this._nDataBytes,s=8*e.sigBytes;return t[s>>>5]|=128<<24-s%32,t[30+(s+128>>>10<<5)]=Math.floor(n/4294967296),t[31+(s+128>>>10<<5)]=n,e.sigBytes=4*t.length,this._process(),this._hash.toX32()},clone:function(){var e=t.clone.call(this);return e._hash=this._hash.clone(),e},blockSize:32});e.SHA512=t._createHelper(c),e.HmacSHA512=t._createHmacHelper(c)}(),n.SHA512)})),mo((function(e,t){var n,s,a,r,o,i,l,u;e.exports=(s=(n=u=U5).x64,a=s.Word,r=s.WordArray,o=n.algo,i=o.SHA512,l=o.SHA384=i.extend({_doReset:function(){this._hash=new r.init([new a.init(3418070365,3238371032),new a.init(1654270250,914150663),new a.init(2438529370,812702999),new a.init(355462360,4144912697),new a.init(1731405415,4290775857),new a.init(2394180231,1750603025),new a.init(3675008525,1694076839),new a.init(1203062813,3204075428)])},_doFinalize:function(){var e=i._doFinalize.call(this);return e.sigBytes-=16,e}}),n.SHA384=i._createHelper(l),n.HmacSHA384=i._createHmacHelper(l),u.SHA384)})),mo((function(e,t){var n;e.exports=(n=U5,function(e){var t=n,s=t.lib,a=s.WordArray,r=s.Hasher,o=t.x64.Word,i=t.algo,l=[],u=[],c=[];!function(){for(var e=1,t=0,n=0;n<24;n++){l[e+5*t]=(n+1)*(n+2)/2%64;var s=(2*e+3*t)%5;e=t%5,t=s}for(e=0;e<5;e++)for(t=0;t<5;t++)u[e+5*t]=t+(2*e+3*t)%5*5;for(var a=1,r=0;r<24;r++){for(var i=0,h=0,d=0;d<7;d++){if(1&a){var p=(1<<d)-1;p<32?h^=1<<p:i^=1<<p-32}128&a?a=a<<1^113:a<<=1}c[r]=o.create(i,h)}}();var h=[];!function(){for(var e=0;e<25;e++)h[e]=o.create()}();var d=i.SHA3=r.extend({cfg:r.cfg.extend({outputLength:512}),_doReset:function(){for(var e=this._state=[],t=0;t<25;t++)e[t]=new o.init;this.blockSize=(1600-2*this.cfg.outputLength)/32},_doProcessBlock:function(e,t){for(var n=this._state,s=this.blockSize/2,a=0;a<s;a++){var r=e[t+2*a],o=e[t+2*a+1];r=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8),o=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),(T=n[a]).high^=o,T.low^=r}for(var i=0;i<24;i++){for(var d=0;d<5;d++){for(var p=0,f=0,m=0;m<5;m++)p^=(T=n[d+5*m]).high,f^=T.low;var g=h[d];g.high=p,g.low=f}for(d=0;d<5;d++){var x=h[(d+4)%5],b=h[(d+1)%5],y=b.high,v=b.low;for(p=x.high^(y<<1|v>>>31),f=x.low^(v<<1|y>>>31),m=0;m<5;m++)(T=n[d+5*m]).high^=p,T.low^=f}for(var k=1;k<25;k++){var w=(T=n[k]).high,I=T.low,N=l[k];N<32?(p=w<<N|I>>>32-N,f=I<<N|w>>>32-N):(p=I<<N-32|w>>>64-N,f=w<<N-32|I>>>64-N);var S=h[u[k]];S.high=p,S.low=f}var C=h[0],$=n[0];for(C.high=$.high,C.low=$.low,d=0;d<5;d++)for(m=0;m<5;m++){var T=n[k=d+5*m],E=h[k],R=h[(d+1)%5+5*m],A=h[(d+2)%5+5*m];T.high=E.high^~R.high&A.high,T.low=E.low^~R.low&A.low}T=n[0];var _=c[i];T.high^=_.high,T.low^=_.low}},_doFinalize:function(){var t=this._data,n=t.words;this._nDataBytes;var s=8*t.sigBytes,r=32*this.blockSize;n[s>>>5]|=1<<24-s%32,n[(e.ceil((s+1)/r)*r>>>5)-1]|=128,t.sigBytes=4*n.length,this._process();for(var o=this._state,i=this.cfg.outputLength/8,l=i/8,u=[],c=0;c<l;c++){var h=o[c],d=h.high,p=h.low;d=16711935&(d<<8|d>>>24)|4278255360&(d<<24|d>>>8),p=16711935&(p<<8|p>>>24)|4278255360&(p<<24|p>>>8),u.push(p),u.push(d)}return new a.init(u,i)},clone:function(){for(var e=r.clone.call(this),t=e._state=this._state.slice(0),n=0;n<25;n++)t[n]=t[n].clone();return e}});t.SHA3=r._createHelper(d),t.HmacSHA3=r._createHmacHelper(d)}(Math),n.SHA3)})),mo((function(e,t){var n;e.exports=(n=U5,function(e){var t=n,s=t.lib,a=s.WordArray,r=s.Hasher,o=t.algo,i=a.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),l=a.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),u=a.create([11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),c=a.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),h=a.create([0,1518500249,1859775393,2400959708,2840853838]),d=a.create([1352829926,1548603684,1836072691,2053994217,0]),p=o.RIPEMD160=r.extend({_doReset:function(){this._hash=a.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,t){for(var n=0;n<16;n++){var s=t+n,a=e[s];e[s]=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8)}var r,o,p,v,k,w,I,N,S,C,$,T=this._hash.words,E=h.words,R=d.words,A=i.words,_=l.words,F=u.words,O=c.words;for(w=r=T[0],I=o=T[1],N=p=T[2],S=v=T[3],C=k=T[4],n=0;n<80;n+=1)$=r+e[t+A[n]]|0,$+=n<16?f(o,p,v)+E[0]:n<32?m(o,p,v)+E[1]:n<48?g(o,p,v)+E[2]:n<64?x(o,p,v)+E[3]:b(o,p,v)+E[4],$=($=y($|=0,F[n]))+k|0,r=k,k=v,v=y(p,10),p=o,o=$,$=w+e[t+_[n]]|0,$+=n<16?b(I,N,S)+R[0]:n<32?x(I,N,S)+R[1]:n<48?g(I,N,S)+R[2]:n<64?m(I,N,S)+R[3]:f(I,N,S)+R[4],$=($=y($|=0,O[n]))+C|0,w=C,C=S,S=y(N,10),N=I,I=$;$=T[1]+p+S|0,T[1]=T[2]+v+C|0,T[2]=T[3]+k+w|0,T[3]=T[4]+r+I|0,T[4]=T[0]+o+N|0,T[0]=$},_doFinalize:function(){var e=this._data,t=e.words,n=8*this._nDataBytes,s=8*e.sigBytes;t[s>>>5]|=128<<24-s%32,t[14+(s+64>>>9<<4)]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8),e.sigBytes=4*(t.length+1),this._process();for(var a=this._hash,r=a.words,o=0;o<5;o++){var i=r[o];r[o]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8)}return a},clone:function(){var e=r.clone.call(this);return e._hash=this._hash.clone(),e}});function f(e,t,n){return e^t^n}function m(e,t,n){return e&t|~e&n}function g(e,t,n){return(e|~t)^n}function x(e,t,n){return e&n|t&~n}function b(e,t,n){return e^(t|~n)}function y(e,t){return e<<t|e>>>32-t}t.RIPEMD160=r._createHelper(p),t.HmacRIPEMD160=r._createHmacHelper(p)}(),n.RIPEMD160)})),mo((function(e,t){var n,s,a;e.exports=(s=(n=U5).lib.Base,a=n.enc.Utf8,void(n.algo.HMAC=s.extend({init:function(e,t){e=this._hasher=new e.init,"string"==typeof t&&(t=a.parse(t));var n=e.blockSize,s=4*n;t.sigBytes>s&&(t=e.finalize(t)),t.clamp();for(var r=this._oKey=t.clone(),o=this._iKey=t.clone(),i=r.words,l=o.words,u=0;u<n;u++)i[u]^=1549556828,l[u]^=909522486;r.sigBytes=o.sigBytes=s,this.reset()},reset:function(){var e=this._hasher;e.reset(),e.update(this._iKey)},update:function(e){return this._hasher.update(e),this},finalize:function(e){var t=this._hasher,n=t.finalize(e);return t.reset(),t.finalize(this._oKey.clone().concat(n))}})))})),mo((function(e,t){var n,s,a,r,o,i,l,u,c;e.exports=(s=(n=c=U5).lib,a=s.Base,r=s.WordArray,o=n.algo,i=o.SHA256,l=o.HMAC,u=o.PBKDF2=a.extend({cfg:a.extend({keySize:4,hasher:i,iterations:25e4}),init:function(e){this.cfg=this.cfg.extend(e)},compute:function(e,t){for(var n=this.cfg,s=l.create(n.hasher,e),a=r.create(),o=r.create([1]),i=a.words,u=o.words,c=n.keySize,h=n.iterations;i.length<c;){var d=s.update(t).finalize(o);s.reset();for(var p=d.words,f=p.length,m=d,g=1;g<h;g++){m=s.finalize(m),s.reset();for(var x=m.words,b=0;b<f;b++)p[b]^=x[b]}a.concat(d),u[0]++}return a.sigBytes=4*c,a}}),n.PBKDF2=function(e,t,n){return u.create(n).compute(e,t)},c.PBKDF2)})),mo((function(e,t){var n,s,a,r,o,i,l,u;e.exports=(s=(n=u=U5).lib,a=s.Base,r=s.WordArray,o=n.algo,i=o.MD5,l=o.EvpKDF=a.extend({cfg:a.extend({keySize:4,hasher:i,iterations:1}),init:function(e){this.cfg=this.cfg.extend(e)},compute:function(e,t){for(var n,s=this.cfg,a=s.hasher.create(),o=r.create(),i=o.words,l=s.keySize,u=s.iterations;i.length<l;){n&&a.update(n),n=a.update(e).finalize(t),a.reset();for(var c=1;c<u;c++)n=a.finalize(n),a.reset();o.concat(n)}return o.sigBytes=4*l,o}}),n.EvpKDF=function(e,t,n){return l.create(n).compute(e,t)},u.EvpKDF)})),mo((function(e,t){var n;e.exports=void((n=U5).lib.Cipher||function(e){var t=n,s=t.lib,a=s.Base,r=s.WordArray,o=s.BufferedBlockAlgorithm,i=t.enc;i.Utf8;var l=i.Base64,u=t.algo.EvpKDF,c=s.Cipher=o.extend({cfg:a.extend(),createEncryptor:function(e,t){return this.create(this._ENC_XFORM_MODE,e,t)},createDecryptor:function(e,t){return this.create(this._DEC_XFORM_MODE,e,t)},init:function(e,t,n){this.cfg=this.cfg.extend(n),this._xformMode=e,this._key=t,this.reset()},reset:function(){o.reset.call(this),this._doReset()},process:function(e){return this._append(e),this._process()},finalize:function(e){return e&&this._append(e),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(){function e(e){return"string"==typeof e?y:x}return function(t){return{encrypt:function(n,s,a){return e(s).encrypt(t,n,s,a)},decrypt:function(n,s,a){return e(s).decrypt(t,n,s,a)}}}}()});s.StreamCipher=c.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var h=t.mode={},d=s.BlockCipherMode=a.extend({createEncryptor:function(e,t){return this.Encryptor.create(e,t)},createDecryptor:function(e,t){return this.Decryptor.create(e,t)},init:function(e,t){this._cipher=e,this._iv=t}}),p=h.CBC=function(){var t=d.extend();function n(t,n,s){var a,r=this._iv;r?(a=r,this._iv=e):a=this._prevBlock;for(var o=0;o<s;o++)t[n+o]^=a[o]}return t.Encryptor=t.extend({processBlock:function(e,t){var s=this._cipher,a=s.blockSize;n.call(this,e,t,a),s.encryptBlock(e,t),this._prevBlock=e.slice(t,t+a)}}),t.Decryptor=t.extend({processBlock:function(e,t){var s=this._cipher,a=s.blockSize,r=e.slice(t,t+a);s.decryptBlock(e,t),n.call(this,e,t,a),this._prevBlock=r}}),t}(),f=(t.pad={}).Pkcs7={pad:function(e,t){for(var n=4*t,s=n-e.sigBytes%n,a=s<<24|s<<16|s<<8|s,o=[],i=0;i<s;i+=4)o.push(a);var l=r.create(o,s);e.concat(l)},unpad:function(e){var t=255&e.words[e.sigBytes-1>>>2];e.sigBytes-=t}};s.BlockCipher=c.extend({cfg:c.cfg.extend({mode:p,padding:f}),reset:function(){var e;c.reset.call(this);var t=this.cfg,n=t.iv,s=t.mode;this._xformMode==this._ENC_XFORM_MODE?e=s.createEncryptor:(e=s.createDecryptor,this._minBufferSize=1),this._mode&&this._mode.__creator==e?this._mode.init(this,n&&n.words):(this._mode=e.call(s,this,n&&n.words),this._mode.__creator=e)},_doProcessBlock:function(e,t){this._mode.processBlock(e,t)},_doFinalize:function(){var e,t=this.cfg.padding;return this._xformMode==this._ENC_XFORM_MODE?(t.pad(this._data,this.blockSize),e=this._process(!0)):(e=this._process(!0),t.unpad(e)),e},blockSize:4});var m=s.CipherParams=a.extend({init:function(e){this.mixIn(e)},toString:function(e){return(e||this.formatter).stringify(this)}}),g=(t.format={}).OpenSSL={stringify:function(e){var t=e.ciphertext,n=e.salt;return(n?r.create([1398893684,1701076831]).concat(n).concat(t):t).toString(l)},parse:function(e){var t,n=l.parse(e),s=n.words;return 1398893684==s[0]&&1701076831==s[1]&&(t=r.create(s.slice(2,4)),s.splice(0,4),n.sigBytes-=16),m.create({ciphertext:n,salt:t})}},x=s.SerializableCipher=a.extend({cfg:a.extend({format:g}),encrypt:function(e,t,n,s){s=this.cfg.extend(s);var a=e.createEncryptor(n,s),r=a.finalize(t),o=a.cfg;return m.create({ciphertext:r,key:n,iv:o.iv,algorithm:e,mode:o.mode,padding:o.padding,blockSize:e.blockSize,formatter:s.format})},decrypt:function(e,t,n,s){return s=this.cfg.extend(s),t=this._parse(t,s.format),e.createDecryptor(n,s).finalize(t.ciphertext)},_parse:function(e,t){return"string"==typeof e?t.parse(e,this):e}}),b=(t.kdf={}).OpenSSL={execute:function(e,t,n,s,a){if(s||(s=r.random(8)),a)o=u.create({keySize:t+n,hasher:a}).compute(e,s);else var o=u.create({keySize:t+n}).compute(e,s);var i=r.create(o.words.slice(t),4*n);return o.sigBytes=4*t,m.create({key:o,iv:i,salt:s})}},y=s.PasswordBasedCipher=x.extend({cfg:x.cfg.extend({kdf:b}),encrypt:function(e,t,n,s){var a=(s=this.cfg.extend(s)).kdf.execute(n,e.keySize,e.ivSize,s.salt,s.hasher);s.iv=a.iv;var r=x.encrypt.call(this,e,t,a.key,s);return r.mixIn(a),r},decrypt:function(e,t,n,s){s=this.cfg.extend(s),t=this._parse(t,s.format);var a=s.kdf.execute(n,e.keySize,e.ivSize,t.salt,s.hasher);return s.iv=a.iv,x.decrypt.call(this,e,t,a.key,s)}})}())})),mo((function(e,t){var n;e.exports=((n=U5).mode.CFB=function(){var e=n.lib.BlockCipherMode.extend();function t(e,t,n,s){var a,r=this._iv;r?(a=r.slice(0),this._iv=void 0):a=this._prevBlock,s.encryptBlock(a,0);for(var o=0;o<n;o++)e[t+o]^=a[o]}return e.Encryptor=e.extend({processBlock:function(e,n){var s=this._cipher,a=s.blockSize;t.call(this,e,n,a,s),this._prevBlock=e.slice(n,n+a)}}),e.Decryptor=e.extend({processBlock:function(e,n){var s=this._cipher,a=s.blockSize,r=e.slice(n,n+a);t.call(this,e,n,a,s),this._prevBlock=r}}),e}(),n.mode.CFB)})),mo((function(e,t){var n,s,a;e.exports=((a=U5).mode.CTR=(n=a.lib.BlockCipherMode.extend(),s=n.Encryptor=n.extend({processBlock:function(e,t){var n=this._cipher,s=n.blockSize,a=this._iv,r=this._counter;a&&(r=this._counter=a.slice(0),this._iv=void 0);var o=r.slice(0);n.encryptBlock(o,0),r[s-1]=r[s-1]+1|0;for(var i=0;i<s;i++)e[t+i]^=o[i]}}),n.Decryptor=s,n),a.mode.CTR)})),mo((function(e,t){var n;e.exports=((n=U5).mode.CTRGladman=function(){var e=n.lib.BlockCipherMode.extend();function t(e){if(255==(e>>24&255)){var t=e>>16&255,n=e>>8&255,s=255&e;255===t?(t=0,255===n?(n=0,255===s?s=0:++s):++n):++t,e=0,e+=t<<16,e+=n<<8,e+=s}else e+=1<<24;return e}function s(e){return 0===(e[0]=t(e[0]))&&(e[1]=t(e[1])),e}var a=e.Encryptor=e.extend({processBlock:function(e,t){var n=this._cipher,a=n.blockSize,r=this._iv,o=this._counter;r&&(o=this._counter=r.slice(0),this._iv=void 0),s(o);var i=o.slice(0);n.encryptBlock(i,0);for(var l=0;l<a;l++)e[t+l]^=i[l]}});return e.Decryptor=a,e}(),n.mode.CTRGladman)})),mo((function(e,t){var n,s,a;e.exports=((a=U5).mode.OFB=(n=a.lib.BlockCipherMode.extend(),s=n.Encryptor=n.extend({processBlock:function(e,t){var n=this._cipher,s=n.blockSize,a=this._iv,r=this._keystream;a&&(r=this._keystream=a.slice(0),this._iv=void 0),n.encryptBlock(r,0);for(var o=0;o<s;o++)e[t+o]^=r[o]}}),n.Decryptor=s,n),a.mode.OFB)})),mo((function(e,t){var n,s;e.exports=((s=U5).mode.ECB=((n=s.lib.BlockCipherMode.extend()).Encryptor=n.extend({processBlock:function(e,t){this._cipher.encryptBlock(e,t)}}),n.Decryptor=n.extend({processBlock:function(e,t){this._cipher.decryptBlock(e,t)}}),n),s.mode.ECB)})),mo((function(e,t){var n;e.exports=((n=U5).pad.AnsiX923={pad:function(e,t){var n=e.sigBytes,s=4*t,a=s-n%s,r=n+a-1;e.clamp(),e.words[r>>>2]|=a<<24-r%4*8,e.sigBytes+=a},unpad:function(e){var t=255&e.words[e.sigBytes-1>>>2];e.sigBytes-=t}},n.pad.Ansix923)})),mo((function(e,t){var n;e.exports=((n=U5).pad.Iso10126={pad:function(e,t){var s=4*t,a=s-e.sigBytes%s;e.concat(n.lib.WordArray.random(a-1)).concat(n.lib.WordArray.create([a<<24],1))},unpad:function(e){var t=255&e.words[e.sigBytes-1>>>2];e.sigBytes-=t}},n.pad.Iso10126)})),mo((function(e,t){var n;e.exports=((n=U5).pad.Iso97971={pad:function(e,t){e.concat(n.lib.WordArray.create([2147483648],1)),n.pad.ZeroPadding.pad(e,t)},unpad:function(e){n.pad.ZeroPadding.unpad(e),e.sigBytes--}},n.pad.Iso97971)})),mo((function(e,t){var n;e.exports=((n=U5).pad.ZeroPadding={pad:function(e,t){var n=4*t;e.clamp(),e.sigBytes+=n-(e.sigBytes%n||n)},unpad:function(e){var t=e.words,n=e.sigBytes-1;for(n=e.sigBytes-1;n>=0;n--)if(t[n>>>2]>>>24-n%4*8&255){e.sigBytes=n+1;break}}},n.pad.ZeroPadding)})),mo((function(e,t){var n;e.exports=((n=U5).pad.NoPadding={pad:function(){},unpad:function(){}},n.pad.NoPadding)})),mo((function(e,t){var n,s,a,r;e.exports=(s=(n=r=U5).lib.CipherParams,a=n.enc.Hex,n.format.Hex={stringify:function(e){return e.ciphertext.toString(a)},parse:function(e){var t=a.parse(e);return s.create({ciphertext:t})}},r.format.Hex)})),mo((function(e,t){var n;e.exports=(n=U5,function(){var e=n,t=e.lib.BlockCipher,s=e.algo,a=[],r=[],o=[],i=[],l=[],u=[],c=[],h=[],d=[],p=[];!function(){for(var e=[],t=0;t<256;t++)e[t]=t<128?t<<1:t<<1^283;var n=0,s=0;for(t=0;t<256;t++){var f=s^s<<1^s<<2^s<<3^s<<4;f=f>>>8^255&f^99,a[n]=f,r[f]=n;var m=e[n],g=e[m],x=e[g],b=257*e[f]^16843008*f;o[n]=b<<24|b>>>8,i[n]=b<<16|b>>>16,l[n]=b<<8|b>>>24,u[n]=b,b=16843009*x^65537*g^257*m^16843008*n,c[f]=b<<24|b>>>8,h[f]=b<<16|b>>>16,d[f]=b<<8|b>>>24,p[f]=b,n?(n=m^e[e[e[x^m]]],s^=e[e[s]]):n=s=1}}();var f=[0,1,2,4,8,16,32,64,128,27,54],m=s.AES=t.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var e=this._keyPriorReset=this._key,t=e.words,n=e.sigBytes/4,s=4*((this._nRounds=n+6)+1),r=this._keySchedule=[],o=0;o<s;o++)o<n?r[o]=t[o]:(u=r[o-1],o%n?n>6&&o%n==4&&(u=a[u>>>24]<<24|a[u>>>16&255]<<16|a[u>>>8&255]<<8|a[255&u]):(u=a[(u=u<<8|u>>>24)>>>24]<<24|a[u>>>16&255]<<16|a[u>>>8&255]<<8|a[255&u],u^=f[o/n|0]<<24),r[o]=r[o-n]^u);for(var i=this._invKeySchedule=[],l=0;l<s;l++){if(o=s-l,l%4)var u=r[o];else u=r[o-4];i[l]=l<4||o<=4?u:c[a[u>>>24]]^h[a[u>>>16&255]]^d[a[u>>>8&255]]^p[a[255&u]]}}},encryptBlock:function(e,t){this._doCryptBlock(e,t,this._keySchedule,o,i,l,u,a)},decryptBlock:function(e,t){var n=e[t+1];e[t+1]=e[t+3],e[t+3]=n,this._doCryptBlock(e,t,this._invKeySchedule,c,h,d,p,r),n=e[t+1],e[t+1]=e[t+3],e[t+3]=n},_doCryptBlock:function(e,t,n,s,a,r,o,i){for(var l=this._nRounds,u=e[t]^n[0],c=e[t+1]^n[1],h=e[t+2]^n[2],d=e[t+3]^n[3],p=4,f=1;f<l;f++){var m=s[u>>>24]^a[c>>>16&255]^r[h>>>8&255]^o[255&d]^n[p++],g=s[c>>>24]^a[h>>>16&255]^r[d>>>8&255]^o[255&u]^n[p++],x=s[h>>>24]^a[d>>>16&255]^r[u>>>8&255]^o[255&c]^n[p++],b=s[d>>>24]^a[u>>>16&255]^r[c>>>8&255]^o[255&h]^n[p++];u=m,c=g,h=x,d=b}m=(i[u>>>24]<<24|i[c>>>16&255]<<16|i[h>>>8&255]<<8|i[255&d])^n[p++],g=(i[c>>>24]<<24|i[h>>>16&255]<<16|i[d>>>8&255]<<8|i[255&u])^n[p++],x=(i[h>>>24]<<24|i[d>>>16&255]<<16|i[u>>>8&255]<<8|i[255&c])^n[p++],b=(i[d>>>24]<<24|i[u>>>16&255]<<16|i[c>>>8&255]<<8|i[255&h])^n[p++],e[t]=m,e[t+1]=g,e[t+2]=x,e[t+3]=b},keySize:8});e.AES=t._createHelper(m)}(),n.AES)})),mo((function(e,t){var n;e.exports=(n=U5,function(){var e=n,t=e.lib,s=t.WordArray,a=t.BlockCipher,r=e.algo,o=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],i=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],l=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],u=[{0:8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{0:1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{0:260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{0:2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{0:128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{0:268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{0:1048576,16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{0:134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],c=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],h=r.DES=a.extend({_doReset:function(){for(var e=this._key.words,t=[],n=0;n<56;n++){var s=o[n]-1;t[n]=e[s>>>5]>>>31-s%32&1}for(var a=this._subKeys=[],r=0;r<16;r++){var u=a[r]=[],c=l[r];for(n=0;n<24;n++)u[n/6|0]|=t[(i[n]-1+c)%28]<<31-n%6,u[4+(n/6|0)]|=t[28+(i[n+24]-1+c)%28]<<31-n%6;for(u[0]=u[0]<<1|u[0]>>>31,n=1;n<7;n++)u[n]=u[n]>>>4*(n-1)+3;u[7]=u[7]<<5|u[7]>>>27}var h=this._invSubKeys=[];for(n=0;n<16;n++)h[n]=a[15-n]},encryptBlock:function(e,t){this._doCryptBlock(e,t,this._subKeys)},decryptBlock:function(e,t){this._doCryptBlock(e,t,this._invSubKeys)},_doCryptBlock:function(e,t,n){this._lBlock=e[t],this._rBlock=e[t+1],d.call(this,4,252645135),d.call(this,16,65535),p.call(this,2,858993459),p.call(this,8,16711935),d.call(this,1,1431655765);for(var s=0;s<16;s++){for(var a=n[s],r=this._lBlock,o=this._rBlock,i=0,l=0;l<8;l++)i|=u[l][((o^a[l])&c[l])>>>0];this._lBlock=o,this._rBlock=r^i}var h=this._lBlock;this._lBlock=this._rBlock,this._rBlock=h,d.call(this,1,1431655765),p.call(this,8,16711935),p.call(this,2,858993459),d.call(this,16,65535),d.call(this,4,252645135),e[t]=this._lBlock,e[t+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});function d(e,t){var n=(this._lBlock>>>e^this._rBlock)&t;this._rBlock^=n,this._lBlock^=n<<e}function p(e,t){var n=(this._rBlock>>>e^this._lBlock)&t;this._lBlock^=n,this._rBlock^=n<<e}e.DES=a._createHelper(h);var f=r.TripleDES=a.extend({_doReset:function(){var e=this._key.words;if(2!==e.length&&4!==e.length&&e.length<6)throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");var t=e.slice(0,2),n=e.length<4?e.slice(0,2):e.slice(2,4),a=e.length<6?e.slice(0,2):e.slice(4,6);this._des1=h.createEncryptor(s.create(t)),this._des2=h.createEncryptor(s.create(n)),this._des3=h.createEncryptor(s.create(a))},encryptBlock:function(e,t){this._des1.encryptBlock(e,t),this._des2.decryptBlock(e,t),this._des3.encryptBlock(e,t)},decryptBlock:function(e,t){this._des3.decryptBlock(e,t),this._des2.encryptBlock(e,t),this._des1.decryptBlock(e,t)},keySize:6,ivSize:2,blockSize:2});e.TripleDES=a._createHelper(f)}(),n.TripleDES)})),mo((function(e,t){var n;e.exports=(n=U5,function(){var e=n,t=e.lib.StreamCipher,s=e.algo,a=s.RC4=t.extend({_doReset:function(){for(var e=this._key,t=e.words,n=e.sigBytes,s=this._S=[],a=0;a<256;a++)s[a]=a;a=0;for(var r=0;a<256;a++){var o=a%n,i=t[o>>>2]>>>24-o%4*8&255;r=(r+s[a]+i)%256;var l=s[a];s[a]=s[r],s[r]=l}this._i=this._j=0},_doProcessBlock:function(e,t){e[t]^=r.call(this)},keySize:8,ivSize:0});function r(){for(var e=this._S,t=this._i,n=this._j,s=0,a=0;a<4;a++){n=(n+e[t=(t+1)%256])%256;var r=e[t];e[t]=e[n],e[n]=r,s|=e[(e[t]+e[n])%256]<<24-8*a}return this._i=t,this._j=n,s}e.RC4=t._createHelper(a);var o=s.RC4Drop=a.extend({cfg:a.cfg.extend({drop:192}),_doReset:function(){a._doReset.call(this);for(var e=this.cfg.drop;e>0;e--)r.call(this)}});e.RC4Drop=t._createHelper(o)}(),n.RC4)})),mo((function(e,t){var n;e.exports=(n=U5,function(){var e=n,t=e.lib.StreamCipher,s=e.algo,a=[],r=[],o=[],i=s.Rabbit=t.extend({_doReset:function(){for(var e=this._key.words,t=this.cfg.iv,n=0;n<4;n++)e[n]=16711935&(e[n]<<8|e[n]>>>24)|4278255360&(e[n]<<24|e[n]>>>8);var s=this._X=[e[0],e[3]<<16|e[2]>>>16,e[1],e[0]<<16|e[3]>>>16,e[2],e[1]<<16|e[0]>>>16,e[3],e[2]<<16|e[1]>>>16],a=this._C=[e[2]<<16|e[2]>>>16,4294901760&e[0]|65535&e[1],e[3]<<16|e[3]>>>16,4294901760&e[1]|65535&e[2],e[0]<<16|e[0]>>>16,4294901760&e[2]|65535&e[3],e[1]<<16|e[1]>>>16,4294901760&e[3]|65535&e[0]];for(this._b=0,n=0;n<4;n++)l.call(this);for(n=0;n<8;n++)a[n]^=s[n+4&7];if(t){var r=t.words,o=r[0],i=r[1],u=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),c=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8),h=u>>>16|4294901760&c,d=c<<16|65535&u;for(a[0]^=u,a[1]^=h,a[2]^=c,a[3]^=d,a[4]^=u,a[5]^=h,a[6]^=c,a[7]^=d,n=0;n<4;n++)l.call(this)}},_doProcessBlock:function(e,t){var n=this._X;l.call(this),a[0]=n[0]^n[5]>>>16^n[3]<<16,a[1]=n[2]^n[7]>>>16^n[5]<<16,a[2]=n[4]^n[1]>>>16^n[7]<<16,a[3]=n[6]^n[3]>>>16^n[1]<<16;for(var s=0;s<4;s++)a[s]=16711935&(a[s]<<8|a[s]>>>24)|4278255360&(a[s]<<24|a[s]>>>8),e[t+s]^=a[s]},blockSize:4,ivSize:2});function l(){for(var e=this._X,t=this._C,n=0;n<8;n++)r[n]=t[n];for(t[0]=t[0]+1295307597+this._b|0,t[1]=t[1]+3545052371+(t[0]>>>0<r[0]>>>0?1:0)|0,t[2]=t[2]+886263092+(t[1]>>>0<r[1]>>>0?1:0)|0,t[3]=t[3]+1295307597+(t[2]>>>0<r[2]>>>0?1:0)|0,t[4]=t[4]+3545052371+(t[3]>>>0<r[3]>>>0?1:0)|0,t[5]=t[5]+886263092+(t[4]>>>0<r[4]>>>0?1:0)|0,t[6]=t[6]+1295307597+(t[5]>>>0<r[5]>>>0?1:0)|0,t[7]=t[7]+3545052371+(t[6]>>>0<r[6]>>>0?1:0)|0,this._b=t[7]>>>0<r[7]>>>0?1:0,n=0;n<8;n++){var s=e[n]+t[n],a=65535&s,i=s>>>16,l=((a*a>>>17)+a*i>>>15)+i*i,u=((4294901760&s)*s|0)+((65535&s)*s|0);o[n]=l^u}e[0]=o[0]+(o[7]<<16|o[7]>>>16)+(o[6]<<16|o[6]>>>16)|0,e[1]=o[1]+(o[0]<<8|o[0]>>>24)+o[7]|0,e[2]=o[2]+(o[1]<<16|o[1]>>>16)+(o[0]<<16|o[0]>>>16)|0,e[3]=o[3]+(o[2]<<8|o[2]>>>24)+o[1]|0,e[4]=o[4]+(o[3]<<16|o[3]>>>16)+(o[2]<<16|o[2]>>>16)|0,e[5]=o[5]+(o[4]<<8|o[4]>>>24)+o[3]|0,e[6]=o[6]+(o[5]<<16|o[5]>>>16)+(o[4]<<16|o[4]>>>16)|0,e[7]=o[7]+(o[6]<<8|o[6]>>>24)+o[5]|0}e.Rabbit=t._createHelper(i)}(),n.Rabbit)})),mo((function(e,t){var n;e.exports=(n=U5,function(){var e=n,t=e.lib.StreamCipher,s=e.algo,a=[],r=[],o=[],i=s.RabbitLegacy=t.extend({_doReset:function(){var e=this._key.words,t=this.cfg.iv,n=this._X=[e[0],e[3]<<16|e[2]>>>16,e[1],e[0]<<16|e[3]>>>16,e[2],e[1]<<16|e[0]>>>16,e[3],e[2]<<16|e[1]>>>16],s=this._C=[e[2]<<16|e[2]>>>16,4294901760&e[0]|65535&e[1],e[3]<<16|e[3]>>>16,4294901760&e[1]|65535&e[2],e[0]<<16|e[0]>>>16,4294901760&e[2]|65535&e[3],e[1]<<16|e[1]>>>16,4294901760&e[3]|65535&e[0]];this._b=0;for(var a=0;a<4;a++)l.call(this);for(a=0;a<8;a++)s[a]^=n[a+4&7];if(t){var r=t.words,o=r[0],i=r[1],u=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),c=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8),h=u>>>16|4294901760&c,d=c<<16|65535&u;for(s[0]^=u,s[1]^=h,s[2]^=c,s[3]^=d,s[4]^=u,s[5]^=h,s[6]^=c,s[7]^=d,a=0;a<4;a++)l.call(this)}},_doProcessBlock:function(e,t){var n=this._X;l.call(this),a[0]=n[0]^n[5]>>>16^n[3]<<16,a[1]=n[2]^n[7]>>>16^n[5]<<16,a[2]=n[4]^n[1]>>>16^n[7]<<16,a[3]=n[6]^n[3]>>>16^n[1]<<16;for(var s=0;s<4;s++)a[s]=16711935&(a[s]<<8|a[s]>>>24)|4278255360&(a[s]<<24|a[s]>>>8),e[t+s]^=a[s]},blockSize:4,ivSize:2});function l(){for(var e=this._X,t=this._C,n=0;n<8;n++)r[n]=t[n];for(t[0]=t[0]+1295307597+this._b|0,t[1]=t[1]+3545052371+(t[0]>>>0<r[0]>>>0?1:0)|0,t[2]=t[2]+886263092+(t[1]>>>0<r[1]>>>0?1:0)|0,t[3]=t[3]+1295307597+(t[2]>>>0<r[2]>>>0?1:0)|0,t[4]=t[4]+3545052371+(t[3]>>>0<r[3]>>>0?1:0)|0,t[5]=t[5]+886263092+(t[4]>>>0<r[4]>>>0?1:0)|0,t[6]=t[6]+1295307597+(t[5]>>>0<r[5]>>>0?1:0)|0,t[7]=t[7]+3545052371+(t[6]>>>0<r[6]>>>0?1:0)|0,this._b=t[7]>>>0<r[7]>>>0?1:0,n=0;n<8;n++){var s=e[n]+t[n],a=65535&s,i=s>>>16,l=((a*a>>>17)+a*i>>>15)+i*i,u=((4294901760&s)*s|0)+((65535&s)*s|0);o[n]=l^u}e[0]=o[0]+(o[7]<<16|o[7]>>>16)+(o[6]<<16|o[6]>>>16)|0,e[1]=o[1]+(o[0]<<8|o[0]>>>24)+o[7]|0,e[2]=o[2]+(o[1]<<16|o[1]>>>16)+(o[0]<<16|o[0]>>>16)|0,e[3]=o[3]+(o[2]<<8|o[2]>>>24)+o[1]|0,e[4]=o[4]+(o[3]<<16|o[3]>>>16)+(o[2]<<16|o[2]>>>16)|0,e[5]=o[5]+(o[4]<<8|o[4]>>>24)+o[3]|0,e[6]=o[6]+(o[5]<<16|o[5]>>>16)+(o[4]<<16|o[4]>>>16)|0,e[7]=o[7]+(o[6]<<8|o[6]>>>24)+o[5]|0}e.RabbitLegacy=t._createHelper(i)}(),n.RabbitLegacy)})),mo((function(e,t){var n;e.exports=(n=U5,function(){var e=n,t=e.lib.BlockCipher,s=e.algo;const a=16,r=[608135816,2242054355,320440878,57701188,2752067618,698298832,137296536,3964562569,1160258022,953160567,3193202383,887688300,3232508343,3380367581,1065670069,3041331479,2450970073,2306472731],o=[[3509652390,2564797868,805139163,3491422135,3101798381,1780907670,3128725573,4046225305,614570311,3012652279,134345442,2240740374,1667834072,1901547113,2757295779,4103290238,227898511,1921955416,1904987480,2182433518,2069144605,3260701109,2620446009,720527379,3318853667,677414384,3393288472,3101374703,2390351024,1614419982,1822297739,2954791486,3608508353,3174124327,2024746970,1432378464,3864339955,2857741204,1464375394,1676153920,1439316330,715854006,3033291828,289532110,2706671279,2087905683,3018724369,1668267050,732546397,1947742710,3462151702,2609353502,2950085171,1814351708,2050118529,680887927,999245976,1800124847,3300911131,1713906067,1641548236,4213287313,1216130144,1575780402,4018429277,3917837745,3693486850,3949271944,596196993,3549867205,258830323,2213823033,772490370,2760122372,1774776394,2652871518,566650946,4142492826,1728879713,2882767088,1783734482,3629395816,2517608232,2874225571,1861159788,326777828,3124490320,2130389656,2716951837,967770486,1724537150,2185432712,2364442137,1164943284,2105845187,998989502,3765401048,2244026483,1075463327,1455516326,1322494562,910128902,469688178,1117454909,936433444,3490320968,3675253459,1240580251,122909385,2157517691,634681816,4142456567,3825094682,3061402683,2540495037,79693498,3249098678,1084186820,1583128258,426386531,1761308591,1047286709,322548459,995290223,1845252383,2603652396,3431023940,2942221577,3202600964,3727903485,1712269319,422464435,3234572375,1170764815,3523960633,3117677531,1434042557,442511882,3600875718,1076654713,1738483198,4213154764,2393238008,3677496056,1014306527,4251020053,793779912,2902807211,842905082,4246964064,1395751752,1040244610,2656851899,3396308128,445077038,3742853595,3577915638,679411651,2892444358,2354009459,1767581616,3150600392,3791627101,3102740896,284835224,4246832056,1258075500,768725851,2589189241,3069724005,3532540348,1274779536,3789419226,2764799539,1660621633,3471099624,4011903706,913787905,3497959166,737222580,2514213453,2928710040,3937242737,1804850592,3499020752,2949064160,2386320175,2390070455,2415321851,4061277028,2290661394,2416832540,1336762016,1754252060,3520065937,3014181293,791618072,3188594551,3933548030,2332172193,3852520463,3043980520,413987798,3465142937,3030929376,4245938359,2093235073,3534596313,375366246,2157278981,2479649556,555357303,3870105701,2008414854,3344188149,4221384143,3956125452,2067696032,3594591187,2921233993,2428461,544322398,577241275,1471733935,610547355,4027169054,1432588573,1507829418,2025931657,3646575487,545086370,48609733,2200306550,1653985193,298326376,1316178497,3007786442,2064951626,458293330,2589141269,3591329599,3164325604,727753846,2179363840,146436021,1461446943,4069977195,705550613,3059967265,3887724982,4281599278,3313849956,1404054877,2845806497,146425753,1854211946],[1266315497,3048417604,3681880366,3289982499,290971e4,1235738493,2632868024,2414719590,3970600049,1771706367,1449415276,3266420449,422970021,1963543593,2690192192,3826793022,1062508698,1531092325,1804592342,2583117782,2714934279,4024971509,1294809318,4028980673,1289560198,2221992742,1669523910,35572830,157838143,1052438473,1016535060,1802137761,1753167236,1386275462,3080475397,2857371447,1040679964,2145300060,2390574316,1461121720,2956646967,4031777805,4028374788,33600511,2920084762,1018524850,629373528,3691585981,3515945977,2091462646,2486323059,586499841,988145025,935516892,3367335476,2599673255,2839830854,265290510,3972581182,2759138881,3795373465,1005194799,847297441,406762289,1314163512,1332590856,1866599683,4127851711,750260880,613907577,1450815602,3165620655,3734664991,3650291728,3012275730,3704569646,1427272223,778793252,1343938022,2676280711,2052605720,1946737175,3164576444,3914038668,3967478842,3682934266,1661551462,3294938066,4011595847,840292616,3712170807,616741398,312560963,711312465,1351876610,322626781,1910503582,271666773,2175563734,1594956187,70604529,3617834859,1007753275,1495573769,4069517037,2549218298,2663038764,504708206,2263041392,3941167025,2249088522,1514023603,1998579484,1312622330,694541497,2582060303,2151582166,1382467621,776784248,2618340202,3323268794,2497899128,2784771155,503983604,4076293799,907881277,423175695,432175456,1378068232,4145222326,3954048622,3938656102,3820766613,2793130115,2977904593,26017576,3274890735,3194772133,1700274565,1756076034,4006520079,3677328699,720338349,1533947780,354530856,688349552,3973924725,1637815568,332179504,3949051286,53804574,2852348879,3044236432,1282449977,3583942155,3416972820,4006381244,1617046695,2628476075,3002303598,1686838959,431878346,2686675385,1700445008,1080580658,1009431731,832498133,3223435511,2605976345,2271191193,2516031870,1648197032,4164389018,2548247927,300782431,375919233,238389289,3353747414,2531188641,2019080857,1475708069,455242339,2609103871,448939670,3451063019,1395535956,2413381860,1841049896,1491858159,885456874,4264095073,4001119347,1565136089,3898914787,1108368660,540939232,1173283510,2745871338,3681308437,4207628240,3343053890,4016749493,1699691293,1103962373,3625875870,2256883143,3830138730,1031889488,3479347698,1535977030,4236805024,3251091107,2132092099,1774941330,1199868427,1452454533,157007616,2904115357,342012276,595725824,1480756522,206960106,497939518,591360097,863170706,2375253569,3596610801,1814182875,2094937945,3421402208,1082520231,3463918190,2785509508,435703966,3908032597,1641649973,2842273706,3305899714,1510255612,2148256476,2655287854,3276092548,4258621189,236887753,3681803219,274041037,1734335097,3815195456,3317970021,1899903192,1026095262,4050517792,356393447,2410691914,3873677099,3682840055],[3913112168,2491498743,4132185628,2489919796,1091903735,1979897079,3170134830,3567386728,3557303409,857797738,1136121015,1342202287,507115054,2535736646,337727348,3213592640,1301675037,2528481711,1895095763,1721773893,3216771564,62756741,2142006736,835421444,2531993523,1442658625,3659876326,2882144922,676362277,1392781812,170690266,3921047035,1759253602,3611846912,1745797284,664899054,1329594018,3901205900,3045908486,2062866102,2865634940,3543621612,3464012697,1080764994,553557557,3656615353,3996768171,991055499,499776247,1265440854,648242737,3940784050,980351604,3713745714,1749149687,3396870395,4211799374,3640570775,1161844396,3125318951,1431517754,545492359,4268468663,3499529547,1437099964,2702547544,3433638243,2581715763,2787789398,1060185593,1593081372,2418618748,4260947970,69676912,2159744348,86519011,2512459080,3838209314,1220612927,3339683548,133810670,1090789135,1078426020,1569222167,845107691,3583754449,4072456591,1091646820,628848692,1613405280,3757631651,526609435,236106946,48312990,2942717905,3402727701,1797494240,859738849,992217954,4005476642,2243076622,3870952857,3732016268,765654824,3490871365,2511836413,1685915746,3888969200,1414112111,2273134842,3281911079,4080962846,172450625,2569994100,980381355,4109958455,2819808352,2716589560,2568741196,3681446669,3329971472,1835478071,660984891,3704678404,4045999559,3422617507,3040415634,1762651403,1719377915,3470491036,2693910283,3642056355,3138596744,1364962596,2073328063,1983633131,926494387,3423689081,2150032023,4096667949,1749200295,3328846651,309677260,2016342300,1779581495,3079819751,111262694,1274766160,443224088,298511866,1025883608,3806446537,1145181785,168956806,3641502830,3584813610,1689216846,3666258015,3200248200,1692713982,2646376535,4042768518,1618508792,1610833997,3523052358,4130873264,2001055236,3610705100,2202168115,4028541809,2961195399,1006657119,2006996926,3186142756,1430667929,3210227297,1314452623,4074634658,4101304120,2273951170,1399257539,3367210612,3027628629,1190975929,2062231137,2333990788,2221543033,2438960610,1181637006,548689776,2362791313,3372408396,3104550113,3145860560,296247880,1970579870,3078560182,3769228297,1714227617,3291629107,3898220290,166772364,1251581989,493813264,448347421,195405023,2709975567,677966185,3703036547,1463355134,2715995803,1338867538,1343315457,2802222074,2684532164,233230375,2599980071,2000651841,3277868038,1638401717,4028070440,3237316320,6314154,819756386,300326615,590932579,1405279636,3267499572,3150704214,2428286686,3959192993,3461946742,1862657033,1266418056,963775037,2089974820,2263052895,1917689273,448879540,3550394620,3981727096,150775221,3627908307,1303187396,508620638,2975983352,2726630617,1817252668,1876281319,1457606340,908771278,3720792119,3617206836,2455994898,1729034894,1080033504],[976866871,3556439503,2881648439,1522871579,1555064734,1336096578,3548522304,2579274686,3574697629,3205460757,3593280638,3338716283,3079412587,564236357,2993598910,1781952180,1464380207,3163844217,3332601554,1699332808,1393555694,1183702653,3581086237,1288719814,691649499,2847557200,2895455976,3193889540,2717570544,1781354906,1676643554,2592534050,3230253752,1126444790,2770207658,2633158820,2210423226,2615765581,2414155088,3127139286,673620729,2805611233,1269405062,4015350505,3341807571,4149409754,1057255273,2012875353,2162469141,2276492801,2601117357,993977747,3918593370,2654263191,753973209,36408145,2530585658,25011837,3520020182,2088578344,530523599,2918365339,1524020338,1518925132,3760827505,3759777254,1202760957,3985898139,3906192525,674977740,4174734889,2031300136,2019492241,3983892565,4153806404,3822280332,352677332,2297720250,60907813,90501309,3286998549,1016092578,2535922412,2839152426,457141659,509813237,4120667899,652014361,1966332200,2975202805,55981186,2327461051,676427537,3255491064,2882294119,3433927263,1307055953,942726286,933058658,2468411793,3933900994,4215176142,1361170020,2001714738,2830558078,3274259782,1222529897,1679025792,2729314320,3714953764,1770335741,151462246,3013232138,1682292957,1483529935,471910574,1539241949,458788160,3436315007,1807016891,3718408830,978976581,1043663428,3165965781,1927990952,4200891579,2372276910,3208408903,3533431907,1412390302,2931980059,4132332400,1947078029,3881505623,4168226417,2941484381,1077988104,1320477388,886195818,18198404,3786409e3,2509781533,112762804,3463356488,1866414978,891333506,18488651,661792760,1628790961,3885187036,3141171499,876946877,2693282273,1372485963,791857591,2686433993,3759982718,3167212022,3472953795,2716379847,445679433,3561995674,3504004811,3574258232,54117162,3331405415,2381918588,3769707343,4154350007,1140177722,4074052095,668550556,3214352940,367459370,261225585,2610173221,4209349473,3468074219,3265815641,314222801,3066103646,3808782860,282218597,3406013506,3773591054,379116347,1285071038,846784868,2669647154,3771962079,3550491691,2305946142,453669953,1268987020,3317592352,3279303384,3744833421,2610507566,3859509063,266596637,3847019092,517658769,3462560207,3443424879,370717030,4247526661,2224018117,4143653529,4112773975,2788324899,2477274417,1456262402,2901442914,1517677493,1846949527,2295493580,3734397586,2176403920,1280348187,1908823572,3871786941,846861322,1172426758,3287448474,3383383037,1655181056,3139813346,901632758,1897031941,2986607138,3066810236,3447102507,1393639104,373351379,950779232,625454576,3124240540,4148612726,2007998917,544563296,2244738638,2330496472,2058025392,1291430526,424198748,50039436,29584100,3605783033,2429876329,2791104160,1057563949,3255363231,3075367218,3463963227,1469046755,985887462]];var i={pbox:[],sbox:[]};function l(e,t){let n=t>>24&255,s=t>>16&255,a=t>>8&255,r=255&t,o=e.sbox[0][n]+e.sbox[1][s];return o^=e.sbox[2][a],o+=e.sbox[3][r],o}function u(e,t,n){let s,r=t,o=n;for(let t=0;t<a;++t)r^=e.pbox[t],o=l(e,r)^o,s=r,r=o,o=s;return s=r,r=o,o=s,o^=e.pbox[a],r^=e.pbox[a+1],{left:r,right:o}}function c(e,t,n){let s,r=t,o=n;for(let t=a+1;t>1;--t)r^=e.pbox[t],o=l(e,r)^o,s=r,r=o,o=s;return s=r,r=o,o=s,o^=e.pbox[1],r^=e.pbox[0],{left:r,right:o}}function h(e,t,n){for(let t=0;t<4;t++){e.sbox[t]=[];for(let n=0;n<256;n++)e.sbox[t][n]=o[t][n]}let s=0;for(let o=0;o<a+2;o++)e.pbox[o]=r[o]^t[s],s++,s>=n&&(s=0);let i=0,l=0,c=0;for(let t=0;t<a+2;t+=2)c=u(e,i,l),i=c.left,l=c.right,e.pbox[t]=i,e.pbox[t+1]=l;for(let t=0;t<4;t++)for(let n=0;n<256;n+=2)c=u(e,i,l),i=c.left,l=c.right,e.sbox[t][n]=i,e.sbox[t][n+1]=l;return!0}var d=s.Blowfish=t.extend({_doReset:function(){if(this._keyPriorReset!==this._key){var e=this._keyPriorReset=this._key,t=e.words,n=e.sigBytes/4;h(i,t,n)}},encryptBlock:function(e,t){var n=u(i,e[t],e[t+1]);e[t]=n.left,e[t+1]=n.right},decryptBlock:function(e,t){var n=c(i,e[t],e[t+1]);e[t]=n.left,e[t+1]=n.right},blockSize:2,keySize:4,ivSize:2});e.Blowfish=t._createHelper(d)}(),n.Blowfish)})),mo((function(e,t){e.exports=U5})));let H5,j5;function X5(e,t=1){const n=wR(e,2,t,!0);return AT(e,n)}async function K5(e){return new Promise((t=>{setTimeout((()=>{let n=H5.execute(e);t(n)}),0)}))}async function q5(e,t){const n=document.createElement("canvas");n.width=e.width,n.height=e.height;n.getContext("2d").drawImage(e,0,0,n.width,n.height);let s=FO(n);s=s.resizeBilinear([112,112],!1,!0),s=M_(s,[2,0,1]),s=s.expandDims(),s=s.div(255).sub(.5).div(.5);const a=YA(_T(s,1e4)).div(1e4),r=document.createElement("canvas");r.width=t.width,r.height=t.height;r.getContext("2d").drawImage(t,0,0,r.width,r.height);let o=FO(r);o=o.resizeBilinear([112,112],!1,!0),o=M_(o,[2,0,1]),o=o.expandDims(),o=o.div(255).sub(.5).div(.5);const i=YA(_T(o,1e4)).div(1e4),[l,u]=await Promise.all([K5(a),K5(i)]),c=function(e,t){const n=tR(e,t),s=wR(e),a=wR(t);return n.div(s.mul(a)).dataSync()[0]}(X5(l).squeeze(),X5(u).squeeze());return c}const Y5=document.getElementById("video");Y5.srcObject=await async function(){if(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)throw new Error("Browser API navigator.mediaDevices.getUserMedia not available");const e={audio:!1,video:{facingMode:"user",width:640,height:480,frameRate:{ideal:60}}};return await navigator.mediaDevices.getUserMedia(e)}(),Y5.play();(async(e,t,n,s,a,r=500)=>{if(j5=r,!s.endsWith("==")||"="===s[s.length-3])return void alert("授权码错误");const o=JSON.parse((i=s,G5.AES.decrypt(i,G5.enc.Utf8.parse("235325fdgerteGHdsfsdewred4345341"),{mode:G5.mode.ECB,padding:G5.pad.Pkcs7}).toString(G5.enc.Utf8)));var i;const l=new Date(Date.now()),u=new Date(o.start),c=new Date(o.end);o.callerNo===n?l<u||l>c?alert("授权码错误"):(await async function(){H5=await EG("./model/face_verify/model.json")}(),await async function(e,t,n){const s=e.nodeName;if("IMG"===t.nodeName)if("VIDEO"===s){const s=e.videoWidth,a=e.videoHeight;e.width=s,e.height=a,setInterval((async()=>{const s=await q5(e,t);n(s)}),j5)}else{const s=await q5(e,t);n(s)}else alert("请输入正确的基准图片")}(e,t,a)):alert("用户权限错误")})(document.getElementById("myImg"),"1018","kLhtDpdRFIojo6VSwXZ5myUFycvJUHey3xLqnQFVqsCW1qYg4Rh/aplH0pHraTPZ9NTg5+W/tlKUwZtq7yXtPg==",(e=>{console.log(e)}),3e3);
